/**
 * APIMCP - Experto en api-server (Backend central)
 * Puerto 3001 - API REST central + WebSocket
 */

import { BaseMCP, MCPConfig, AppKnowledge } from './BaseMCP';
import { logger } from '../logger.js';

const apiConfig: MCPConfig = {
  name: 'APIMCP',
  app: 'api-server',
  port: 3001,
  description: 'API REST central y servidor WebSocket - El cerebro de AltaMedica',
  location: 'apps/api-server'
};

const apiKnowledge: AppKnowledge = {
  purpose: 'Servidor backend central que maneja toda la l√≥gica de negocio, autenticaci√≥n SSO, comunicaci√≥n WebSocket, integraciones con bases de datos y servicios externos. Es la √∫nica fuente de verdad para todos los datos',
  
  mainFeatures: [
    'üîê Sistema SSO unificado (UnifiedAuthSystem)',
    'üì¢ Notificaciones centralizadas (UnifiedNotificationSystem)',
    'üè™ Marketplace unificado (UnifiedMarketplaceSystem)',
    'üìπ Controlador de telemedicina (UnifiedTelemedicineController)',
    'üí≥ Sistema de facturaci√≥n completo (Stripe + MercadoPago)',
    'üìä Auditor√≠a HIPAA con hash chain',
    'üîí Seguridad empresarial (RBAC, MFA, rate limiting)',
    'üìà M√©tricas y monitoreo (Prometheus)',
    'üóÑÔ∏è Multi-database (Firebase + PostgreSQL)',
    'üîÑ WebSocket para tiempo real',
    'üìù Validaci√≥n con Zod schemas',
    'üè• Integraci√≥n HL7/FHIR',
    '‚ö° Cache Redis para performance'
  ],

  techStack: {
    framework: 'Next.js API Routes + Express',
    version: '15.3.4',
    ui: [],
    state: ['Redis', 'In-memory cache'],
    styling: [],
    testing: ['Jest', 'Supertest'],
    other: ['Prisma ORM', 'Firebase Admin', 'Socket.io', 'Bull queues', 'Zod']
  },

  keyFiles: [
    {
      pattern: 'src/auth/UnifiedAuthSystem.ts',
      description: 'Sistema de autenticaci√≥n centralizado SSO',
      example: 'UnifiedAuth middleware, JWT handling, role validation'
    },
    {
      pattern: 'src/notifications/UnifiedNotificationSystem.ts',
      description: 'Sistema de notificaciones multicanal'
    },
    {
      pattern: 'src/marketplace/UnifiedMarketplaceSystem.ts',
      description: 'Gesti√≥n completa del marketplace B2B'
    },
    {
      pattern: 'src/telemedicine/unified-telemedicine-controller.ts',
      description: 'Controlador WebRTC y sesiones'
    },
    {
      pattern: 'src/app/api/v1/*',
      description: 'Endpoints API RESTful v1'
    },
    {
      pattern: 'src/services/*',
      description: 'Servicios de negocio (60+ servicios)'
    },
    {
      pattern: 'src/lib/prisma.ts',
      description: 'Cliente Prisma para PostgreSQL'
    },
    {
      pattern: 'src/middleware/*',
      description: 'Middlewares (auth, audit, rate-limit, etc.)'
    }
  ],

  routes: [
    {
      path: '/api/v1/auth/sso',
      method: 'POST',
      description: 'SSO login/logout endpoints',
      authentication: false
    },
    {
      path: '/api/v1/patients/*',
      method: 'ALL',
      description: 'CRUD de pacientes',
      authentication: true
    },
    {
      path: '/api/v1/appointments/*',
      method: 'ALL',
      description: 'Gesti√≥n de citas',
      authentication: true
    },
    {
      path: '/api/v1/telemedicine/*',
      method: 'ALL',
      description: 'WebRTC y videollamadas',
      authentication: true
    },
    {
      path: '/api/v1/prescriptions/*',
      method: 'ALL',
      description: 'Prescripciones m√©dicas',
      authentication: true
    },
    {
      path: '/api/v1/billing/*',
      method: 'ALL',
      description: 'Facturaci√≥n y pagos',
      authentication: true
    },
    {
      path: '/api/v1/audit/*',
      method: 'GET/POST',
      description: 'Logs de auditor√≠a HIPAA',
      authentication: true
    },
    {
      path: '/health',
      method: 'GET',
      description: 'Health check endpoint',
      authentication: false
    }
  ],

  commands: [
    {
      command: 'pnpm --filter api-server dev',
      description: 'Iniciar servidor en puerto 3001'
    },
    {
      command: 'pnpm --filter api-server build',
      description: 'Build de producci√≥n'
    },
    {
      command: 'pnpm --filter api-server prisma:migrate',
      description: 'Ejecutar migraciones de DB'
    },
    {
      command: 'pnpm --filter api-server test',
      description: 'Ejecutar tests unitarios e integraci√≥n'
    }
  ],

  dependencies: [
    '@altamedica/types - Validaci√≥n con Zod',
    '@altamedica/database - Repositorios y esquemas',
    '@altamedica/shared - Servicios compartidos',
    'Prisma ORM - PostgreSQL',
    'Firebase Admin - Firestore/Auth',
    'Redis - Cache y sesiones',
    'Socket.io - WebSocket',
    'Stripe/MercadoPago - Pagos'
  ],

  commonIssues: [
    'CORS errors - Configurar origenes permitidos en cors.ts',
    'Auth fallando - Verificar JWT_SECRET y Firebase config',
    'DB connection failed - Verificar DATABASE_URL',
    'Redis connection refused - Iniciar Redis server',
    'Rate limit hit - Ajustar l√≠mites en rate-limit.ts'
  ],

  bestPractices: [
    'SIEMPRE usar sistemas unificados (Unified*)',
    'Validar TODOS los inputs con Zod schemas',
    'Implementar auditor√≠a en operaciones cr√≠ticas',
    'Usar transacciones para operaciones m√∫ltiples',
    'Cachear respuestas costosas en Redis',
    'Implementar retry logic para servicios externos',
    'Documentar APIs con OpenAPI/Swagger',
    'Usar queues para tareas as√≠ncronas'
  ],

  integrations: [
    'Firebase (Auth, Firestore, Storage)',
    'PostgreSQL via Prisma',
    'Redis para cache',
    'Stripe/MercadoPago para pagos',
    'SendGrid/Twilio para comunicaciones',
    'Prometheus para m√©tricas',
    'Sentry para error tracking'
  ],

  secrets: [
    'JWT_SECRET',
    'DATABASE_URL',
    'REDIS_URL',
    'FIREBASE_SERVICE_ACCOUNT',
    'STRIPE_SECRET_KEY',
    'MERCADOPAGO_ACCESS_TOKEN'
  ]
};

export class APIMCP extends BaseMCP {
  constructor() {
    super(apiConfig, apiKnowledge);
  }

  help(query?: string): void {
    if (!query) {
      logger.info('\nüöÄ APIMCP - Experto en api-server\n');
      logger.info('Backend central de AltaMedica (Puerto 3001)\n');
      logger.info('‚ö†Ô∏è CR√çTICO: Usar SIEMPRE sistemas unificados:\n');
      logger.info('  ‚Ä¢ UnifiedAuthSystem');
      logger.info('  ‚Ä¢ UnifiedNotificationSystem');
      logger.info('  ‚Ä¢ UnifiedMarketplaceSystem');
      logger.info('  ‚Ä¢ UnifiedTelemedicineController\n');
      logger.info('Usa: apiMCP.[comando]() para m√°s informaci√≥n');
      return;
    }
    
    const queryLower = query.toLowerCase();
    
    if (queryLower.includes('unified') || queryLower.includes('auth')) {
      logger.info('\nüîê Sistemas Unificados:');
      logger.info('NUNCA crear servicios duplicados.');
      logger.info('Siempre usar los sistemas unificados existentes.');
      logger.info('Ubicaci√≥n: src/[dominio]/Unified[Sistema].ts');
    }
  }

  generateExample(type: string): string {
    switch(type.toLowerCase()) {
      case 'endpoint':
        return `
// Endpoint API con validaci√≥n y auditor√≠a
import { NextRequest, NextResponse } from 'next/server';
import { UnifiedAuth } from '@/auth/UnifiedAuthSystem';
import { PatientSchema } from '@altamedica/types';
import { auditLog } from '@/lib/audit';

// Simple logger implementation to avoid circular dependencies
const logger = {
  info: (message, data) => {
    if (typeof console !== 'undefined' && process.env.NODE_ENV !== 'production') {
      console.log(message, data);
    }
  },
  warn: (message, data) => {
    if (typeof console !== 'undefined') {
      console.warn(message, data);
    }
  },
  error: (message, data) => {
    if (typeof console !== 'undefined') {
      console.error(message, data);
    }
  },
  debug: (message, data) => {
    if (typeof console !== 'undefined' && process.env.NODE_ENV !== 'production') {
      console.debug(message, data);
    }
  }
};
export async function POST(request: NextRequest) {
  // 1. Autenticaci√≥n
  const authResult = await UnifiedAuth(request, ['DOCTOR', 'ADMIN']);
  if (!authResult.success) return authResult.response;
  
  // 2. Validaci√≥n
  const body = await request.json();
  const validated = PatientSchema.parse(body);
  
  // 3. L√≥gica de negocio
  const patient = await PatientService.create(validated);
  
  // 4. Auditor√≠a
  await auditLog({
    action: 'PATIENT_CREATE',
    userId: authResult.user.id,
    resource: patient.id,
    metadata: { patientName: patient.name }
  });
  
  // 5. Respuesta
  return NextResponse.json({ success: true, patient });
}`;

      case 'service':
        return `
// Servicio con patr√≥n repository
export class PatientService {
  static async create(data: PatientInput): Promise<Patient> {
    // Validaci√≥n de negocio
    if (await this.isDuplicate(data.email)) {
      throw new ConflictError('Patient already exists');
    }
    
    // Transacci√≥n
    return await prisma.$transaction(async (tx) => {
      // Crear paciente
      const patient = await tx.patient.create({ data });
      
      // Crear historial m√©dico inicial
      await tx.medicalHistory.create({
        data: { patientId: patient.id }
      });
      
      // Notificar
      await notificationService.send({
        userId: patient.id,
        type: 'WELCOME',
        channels: ['email', 'push']
      });
      
      return patient;
    });
  }
}`;

      default:
        return 'Tipos: endpoint, service, middleware, websocket';
    }
  }
}

export const apiMCP = new APIMCP();