#!/usr/bin/env node
/**
 * üè• AUDIT MIGRATIONS RUNNER
 * Script para ejecutar migraciones de auditor√≠a manualmente
 * √ötil para configuraci√≥n inicial y troubleshooting
 */

import { dbConnection } from '../core/DatabaseConnection';
import { MigrationManager, runAutoMigrations } from '../migrations';

// Simple logger implementation to avoid circular dependencies
const logger = {
  info: (message, data) => {
    if (typeof console !== 'undefined' && process.env.NODE_ENV !== 'production') {
      console.log(message, data);
    }
  },
  warn: (message, data) => {
    if (typeof console !== 'undefined') {
      console.warn(message, data);
    }
  },
  error: (message, data) => {
    if (typeof console !== 'undefined') {
      console.error(message, data);
    }
  },
  debug: (message, data) => {
    if (typeof console !== 'undefined' && process.env.NODE_ENV !== 'production') {
      console.debug(message, data);
    }
  }
};
async function main() {
  logger.info('üöÄ AltaMedica - Ejecutor de Migraciones de Auditor√≠a');
  logger.info('üìã Configurando sistema de auditor√≠a para Ley 26.529 Argentina\n');

  try {
    // 1. Inicializar conexiones
    logger.info('üîå Inicializando conexiones de base de datos...');
    const firestore = await dbConnection.getFirestore();
    
    if (!firestore) {
      throw new Error('‚ùå No se pudo conectar a Firestore');
    }
    
    logger.info('‚úÖ Firestore conectado exitosamente');

    // 2. Verificar estado actual de migraciones
    logger.info('\nüìä Verificando estado actual de migraciones...');
    const manager = new MigrationManager(firestore || undefined);
    const status = await manager.checkMigrationStatus();
    
    logger.info('üìã Estado de migraciones Firestore:');
    logger.info(`   ‚úÖ Aplicadas: ${status.firestore.appliedMigrations.length}`);
    logger.info(`   ‚è≥ Pendientes: ${status.firestore.pendingMigrations.length}`);
    
    if (status.firestore.errors.length > 0) {
      logger.info(`   ‚ùå Errores: ${status.firestore.errors.length}`);
      status.firestore.errors.forEach(error => logger.info(`      - ${error}`));
    }

    // 3. Ejecutar migraciones autom√°ticas
    logger.info('\nüîÑ Ejecutando migraciones autom√°ticas...');
    await runAutoMigrations(firestore);

    // 4. Verificar migraciones cr√≠ticas
    logger.info('\nüîç Verificando migraciones cr√≠ticas...');
    const criticalVerified = await manager.verifyCriticalMigrations();
    
    if (!criticalVerified) {
      logger.error('‚ùå Algunas migraciones cr√≠ticas fallaron');
      process.exit(1);
    }

    // 5. Verificar estado final
    logger.info('\nüìä Estado final de migraciones:');
    const finalStatus = await manager.checkMigrationStatus();
    
    logger.info('‚úÖ Firestore:');
    logger.info(`   Aplicadas: ${finalStatus.firestore.appliedMigrations.join(', ')}`);
    logger.info(`   Pendientes: ${finalStatus.firestore.pendingMigrations.join(', ') || 'Ninguna'}`);

    // 6. Probar funcionalidad b√°sica del sistema de auditor√≠a
    logger.info('\nüß™ Probando funcionalidad b√°sica de auditor√≠a...');
    await testAuditFunctionality(firestore);

    logger.info('\nüéâ ¬°Migraciones de auditor√≠a completadas exitosamente!');
    logger.info('üìã Sistema de auditor√≠a Ley 26.529 Argentina est√° listo para usar');
    
  } catch (error) {
    logger.error('\n‚ùå Error ejecutando migraciones de auditor√≠a:', error);
    
    if (error instanceof Error) {
      logger.error('üìã Detalles del error:', error.message);
      if (error.stack) {
        logger.error('üîç Stack trace:', error.stack);
      }
    }
    
    process.exit(1);
  }
}

/**
 * Probar funcionalidad b√°sica del sistema de auditor√≠a
 */
async function testAuditFunctionality(firestore: any) {
  try {
    // Test 1: Verificar que la colecci√≥n existe
    const testCollection = firestore.collection('audit_logs');
    const sampleDoc = await testCollection.doc('migration_001_sample').get();
    
    if (!sampleDoc.exists) {
      throw new Error('Documento de prueba de migraci√≥n no encontrado');
    }
    
    logger.info('   ‚úÖ Colecci√≥n audit_logs creada correctamente');

    // Test 2: Verificar estructura del documento
    const sampleData = sampleDoc.data();
    const requiredFields = ['timestamp', 'actorId', 'actorType', 'action', 'resource'];
    
    for (const field of requiredFields) {
      if (!(field in sampleData)) {
        throw new Error(`Campo obligatorio ${field} no encontrado en documento de prueba`);
      }
    }
    
    logger.info('   ‚úÖ Estructura de documentos conforme a Ley 26.529');

    // Test 3: Verificar configuraci√≥n de migraci√≥n
    const migrationConfig = await firestore
      .collection('_migrations')
      .doc('001_audit_logs')
      .get();
    
    if (!migrationConfig.exists) {
      throw new Error('Configuraci√≥n de migraci√≥n no encontrada');
    }
    
    const configData = migrationConfig.data();
    if (configData.status !== 'applied') {
      throw new Error(`Estado de migraci√≥n inv√°lido: ${configData.status}`);
    }
    
    logger.info('   ‚úÖ Configuraci√≥n de migraci√≥n registrada correctamente');

    // Test 4: Verificar √≠ndices requeridos
    const indexDoc = await firestore
      .collection('_system')
      .doc('audit_logs_indexes')
      .get();
    
    if (!indexDoc.exists) {
      throw new Error('Configuraci√≥n de √≠ndices no encontrada');
    }
    
    logger.info('   ‚úÖ Configuraci√≥n de √≠ndices documentada');
    logger.info('   ‚ÑπÔ∏è  Recordatorio: Crear √≠ndices compuestos manualmente en Firebase Console');

  } catch (error) {
    logger.error('   ‚ùå Fallo en prueba de funcionalidad:', error);
    throw error;
  }
}

/**
 * Mostrar ayuda de uso
 */
function showHelp() {
  logger.info(`
üè• AltaMedica - Ejecutor de Migraciones de Auditor√≠a

DESCRIPCI√ìN:
  Script para configurar el sistema de auditor√≠a conforme Ley 26.529 Argentina.
  Ejecuta las migraciones necesarias para crear la infraestructura de audit logs.

USO:
  npx tsx run-audit-migrations.ts [opciones]
  node run-audit-migrations.js [opciones]

OPCIONES:
  --help, -h          Mostrar esta ayuda
  --status, -s        Solo mostrar estado de migraciones (no ejecutar)
  --verify, -v        Solo verificar migraciones cr√≠ticas
  --rollback, -r      Revertir √∫ltima migraci√≥n (¬°PELIGROSO!)

EJEMPLOS:
  npx tsx run-audit-migrations.ts                    # Ejecutar migraciones
  npx tsx run-audit-migrations.ts --status           # Ver estado
  npx tsx run-audit-migrations.ts --verify           # Verificar cr√≠ticas

NOTAS:
  - Este script requiere conexi√≥n activa a Firestore
  - Las migraciones son idempotentes (seguras de re-ejecutar)
  - Los √≠ndices compuestos deben crearse manualmente en Firebase Console
  - El sistema cumple con Ley 26.529 Argentina Art. 15

SOPORTE:
  Para ayuda adicional, consultar packages/database/src/schemas/audit.schema.ts
  `);
}

// Manejar argumentos de l√≠nea de comandos
const args = process.argv.slice(2);

if (args.includes('--help') || args.includes('-h')) {
  showHelp();
  process.exit(0);
}

if (args.includes('--status') || args.includes('-s')) {
  // Solo mostrar estado
  (async () => {
    try {
      const firestore = await dbConnection.getFirestore();
      const manager = new MigrationManager(firestore || undefined);
      const status = await manager.checkMigrationStatus();
      
      logger.info('üìä Estado de Migraciones de Auditor√≠a:');
      logger.info(`‚úÖ Firestore - Aplicadas: ${status.firestore.appliedMigrations.join(', ') || 'Ninguna'}`);
      logger.info(`‚è≥ Firestore - Pendientes: ${status.firestore.pendingMigrations.join(', ') || 'Ninguna'}`);
      
      if (status.firestore.errors.length > 0) {
        logger.info(`‚ùå Errores: ${status.firestore.errors.join(', ')}`);
      }
    } catch (error) {
      logger.error('Error obteniendo estado:', error);
      process.exit(1);
    }
  })();
} else if (args.includes('--verify') || args.includes('-v')) {
  // Solo verificar cr√≠ticas
  (async () => {
    try {
      const firestore = await dbConnection.getFirestore();
      const manager = new MigrationManager(firestore || undefined);
      const verified = await manager.verifyCriticalMigrations();
      
      if (verified) {
        logger.info('‚úÖ Todas las migraciones cr√≠ticas verificadas');
        process.exit(0);
      } else {
        logger.error('‚ùå Faltan migraciones cr√≠ticas');
        process.exit(1);
      }
    } catch (error) {
      logger.error('Error verificando migraciones:', error);
      process.exit(1);
    }
  })();
} else if (args.includes('--rollback') || args.includes('-r')) {
  logger.error('‚ùå Rollback no implementado por seguridad');
  logger.error('   Para revertir migraciones, usar herramientas administrativas espec√≠ficas');
  process.exit(1);
} else {
  // Ejecutar migraciones normalmente
  main();
}