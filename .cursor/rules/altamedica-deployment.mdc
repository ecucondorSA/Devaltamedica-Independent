# 🚀 AltaMedica Deployment - Guía de Producción

## 🐳 Docker y Contenedores

### 🏗️ Arquitectura de Contenedores

#### **API Server** (`apps/api-server/`)
- **Base**: Node.js 18 Alpine
- **Puerto**: 3000 (interno), 80 (nginx)
- **Variables**: DATABASE_URL, JWT_SECRET, REDIS_URL
- **Health Check**: `/api/health`

#### **Frontend Apps** (Next.js)
- **Base**: Node.js 18 Alpine
- **Build**: Multi-stage build para optimización
- **Puerto**: 3000 (interno)
- **Static Assets**: Optimizados y comprimidos

#### **Base de Datos**
- **PostgreSQL**: 15 Alpine con extensiones médicas
- **Redis**: 7 Alpine para caché y sesiones
- **Volúmenes**: Persistentes para datos médicos

### 🐳 Docker Compose

#### **Desarrollo Local**
```yaml
# docker-compose.yml
version: '3.8'
services:
  api-server:
    build: ./apps/api-server
    ports: ["3000:3000"]
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://user:pass@db:5432/altamedica_dev
  
  web-app:
    build: ./apps/web-app
    ports: ["3001:3000"]
    depends_on: [api-server]
```

#### **Producción Enterprise**
```yaml
# docker-compose.enterprise.yml
version: '3.8'
services:
  nginx:
    image: nginx:alpine
    ports: ["80:80", "443:443"]
    volumes: ["./nginx/nginx.conf:/etc/nginx/nginx.conf"]
    depends_on: [api-server, web-app]
  
  api-server:
    build: ./apps/api-server
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
    restart: unless-stopped
```

## 🌐 Nginx y Proxy Reverso

### ⚙️ Configuración Nginx

#### **Configuración Principal**
```nginx
# nginx/nginx.conf
events {
    worker_connections 1024;
}

http {
    upstream api_backend {
        server api-server:3000;
    }
    
    upstream web_frontend {
        server web-app:3000;
    }
    
    server {
        listen 80;
        server_name altamedica.com;
        
        # API Routes
        location /api/ {
            proxy_pass http://api_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        # Frontend Routes
        location / {
            proxy_pass http://web_frontend;
            proxy_set_header Host $host;
        }
    }
}
```

#### **SSL y HTTPS**
```nginx
server {
    listen 443 ssl http2;
    server_name altamedica.com;
    
    ssl_certificate /etc/ssl/certs/altamedica.crt;
    ssl_certificate_key /etc/ssl/private/altamedica.key;
    
    # HIPAA Compliance Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options DENY always;
}
```

## 🔐 Variables de Entorno

### 🌍 Configuración por Entorno

#### **Desarrollo** (`.env.development`)
```bash
NODE_ENV=development
DATABASE_URL=postgresql://user:pass@localhost:5432/altamedica_dev
REDIS_URL=redis://localhost:6379
JWT_SECRET=dev-secret-key
FIREBASE_API_KEY=dev-api-key
```

#### **Producción** (`.env.production`)
```bash
NODE_ENV=production
DATABASE_URL=postgresql://user:pass@db:5432/altamedica_prod
REDIS_URL=redis://redis:6379
JWT_SECRET=${JWT_SECRET}
FIREBASE_API_KEY=${FIREBASE_API_KEY}
SENTRY_DSN=${SENTRY_DSN}
```

### 🔒 Seguridad de Variables
- **NUNCA commitear** archivos .env a git
- **Usar secrets** en GitHub Actions
- **Rotar claves** regularmente
- **Encriptar** variables sensibles

## 📊 Monitoreo y Observabilidad

### 📈 Métricas del Sistema
- **Prometheus** para métricas del sistema
- **Grafana** para dashboards y alertas
- **Node Exporter** para métricas del host
- **Custom metrics** para funcionalidades médicas

### 🚨 Alertas y Notificaciones
- **Umbrales críticos** para recursos
- **Notificaciones** por Slack/Email
- **Escalación automática** para incidentes
- **Runbooks** para resolución

### 📝 Logging Centralizado
- **Fluentd** para agregación de logs
- **Elasticsearch** para búsqueda
- **Kibana** para visualización
- **Retención** de logs por compliance HIPAA

## 🚀 Estrategias de Despliegue

### 🔄 Blue-Green Deployment
- **Despliegue paralelo** de versiones
- **Switch instantáneo** entre versiones
- **Rollback rápido** en caso de problemas
- **Zero downtime** para usuarios

### 📦 Canary Releases
- **Despliegue gradual** a usuarios
- **Monitoreo** de métricas en tiempo real
- **Rollback automático** si hay problemas
- **A/B testing** de funcionalidades

### 🔍 Health Checks
- **Liveness probes** para contenedores
- **Readiness probes** para servicios
- **Custom health checks** para APIs
- **Circuit breakers** para dependencias externas
description:
globs:
alwaysApply: false
---
