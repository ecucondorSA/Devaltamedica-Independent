apiVersion: v1
kind: Namespace
metadata:
  name: vault
  labels:
    app.kubernetes.io/name: vault
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault
  namespace: vault
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vault-auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: vault
    namespace: vault
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vault-server-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: vault
    namespace: vault
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-config
  namespace: vault
data:
  vault.json: |
    {
      "listener": {
        "tcp": {
          "address": "0.0.0.0:8200",
          "tls_disable": true
        }
      },
      "storage": {
        "file": {
          "path": "/vault/file"
        }
      },
      "ui": true,
      "disable_mlock": true,
      "api_addr": "http://0.0.0.0:8200",
      "cluster_addr": "https://0.0.0.0:8201"
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vault
  namespace: vault
  labels:
    app: vault
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vault
  template:
    metadata:
      labels:
        app: vault
    spec:
      serviceAccountName: vault
      containers:
        - name: vault
          image: vault:1.15.0
          args:
            - server
            - -config=/vault/config/vault.json
          ports:
            - containerPort: 8200
              name: http
            - containerPort: 8201
              name: https-internal
          env:
            - name: VAULT_CACERT
              value: /vault/userconfig/vault-ha-tls/vault.ca
            - name: VAULT_ADDR
              value: http://127.0.0.1:8200
            - name: VAULT_API_ADDR
              value: http://127.0.0.1:8200
            - name: VAULT_CLUSTER_ADDR
              value: https://127.0.0.1:8201
          volumeMounts:
            - name: vault-config
              mountPath: /vault/config
            - name: vault-file
              mountPath: /vault/file
            - name: vault-userconfig-vault-ha-tls
              mountPath: /vault/userconfig/vault-ha-tls
              readOnly: true
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
          livenessProbe:
            httpGet:
              path: /v1/sys/health
              port: 8200
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /v1/sys/health
              port: 8200
            initialDelaySeconds: 5
            periodSeconds: 5
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
      volumes:
        - name: vault-config
          configMap:
            name: vault-config
        - name: vault-file
          emptyDir: {}
        - name: vault-userconfig-vault-ha-tls
          secret:
            secretName: vault-ha-tls
---
apiVersion: v1
kind: Service
metadata:
  name: vault
  namespace: vault
  labels:
    app: vault
spec:
  selector:
    app: vault
  ports:
    - protocol: TCP
      port: 8200
      targetPort: 8200
      name: http
    - protocol: TCP
      port: 8201
      targetPort: 8201
      name: https-internal
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vault-ingress
  namespace: vault
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
spec:
  tls:
  - hosts:
    - vault.altamedica.com
    secretName: vault-tls
  rules:
  - host: vault.altamedica.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: vault
            port:
              number: 8200
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-init
  namespace: vault
data:
  init.sh: |
    #!/bin/bash
    set -e
    
    echo "Initializing Vault..."
    
    # Wait for Vault to be ready
    until vault status; do
      echo "Waiting for Vault to be ready..."
      sleep 5
    done
    
    # Check if Vault is already initialized
    if vault status | grep -q "Initialized.*true"; then
      echo "Vault is already initialized"
      exit 0
    fi
    
    # Initialize Vault
    echo "Initializing Vault with 5 key shares and 3 key threshold..."
    vault operator init -key-shares=5 -key-threshold=3 -format=json > /tmp/vault-keys.json
    
    # Extract keys and root token
    cat /tmp/vault-keys.json | jq -r '.keys[]' > /tmp/vault-keys.txt
    cat /tmp/vault-keys.json | jq -r '.root_token' > /tmp/vault-root-token.txt
    
    echo "Vault initialized successfully!"
    echo "Root token: $(cat /tmp/vault-root-token.txt)"
    echo "Keys saved to /tmp/vault-keys.txt"
    
    # Create policies
    vault login $(cat /tmp/vault-root-token.txt)
    
    # Policy for AltaMedica applications
    vault policy write altamedica-apps - <<EOF
    path "secret/data/altamedica/*" {
      capabilities = ["read"]
    }
    path "secret/metadata/altamedica/*" {
      capabilities = ["read"]
    }
    EOF
    
    # Policy for AltaMedica DevOps
    vault policy write altamedica-devops - <<EOF
    path "secret/data/altamedica/*" {
      capabilities = ["create", "read", "update", "delete"]
    }
    path "secret/metadata/altamedica/*" {
      capabilities = ["create", "read", "update", "delete"]
    }
    path "auth/kubernetes/*" {
      capabilities = ["create", "read", "update", "delete"]
    }
    EOF
    
    # Enable Kubernetes auth
    vault auth enable kubernetes
    
    # Configure Kubernetes auth
    vault write auth/kubernetes/config \
      kubernetes_host="https://kubernetes.default.svc" \
      kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
      token_reviewer_jwt=@/var/run/secrets/kubernetes.io/serviceaccount/token
    
    # Create Kubernetes auth role for AltaMedica
    vault write auth/kubernetes/role/altamedica-apps \
      bound_service_account_names=altamedica-apps \
      bound_service_account_namespaces=altamedica \
      policies=altamedica-apps \
      ttl=1h
    
    vault write auth/kubernetes/role/altamedica-devops \
      bound_service_account_names=altamedica-devops \
      bound_service_account_namespaces=altamedica \
      policies=altamedica-devops \
      ttl=24h
    
    # Enable KV secrets engine
    vault secrets enable -path=secret kv-v2
    
    # Create initial secrets for AltaMedica
    vault kv put secret/altamedica/database \
      url="postgresql://altamedica:password@postgresql:5432/altamedica" \
      username="altamedica" \
      password="changeme"
    
    vault kv put secret/altamedica/redis \
      url="redis://redis:6379" \
      password="changeme"
    
    vault kv put secret/altamedica/jwt \
      secret="changeme-jwt-secret-key"
    
    vault kv put secret/altamedica/firebase \
      api_key="changeme-firebase-api-key" \
      project_id="altamedic-20f69"
    
    vault kv put secret/altamedica/recaptcha \
      site_key="6LcMF7QrAAAAAOnF1JHDnxzPgGuwE6ZJtjaHSJL-" \
      secret_key="changeme-recaptcha-secret"
    
    vault kv put secret/altamedica/supabase \
      url="https://changeme.supabase.co" \
      anon_key="changeme-supabase-anon-key" \
      service_role_key="changeme-supabase-service-role-key"
    
    echo "Vault setup completed successfully!"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: vault-init
  namespace: vault
spec:
  template:
    spec:
      serviceAccountName: vault
      containers:
        - name: vault-init
          image: vault:1.15.0
          command: ["/bin/bash"]
          args: ["/vault-init/init.sh"]
          env:
            - name: VAULT_ADDR
              value: http://vault:8200
            - name: VAULT_SKIP_VERIFY
              value: "true"
          volumeMounts:
            - name: vault-init
              mountPath: /vault-init
            - name: vault-ca
              mountPath: /var/run/secrets/kubernetes.io/serviceaccount
              readOnly: true
      volumes:
        - name: vault-init
          configMap:
            name: vault-init
        - name: vault-ca
          secret:
            secretName: vault-token-reviewer
      restartPolicy: OnFailure
