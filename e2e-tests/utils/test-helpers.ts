import { Page, Locator } from '@playwright/test';
import { TestUser, formSelectors } from '../fixtures/test-data';

/**
 * Helper para rellenar el formulario de registro
 */
export async function fillRegistrationForm(page: Page, user: TestUser) {
  console.log(`üìù Rellenando formulario para ${user.role}: ${user.email}`);
  
  // Seleccionar el rol primero
  await selectUserRole(page, user.role);
  
  // Rellenar campos b√°sicos
  await page.fill(formSelectors.firstName, user.firstName);
  await page.fill(formSelectors.lastName, user.lastName);
  await page.fill(formSelectors.email, user.email);
  
  // Rellenar contrase√±as - necesitamos ser m√°s espec√≠ficos
  const passwordFields = await page.locator('input[type="password"]').all();
  if (passwordFields.length >= 2) {
    await passwordFields[0].fill(user.password); // Primera contrase√±a
    await passwordFields[1].fill(user.password); // Confirmar contrase√±a
  }
  
  // Aceptar t√©rminos y condiciones
  await page.check(formSelectors.termsCheckbox);
}

/**
 * Helper para seleccionar el rol de usuario
 */
export async function selectUserRole(page: Page, role: string) {
  console.log(`üé≠ Seleccionando rol: ${role}`);
  
  const roleSelector = role === 'patient' ? formSelectors.patientRole 
                    : role === 'doctor' ? formSelectors.doctorRole 
                    : formSelectors.companyRole;
  
  await page.check(roleSelector);
  
  // Verificar que se seleccion√≥ correctamente
  await page.waitForSelector(`${roleSelector}:checked`);
}

/**
 * Helper para enviar el formulario y manejar el estado de carga
 */
export async function submitRegistrationForm(page: Page) {
  console.log('üöÄ Enviando formulario de registro...');
  
  // Hacer clic en el bot√≥n de env√≠o
  await page.click(formSelectors.submitButton);
  
  // Esperar el estado de carga
  try {
    await page.waitForSelector(formSelectors.loadingState, { timeout: 5000 });
    console.log('‚è≥ Estado de carga detectado');
  } catch (error) {
    console.log('‚ÑπÔ∏è No se detect√≥ estado de carga (puede ser normal)');
  }
}

/**
 * Helper para verificar mensaje de √©xito
 */
export async function waitForSuccessMessage(page: Page): Promise<boolean> {
  try {
    await page.waitForSelector(formSelectors.successMessage, { timeout: 10000 });
    console.log('‚úÖ Mensaje de √©xito detectado');
    return true;
  } catch (error) {
    console.log('‚ùå No se detect√≥ mensaje de √©xito');
    
    // Verificar si hay mensaje de error
    const errorElement = await page.locator(formSelectors.errorMessage).first();
    if (await errorElement.isVisible()) {
      const errorText = await errorElement.textContent();
      console.log('üö® Error detectado:', errorText);
    }
    
    return false;
  }
}

/**
 * Helper para esperar redirecci√≥n y verificar URL
 */
export async function waitForRedirect(page: Page, expectedUrl: string, timeout: number = 15000): Promise<boolean> {
  console.log(`üîÑ Esperando redirecci√≥n a: ${expectedUrl}`);
  
  try {
    // Esperar que la URL cambie o contenga la URL esperada
    await page.waitForFunction(
      (url) => window.location.href.includes(url) || window.location.href === url,
      expectedUrl,
      { timeout }
    );
    
    const currentUrl = page.url();
    console.log(`‚úÖ Redirecci√≥n exitosa a: ${currentUrl}`);
    return currentUrl.includes(expectedUrl.replace('http://localhost', ''));
  } catch (error) {
    const currentUrl = page.url();
    console.log(`‚ùå Redirecci√≥n fallida. URL actual: ${currentUrl}, Esperada: ${expectedUrl}`);
    return false;
  }
}

/**
 * Helper para tomar screenshot con timestamp
 */
export async function takeScreenshot(page: Page, name: string) {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const filename = `screenshot-${name}-${timestamp}.png`;
  await page.screenshot({ path: `e2e-results/${filename}` });
  console.log(`üì∏ Screenshot guardado: ${filename}`);
}

/**
 * Helper para limpiar datos de prueba del localStorage
 */
export async function clearTestData(page: Page) {
  await page.evaluate(() => {
    localStorage.clear();
    sessionStorage.clear();
  });
}

/**
 * Helper para verificar elementos de la p√°gina
 */
export async function verifyPageElements(page: Page, expectedElements: string[]) {
  console.log('üîç Verificando elementos de la p√°gina...');
  
  for (const selector of expectedElements) {
    try {
      await page.waitForSelector(selector, { timeout: 5000 });
      console.log(`‚úÖ Elemento encontrado: ${selector}`);
    } catch (error) {
      console.log(`‚ùå Elemento no encontrado: ${selector}`);
      throw new Error(`Elemento requerido no encontrado: ${selector}`);
    }
  }
}

/**
 * Helper para manejar di√°logos de navegador (alerts, confirms, etc.)
 */
export async function setupDialogHandlers(page: Page) {
  page.on('dialog', async dialog => {
    console.log(`üîî Di√°logo detectado: ${dialog.type()} - ${dialog.message()}`);
    await dialog.accept();
  });
}