/**
 * Custom Hook: Job Posting Logic (Integrated)
 * Extracted from HospitalNetworkDashboard.tsx for better separation of concerns
 * Now integrated with UnifiedMarketplaceSystem and UnifiedNotificationSystem
 */

import { useState, useCallback } from 'react';
import type { StaffShortage } from './useRedistributionLogic';

// Unified Systems Integration
import { UnifiedMarketplaceSystem } from '@altamedica/shared/services/marketplace-service';
import { UnifiedNotificationSystem } from '@altamedica/shared/services/notification-service';

export interface JobPosting {
  id: string;
  shortageId: string;
  title: string;
  specialty: string;
  hospitalName: string;
  urgencyLevel: 'critical' | 'urgent' | 'moderate';
  positions: number;
  salaryRange: string;
  benefits: string[];
  requirements: string[];
  status: 'draft' | 'published' | 'applications_open' | 'filled';
  postedAt: Date;
  applicationsCount: number;
}

export const useJobPostingLogic = () => {
  const [jobPostings, setJobPostings] = useState<JobPosting[]>([]);
  
  // Initialize unified systems
  const marketplaceSystem = new UnifiedMarketplaceSystem();
  const notificationSystem = new UnifiedNotificationSystem();

  const triggerAutomaticJobPosting = useCallback(async (
    hospitalId: string, 
    specialty: { name: string; saturation: number }
  ) => {
    const newJobPosting: JobPosting = {
      id: `job-${hospitalId}-${specialty.name}-${Date.now()}`,
      shortageId: `auto-${hospitalId}-${specialty.name}`,
      title: `${specialty.name} - URGENTE`,
      specialty: specialty.name,
      hospitalName: 'Hospital Central', // En producción obtener nombre real
      urgencyLevel: specialty.saturation > 90 ? 'critical' : 'urgent',
      positions: Math.ceil(specialty.saturation / 20),
      salaryRange: '$15,000 - $25,000 MXN',
      benefits: [
        'Seguro de gastos médicos mayores',
        'Fondo de ahorro',
        'Capacitación continua',
        'Horarios flexibles'
      ],
      requirements: [
        'Cédula profesional vigente',
        `Especialidad en ${specialty.name}`,
        'Experiencia mínima 2 años',
        'Disponibilidad inmediata'
      ],
      status: 'published',
      postedAt: new Date(),
      applicationsCount: 0
    };
    
    setJobPostings(prev => [...prev, newJobPosting]);
    
    try {
      // 🔗 INTEGRATED: Post to UnifiedMarketplaceSystem
      await marketplaceSystem.createUrgentJobPosting({
        id: newJobPosting.id,
        title: newJobPosting.title,
        description: `Déficit crítico de ${specialty.name} en ${newJobPosting.hospitalName}`,
        location: hospitalId,
        urgencyLevel: newJobPosting.urgencyLevel,
        positions: newJobPosting.positions,
        requirements: newJobPosting.requirements,
        benefits: newJobPosting.benefits,
        salaryRange: newJobPosting.salaryRange,
        category: 'medical_staff',
        tags: ['urgent', 'healthcare', specialty.name.toLowerCase()],
        autoGenerated: true,
        sourceHospital: hospitalId,
        shortageId: newJobPosting.shortageId
      });

      // 🔔 INTEGRATED: Send notifications via UnifiedNotificationSystem
      await notificationSystem.sendUrgentJobAlert({
        hospitalId,
        jobId: newJobPosting.id,
        specialty: specialty.name,
        urgencyLevel: newJobPosting.urgencyLevel,
        recipients: ['hospital_admins', 'marketplace_professionals'],
        channels: ['push', 'email', 'sms'],
        priority: specialty.saturation > 95 ? 'critical' : 'high'
      });

      console.log(`✅ Job posting ${newJobPosting.id} successfully integrated with marketplace and notifications sent`);
    } catch (error) {
      console.error('❌ Failed to integrate job posting with unified systems:', error);
      // Keep local state but mark as failed integration
      setJobPostings(prev => 
        prev.map(job => 
          job.id === newJobPosting.id 
            ? { ...job, status: 'draft' as const } 
            : job
        )
      );
    }
  }, []);

  const detectStaffShortages = useCallback((
    hospitalMetrics: any,
    currentShortages: StaffShortage[],
    autoJobPostingEnabled: boolean,
    setStaffShortages: (fn: (prev: StaffShortage[]) => StaffShortage[]) => void
  ) => {
    hospitalMetrics.occupancy.specialties?.forEach((specialty: any) => {
      if (specialty.saturation > 80) {
        const existingShortage = currentShortages.find(
          s => s.hospitalId === hospitalMetrics.hospitalId && s.specialty === specialty.name
        );
        
        if (!existingShortage && autoJobPostingEnabled) {
          triggerAutomaticJobPosting(hospitalMetrics.hospitalId, specialty);
          
          // Marcar que se activó job posting automático
          setStaffShortages(prev => 
            prev.map(s => 
              s.hospitalId === hospitalMetrics.hospitalId && s.specialty === specialty.name 
                ? { ...s, autoJobPostingTriggered: true }
                : s
            )
          );
        }
      }
    });
  }, [triggerAutomaticJobPosting]);

  return {
    // State
    jobPostings,
    
    // Setters
    setJobPostings,
    
    // Actions
    triggerAutomaticJobPosting,
    detectStaffShortages,
  };
};