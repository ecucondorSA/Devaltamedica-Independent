// apps/companies/src/services/marketplaceService.ts - INTEGRATED VERSION
import axios from 'axios';

const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001/api';

// Types for integrated job posting
export interface AutoGeneratedJobPosting {
  id: string;
  title: string;
  description: string;
  location: string;
  urgencyLevel: 'critical' | 'urgent' | 'moderate';
  positions: number;
  requirements: string[];
  benefits: string[];
  salaryRange: string;
  category: string;
  tags: string[];
  autoGenerated: boolean;
  sourceHospital: string;
  shortageId: string;
}

export const getListings = async (companyId: string) => {
  // TODO: Implement actual API call with filtering by companyId
  // const response = await axios.get(`${API_URL}/marketplace/listings?companyId=${companyId}`);
  // return response.data;

  // Returning mock data for now
  return [
    { id: '1', title: 'Cardiologist Needed', status: 'open' },
    { id: '2', title: 'Dermatologist for Telemedicine', status: 'closed' },
    { id: '3', title: 'General Practitioner (Part-Time)', status: 'filled' },
  ];
};

export const createListing = async (listingData: any) => {
  const response = await axios.post(`${API_URL}/marketplace/listings`, listingData);
  return response.data;
};

// üîó INTEGRATED: Create urgent job posting from hospital dashboard
export const createUrgentJobPosting = async (jobData: AutoGeneratedJobPosting) => {
  try {
    console.log('üöÄ Creating urgent job posting in marketplace:', jobData);
    
    // Format for marketplace API
    const marketplaceListingData = {
      title: jobData.title,
      description: jobData.description,
      location: jobData.location,
      position_type: 'full-time',
      urgency_level: jobData.urgencyLevel,
      salary_range: jobData.salaryRange,
      requirements: jobData.requirements,
      benefits: jobData.benefits,
      positions_available: jobData.positions,
      category: jobData.category,
      tags: jobData.tags,
      metadata: {
        auto_generated: true,
        source_hospital: jobData.sourceHospital,
        shortage_id: jobData.shortageId,
        created_by_system: 'hospital_dashboard',
        priority: jobData.urgencyLevel === 'critical' ? 'high' : 'medium'
      },
      status: 'active',
      featured: jobData.urgencyLevel === 'critical',
      expires_at: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 days from now
    };

    // API call to create listing
    const response = await axios.post(`${API_URL}/v1/marketplace/listings`, marketplaceListingData, {
      headers: {
        'Content-Type': 'application/json',
        'X-Source': 'hospital-dashboard',
        'X-Auto-Generated': 'true'
      }
    });

    console.log('‚úÖ Urgent job posting created successfully:', response.data.id);
    
    return {
      success: true,
      listingId: response.data.id,
      marketplaceUrl: `${process.env.NEXT_PUBLIC_WEB_URL}/marketplace/listings/${response.data.id}`,
      data: response.data
    };
    
  } catch (error) {
    console.error('‚ùå Failed to create urgent job posting:', error);
    
    // If API fails, store locally for retry
    const localListing = {
      ...jobData,
      created_at: new Date(),
      status: 'pending_sync',
      retry_count: 0
    };
    
    // Store in localStorage for retry mechanism
    const pendingListings = JSON.parse(localStorage.getItem('pending_job_postings') || '[]');
    pendingListings.push(localListing);
    localStorage.setItem('pending_job_postings', JSON.stringify(pendingListings));
    
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
      stored_locally: true,
      localListing
    };
  }
};

// üîÑ INTEGRATED: Sync pending job postings (retry mechanism)
export const syncPendingJobPostings = async () => {
  const pendingListings = JSON.parse(localStorage.getItem('pending_job_postings') || '[]');
  
  if (pendingListings.length === 0) return { synced: 0, failed: 0 };
  
  let synced = 0;
  let failed = 0;
  const stillPending = [];
  
  for (const listing of pendingListings) {
    try {
      const result = await createUrgentJobPosting(listing);
      if (result.success) {
        synced++;
        console.log(`‚úÖ Synced pending job posting: ${listing.id}`);
      } else {
        listing.retry_count = (listing.retry_count || 0) + 1;
        if (listing.retry_count < 3) {
          stillPending.push(listing);
        } else {
          failed++;
          console.warn(`‚ùå Gave up on job posting after 3 retries: ${listing.id}`);
        }
      }
    } catch (error) {
      listing.retry_count = (listing.retry_count || 0) + 1;
      if (listing.retry_count < 3) {
        stillPending.push(listing);
      } else {
        failed++;
      }
    }
  }
  
  // Update localStorage with remaining pending listings
  localStorage.setItem('pending_job_postings', JSON.stringify(stillPending));
  
  return { synced, failed, remaining: stillPending.length };
};

// üîç INTEGRATED: Get job posting applications for dashboard monitoring
export const getJobPostingApplications = async (jobId: string) => {
  try {
    const response = await axios.get(`${API_URL}/v1/marketplace/listings/${jobId}/applications`);
    return {
      success: true,
      applications: response.data,
      count: response.data.length
    };
  } catch (error) {
    console.error('‚ùå Failed to get job applications:', error);
    return {
      success: false,
      applications: [],
      count: 0,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
};
