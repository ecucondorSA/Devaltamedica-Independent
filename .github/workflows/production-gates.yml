name: Production Deployment Gates

on:
  push:
    branches: [ auth-funcional-redireccion-no-funcional-rol-no-funcional-pagina-inicial-sin-videos-3d-maps, production ]
  pull_request:
    branches: [ auth-funcional-redireccion-no-funcional-rol-no-funcional-pagina-inicial-sin-videos-3d-maps, production ]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '9.15.2'

jobs:
  # Job 1: Security & Compliance Checks
  security-checks:
    name: Security & Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Run security audit
        run: pnpm audit --audit-level=moderate
      
      - name: Check for secrets/credentials
        run: |
          # Check for hardcoded secrets
          ! grep -r "FIREBASE_PRIVATE_KEY\|JWT_SECRET\|API_KEY" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" apps packages || exit 1
      
      - name: Validate environment config
        run: |
          # Check that production-security.ts validates properly
          node -e "require('./apps/api-server/dist/config/production-security.js').validateSecurityConfig()"

  # Job 2: Type Safety & Linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Run TypeScript checks
        run: pnpm type-check
      
      - name: Run ESLint
        run: pnpm lint
      
      - name: Check for TODOs in critical files
        run: |
          # Fail if TODOs exist in production-critical files
          ! grep -r "TODO\|FIXME\|HACK" apps/api-server/src/services apps/api-server/src/middleware || exit 1

  # Job 3: Unit & Integration Tests
  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Run unit tests
        run: pnpm test:unit --coverage
      
      - name: Check coverage thresholds
        run: |
          # Ensure minimum coverage (unified with Jest thresholds)
          if [ -f "coverage/coverage-summary.json" ]; then
            echo "📊 Checking Jest coverage thresholds (80%)..."
            node -e "
              const coverage = require('./coverage/coverage-summary.json');
              const thresholds = { branches: 80, functions: 80, lines: 80, statements: 80 };
              let failed = false;
              
              Object.keys(thresholds).forEach(key => {
                const actual = coverage.total[key].pct;
                const expected = thresholds[key];
                if (actual < expected) {
                  console.log(\`❌ \${key}: \${actual}% < \${expected}%\`);
                  failed = true;
                } else {
                  console.log(\`✅ \${key}: \${actual}% >= \${expected}%\`);
                }
              });
              
              if (failed) {
                console.log('❌ Coverage thresholds not met - blocking production');
                process.exit(1);
              }
              console.log('✅ All coverage thresholds met');
            "
          else
            echo "⚠️ Coverage report not found - using nyc fallback"
            npx nyc check-coverage --lines 80 --functions 80 --branches 70
          fi
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Job 4: E2E Tests - Critical Paths
  e2e-critical:
    name: E2E Tests (Critical)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Install Playwright browsers
        run: pnpm --filter @altamedica/e2e-tests exec playwright install --with-deps
      
      - name: Build packages
        run: pnpm build
      
      - name: Start services
        run: |
          pnpm dev:min &
          sleep 30
      
      - name: Run E2E tests - Authentication
        run: pnpm --filter @altamedica/e2e-tests test -- --grep @auth
        continue-on-error: false
      
      - name: Run E2E tests - Medical flows
        run: pnpm --filter @altamedica/e2e-tests test -- --grep @medical
        continue-on-error: false
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-critical-results
          path: packages/e2e-tests/test-results/
          retention-days: 7

  # Job 5: E2E Tests - Telemedicine (REQUIRED)
  e2e-telemedicine:
    name: E2E Tests (Telemedicine) - BLOCKING
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Install Playwright browsers
        run: pnpm --filter @altamedica/e2e-tests exec playwright install --with-deps
      
      - name: Build packages
        run: pnpm build
      
      - name: Start all services
        run: |
          pnpm dev:medical &
          pnpm --filter signaling-server dev &
          sleep 45
      
      - name: Run Telemedicine E2E tests
        run: pnpm --filter @altamedica/e2e-tests test -- --grep @telemedicine
        continue-on-error: false # FAIL FAST - Block deployment
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: telemedicine-test-results
          path: packages/e2e-tests/test-results/
          retention-days: 30

  # Job 6: Accessibility Tests (REQUIRED)
  accessibility:
    name: Accessibility Tests - BLOCKING
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Install Playwright browsers
        run: pnpm --filter @altamedica/e2e-tests exec playwright install --with-deps
      
      - name: Build packages
        run: pnpm build
      
      - name: Start services
        run: |
          pnpm dev:min &
          sleep 30
      
      - name: Run Accessibility tests
        run: pnpm --filter @altamedica/e2e-tests test -- --grep @a11y
        continue-on-error: false # FAIL FAST - Block deployment
      
      - name: Generate Accessibility Report
        if: always()
        run: |
          echo "## Accessibility Report" > a11y-report.md
          echo "Generated: $(date)" >> a11y-report.md
          # Add report generation logic here
      
      - name: Upload A11y report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-report
          path: |
            a11y-report.md
            packages/e2e-tests/test-results/
          retention-days: 30

  # Job 7: Build Docker Images
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [security-checks, code-quality, tests]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build API Server image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/api-server/Dockerfile
          push: false
          tags: altamedica/api-server:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build Web App image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/web-app/Dockerfile
          push: false
          tags: altamedica/web-app:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 8: Final Gate Check
  production-gate:
    name: Production Gate Check
    runs-on: ubuntu-latest
    needs: [
      security-checks,
      code-quality,
      tests,
      e2e-critical,
      e2e-telemedicine,  # REQUIRED
      accessibility,     # REQUIRED
      docker-build
    ]
    if: success() # Only run if ALL previous jobs succeeded
    steps:
      - name: Gate Check Passed
        run: |
          echo "✅ All production gates passed!"
          echo "Ready for deployment to production"
      
      - name: Create deployment artifact
        run: |
          echo "{
            \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"commit\": \"${{ github.sha }}\",
            \"branch\": \"${{ github.ref_name }}\",
            \"gates_passed\": {
              \"security\": true,
              \"code_quality\": true,
              \"unit_tests\": true,
              \"e2e_critical\": true,
              \"e2e_telemedicine\": true,
              \"accessibility\": true,
              \"docker_build\": true
            },
            \"ready_for_production\": true
          }" > deployment-manifest.json
      
      - name: Upload deployment manifest
        uses: actions/upload-artifact@v4
        with:
          name: deployment-manifest
          path: deployment-manifest.json
          retention-days: 90

  # Job 9: Deploy to Production (Manual Approval Required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [production-gate]
    if: github.ref == 'refs/heads/production' && github.event_name == 'push'
    environment:
      name: production
      url: https://altamedica.com
    steps:
      - name: Deploy to Production
        run: |
          echo "🚀 Deploying to production..."
          # Add actual deployment commands here
      
      - name: Notify deployment
        run: |
          echo "Deployment completed at $(date)"
          # Add notification logic (Slack, email, etc.)