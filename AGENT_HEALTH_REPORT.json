{
  "summary": {
    "totals": {
      "TODO": 492,
      "FIXME": 3,
      "HACK": 1,
      "TS_IGNORE": 12,
      "ESLINT_DISABLE": 94,
      "ANY_TYPE": 2262,
      "CONSOLE_LOG": 699,
      "RELATIVE_IMPORT_DEEP": 0
    },
    "filesWithIssues": 754,
    "topFiles": [
      {
        "file": "apps/companies/src/app/marketplace/page.tsx",
        "count": 34
      },
      {
        "file": "apps/doctors/src/components/ui-stub.tsx",
        "count": 28
      },
      {
        "file": "apps/api-server/src/middleware/hipaa-audit.middleware.ts",
        "count": 27
      },
      {
        "file": "integration-health-check.cjs",
        "count": 27
      },
      {
        "file": "apps/doctors/src/components/telemedicine/ProfessionalTelemedicineCall.tsx",
        "count": 25
      },
      {
        "file": "packages/hooks/src/api/useAltamedicaAPI.ts",
        "count": 25
      },
      {
        "file": "apps/api-server/src/app/api/v1/webhooks/stripe/route.ts",
        "count": 24
      },
      {
        "file": "apps/doctors/src/hooks/DEPRECATED_useTelemedicineDoctorHybrid.ts",
        "count": 24
      },
      {
        "file": "monitor-gemini.cjs",
        "count": 24
      },
      {
        "file": "packages/shared/src/services/patient-data-export.service.ts",
        "count": 24
      },
      {
        "file": "packages/alta-agent/src/core/AltaAgentWithAI.ts",
        "count": 23
      },
      {
        "file": "apps/api-server/src/__tests__/notifications.test.ts",
        "count": 22
      },
      {
        "file": "apps/patients/src/components/dashboard/__tests__/TelemedicineDashboard.test.tsx",
        "count": 22
      },
      {
        "file": "apps/api-server/src/__tests__/telemedicine.test.ts",
        "count": 21
      },
      {
        "file": "packages/auth/src/services/AuthService.ts",
        "count": 21
      },
      {
        "file": "apps/doctors/src/components/b2c/MyJobApplications.tsx",
        "count": 20
      },
      {
        "file": "packages/shared/src/services/baa.service.ts",
        "count": 20
      },
      {
        "file": "packages/utils/src/storage.ts",
        "count": 20
      },
      {
        "file": "quick-health-check.cjs",
        "count": 20
      },
      {
        "file": "apps/patients/src/components/notifications/__tests__/NotificationSystem.test.tsx",
        "count": 19
      },
      {
        "file": "apps/web-app/src/hooks/api-hooks.ts",
        "count": 19
      },
      {
        "file": "packages/database/src/services/transaction.service.ts",
        "count": 19
      },
      {
        "file": "apps/doctors/src/components/qos/RealtimeQoSMetrics.tsx",
        "count": 18
      },
      {
        "file": "packages/shared/src/services/patient-export/types/index.ts",
        "count": 18
      },
      {
        "file": "packages/utils/src/TechnicalKnowledgeService.ts",
        "count": 18
      }
    ],
    "duplicates": {
      "geminiClaudeSync": [
        true,
        true
      ]
    }
  },
  "issues": [
    {
      "file": ".vscode/extensions.json",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 27,
          "snippet": "\"gruntfuggly.todo-tree\","
        }
      ]
    },
    {
      "file": ".vscode/settings.json",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 118,
          "snippet": "// üéØ Security settings - habilitado todo"
        }
      ]
    },
    {
      "file": "AGENT_BACKLOG.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 7,
          "snippet": "- Salud del c√≥digo: identificar TODO/FIXME/ts-ignore y patrones de riesgo."
        },
        {
          "pattern": "FIXME",
          "severity": "warn",
          "line": 7,
          "snippet": "- Salud del c√≥digo: identificar TODO/FIXME/ts-ignore y patrones de riesgo."
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 17,
          "snippet": "- Escanear y listar: TODO, FIXME, HACK, ts-ignore, eslint-disable, any, console.log en c√≥digo productivo."
        },
        {
          "pattern": "FIXME",
          "severity": "warn",
          "line": 17,
          "snippet": "- Escanear y listar: TODO, FIXME, HACK, ts-ignore, eslint-disable, any, console.log en c√≥digo productivo."
        },
        {
          "pattern": "HACK",
          "severity": "warn",
          "line": 17,
          "snippet": "- Escanear y listar: TODO, FIXME, HACK, ts-ignore, eslint-disable, any, console.log en c√≥digo productivo."
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 17,
          "snippet": "- Escanear y listar: TODO, FIXME, HACK, ts-ignore, eslint-disable, any, console.log en c√≥digo productivo."
        }
      ]
    },
    {
      "file": "AUDITORIA_CONTEXTO_CLAUDE.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 39,
          "snippet": "- **#3**: Hacer que todo funcione E2E para el usuario final"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 112,
          "snippet": "‚úÖ **Objetivo**: Hacer que todo funcione para el usuario final"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 131,
          "snippet": "- `devaltamedica-validate/` ‚Üí Verificar todo"
        }
      ]
    },
    {
      "file": "AUDITORIA_CRITICA_PROYECTO_ALTAMEDICA.md",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 167,
          "snippet": "const processData = (data: any) => { ... }"
        }
      ]
    },
    {
      "file": "AUDITORIA_SISTEMA_BUILD_ALTAMEDICA.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 555,
          "snippet": "2. **Errores actuales bloquean TODO el progreso**"
        }
      ]
    },
    {
      "file": "CHATGPT5_INTEGRATION_PROMPT.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 46,
          "snippet": "**Asegurar que todo funcione perfectamente juntos y sea production-ready**"
        }
      ]
    },
    {
      "file": "CLAUDE.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 69,
          "snippet": "3. **Web-app**: Solo landing page, falta todo el contenido"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 198,
          "snippet": "console.log(JSON.stringify(status, null, 2));"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 220,
          "snippet": "console.log(`Fixed: ${file}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 246,
          "snippet": "console.log(JSON.stringify(validateBuild(), null, 2));"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 398,
          "snippet": "console.log(JSON.stringify(runCompleteDiagnostics(), null, 2));"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 413,
          "snippet": "console.log(`‚úÖ Killed process on port ${port}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 415,
          "snippet": "console.log(`‚úì Port ${port} is free`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 423,
          "snippet": "console.log('‚úÖ Lockfile synchronized');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 425,
          "snippet": "console.log('‚ùå Lockfile sync failed:', error.message);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 434,
          "snippet": "console.log(`‚úÖ Cleared ${dir}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 441,
          "snippet": "console.log('‚úÖ Git status checked');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 445,
          "snippet": "console.log('üîß Running fixes...\\n');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 447,
          "snippet": "console.log(`Running: ${name}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 523,
          "snippet": "console.log(`Project Integrity: ${integrity.status} (${integrity.overall}%)`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 576,
          "snippet": "console.log('‚ö° Performance Profile:');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 578,
          "snippet": "console.log(`  ${name}: ${data.duration}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 645,
          "snippet": "console.log(`Found ${depAnalysis.duplicates.length} duplicate dependencies`);"
        }
      ]
    },
    {
      "file": "CLAUDE_IMPLEMENTATION_TASKS.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 5,
          "snippet": "**Proyecto**: AltaMedica - Sistema Todo-Write"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 10,
          "snippet": "## üìã **TAREA PRINCIPAL: COMPLETAR SISTEMA TODO-WRITE**"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 32,
          "snippet": "**Archivo**: `apps/admin/src/components/todo-write/TodoWriteSystem.tsx`"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 223,
          "snippet": "**Archivo**: `apps/admin/src/components/todo-write/TodoWriteSystem.tsx`"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 236,
          "snippet": "**Archivo**: `apps/admin/src/components/todo-write/TodoWriteSystem.tsx`"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 359,
          "snippet": "1. **Sistema Todo-Write completamente funcional**"
        }
      ]
    },
    {
      "file": "CLAUDE_STATE_RECOVERY_PROMPT.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 11,
          "snippet": "- **Claude (T√ö)**: Responsable de todo en `packages/*` (26 paquetes compartidos)"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 12,
          "snippet": "- **Gemini**: Responsable de todo en `apps/*` (7 aplicaciones)"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 133,
          "snippet": "node -e \"console.log(Object.keys(require('./dist/index.cjs')).length)\" # Debe mostrar ~101"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 140,
          "snippet": "node -e \"const { Dialog, CardCorporate, AuditLogTable } = require('@altamedica/ui'); console.log('Imports OK')\""
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 251,
          "snippet": "console.log('‚úÖ All packages importable');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 252,
          "snippet": "console.log('UI exports:', Object.keys(ui).length);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 254,
          "snippet": "console.log('‚ùå Import error:', e.message);"
        }
      ]
    },
    {
      "file": "DOCKER_SETUP.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 38,
          "snippet": "make dev     # Inicia todo el entorno de desarrollo"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 161,
          "snippet": "### Limpiar todo y empezar de nuevo"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 164,
          "snippet": "make clean  # ‚ö†Ô∏è Borra TODO"
        }
      ]
    },
    {
      "file": "DOCUMENTACION_ACTUALIZADA_WORKTREES.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 109,
          "snippet": "1. **Documentaci√≥n coherente** en todo el proyecto"
        }
      ]
    },
    {
      "file": "FINAL_EXECUTIVE_REPORT.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 272,
          "snippet": "- Todo c√≥digo IA debe ser verificado por humano senior"
        }
      ]
    },
    {
      "file": "GEMINI-CLAUDE-SYNC.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 16,
          "snippet": "- **Alcance**: Todo el ecosistema AltaMedica analizado"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 55,
          "snippet": "1. **üìä An√°lisis Masivo**: 1M tokens permite procesar todo el monorepo"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 445,
          "snippet": "- **Investigaci√≥n Completa**: Todo el ecosistema AltaMedica analizado"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 607,
          "snippet": "1. **ANALIZAR TODO** (1M tokens): packages/ + apps/"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 614,
          "snippet": "8. **REPORTAR TODO** lo que cambies"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 624,
          "snippet": "- **REPORTAR CAMBIOS** - Lista todo lo que hagas"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 637,
          "snippet": "- **sso-client.ts, SSOLoginRequest, etc.** - Todo SSO eliminado"
        }
      ]
    },
    {
      "file": "GEMINI_STATE_RECOVERY_PROMPT.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 11,
          "snippet": "- **Claude**: Responsable de todo en `packages/*` (26 paquetes compartidos)"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 12,
          "snippet": "- **Gemini (T√ö)**: Responsable de todo en `apps/*` (7 aplicaciones)"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 34,
          "snippet": "- Zero errores de TypeScript en todo el package"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 78,
          "snippet": "node -e \"const ui = require('@altamedica/ui'); console.log('UI exports:', Object.keys(ui).length)\""
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 81,
          "snippet": "node -e \"const { Dialog, CardCorporate, AuditLogTable } = require('@altamedica/ui'); console.log('Critical components available')\""
        }
      ]
    },
    {
      "file": "INFORME_DEPURACION_COMPILACION.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 54,
          "snippet": "3.  Le√≠ el archivo `aliases.ts` y confirm√© que reexportaba todo desde los paquetes del workspace, creando una **dependencia circular** que probablemente era la causa ra√≠z del problema."
        }
      ]
    },
    {
      "file": "INFORME_DEPURACION_COMPILACION_EXTENDIDO.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 43,
          "snippet": "js: `'use client';`, // Esto romp√≠a todo el c√≥digo del servidor"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 57,
          "snippet": "- Los banners de compilaci√≥n afectan a TODO el output"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 118,
          "snippet": "export const useMarketplaceJobs = (params?: any) => {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 345,
          "snippet": "Si todo falla, use este script que garantiza un build:"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 353,
          "snippet": "# Limpiar todo"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 383,
          "snippet": "- Estandarizar versiones de TypeScript en todo el monorepo"
        }
      ]
    },
    {
      "file": "INFORME_FALSAS_COMPLETACIONES_CLAUDE.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 39,
          "snippet": "> _\"When Claude has a long list and runs for more than 30 minutes, it will stop and leave the todo list undone.\"_"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 210,
          "snippet": "\"‚úÖ Todo completado exitosamente!\""
        }
      ]
    },
    {
      "file": "INFORME_TECNICO_ALTAMEDICA_2025.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 129,
          "snippet": "- **Reciente**: Sistema Todo-Write implementado"
        }
      ]
    },
    {
      "file": "INVESTIGACION_CLAUDE_VIBECODING.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 213,
          "snippet": "1. **Code review obligatorio** para todo c√≥digo AI-generado"
        }
      ]
    },
    {
      "file": "OBTENER_CREDENCIALES.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 102,
          "snippet": "Ejecuta este comando para configurar todo autom√°ticamente:"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 154,
          "snippet": "¬°Con esto deber√≠as tener todo listo en menos de 15 minutos! üöÄ"
        }
      ]
    },
    {
      "file": "PLATFORM_AUDIT_AND_ACTION_PLAN.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 18,
          "snippet": "4.  **Inspecci√≥n de Configuraci√≥n:** Se revisaron sistem√°ticamente los archivos de configuraci√≥n clave en todo el monorepo, incluyendo:"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 36,
          "snippet": "- **Investigaci√≥n:** Se observ√≥ que las aplicaciones (`doctors`, `companies`) fallaban porque no encontraban los m√≥dulos de sus dependencias (`types`, `shared`). Esto indicaba que Turbo estaba intentando construir todo en paralelo, sin espe"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 152,
          "snippet": "- **Acci√≥n:** Ejecuta el build para todo el monorepo. Con las correcciones aplicadas, este comando deber√≠a completarse sin errores."
        }
      ]
    },
    {
      "file": "README.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 16,
          "snippet": "- **‚úÖ Sistema Todo-Write**: Implementado y operativo"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 168,
          "snippet": "### üéØ **Sistema Todo-Write - Gesti√≥n de Tareas**"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 189,
          "snippet": "| **Sistema Todo-Write**       | 0% implementado | 100% funcional      | **100%** |"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 380,
          "snippet": "- **Sistema Todo-Write**: Implementado y operativo"
        }
      ]
    },
    {
      "file": "VERCEL_SETUP.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 7,
          "snippet": "- ‚úÖ **UI simple** - todo en un dashboard"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 38,
          "snippet": "7. **Copia TODO** y p√©galo en tu `.env`"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 48,
          "snippet": "7. **Copia TODO** y agr√©galo a tu `.env`"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 139,
          "snippet": "1. **Usar Vercel CLI para todo:**"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 158,
          "snippet": "¬°Con Vercel todo es m√°s f√°cil y GRATIS! üöÄ"
        }
      ]
    },
    {
      "file": "VOTING_SYSTEM_LEADERSHIP.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 302,
          "snippet": "**M√©todo**: Universidad del Creador (respuesta privada)"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 311,
          "snippet": "## üéØ M√âTODO SELECCIONADO:"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 313,
          "snippet": "**M√âTODO DE DESEMPATE CONFIRMADO**: Universidad del Creador"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 321,
          "snippet": "**Estado**: üü¢ M√âTODO DE DESEMPATE CONFIGURADO"
        }
      ]
    },
    {
      "file": "apps/admin/src/app/api/health/route.ts",
      "matches": [
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 2,
          "snippet": "// eslint-disable-next-line import/no-internal-modules"
        }
      ]
    },
    {
      "file": "apps/admin/src/app/login/page.tsx",
      "matches": [
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 6,
          "snippet": "// eslint-disable-next-line import/no-internal-modules"
        }
      ]
    },
    {
      "file": "apps/admin/src/app/monitoring/page.tsx",
      "matches": [
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 3,
          "snippet": "// eslint-disable-next-line import/no-internal-modules"
        }
      ]
    },
    {
      "file": "apps/admin/src/app/page.tsx",
      "matches": [
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 3,
          "snippet": "// eslint-disable-next-line import/no-internal-modules"
        }
      ]
    },
    {
      "file": "apps/admin/src/app/todo-write/page.tsx",
      "matches": [
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 1,
          "snippet": "// eslint-disable-next-line import/no-internal-modules"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 2,
          "snippet": "import { TodoWriteSystem } from '../../components/todo-write/TodoWriteSystem';"
        }
      ]
    },
    {
      "file": "apps/admin/src/app/users/page.tsx",
      "matches": [
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 13,
          "snippet": "// eslint-disable-next-line import/no-internal-modules"
        }
      ]
    },
    {
      "file": "apps/admin/src/components/dashboard/Analytics.tsx",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 142,
          "snippet": "console.log(`Exporting analytics as ${exportFormat}...`);"
        }
      ]
    },
    {
      "file": "apps/admin/src/components/dashboard/AuditLogs.tsx",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 108,
          "snippet": "console.error('Error loading audit logs:', error);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 213,
          "snippet": "console.error('Error exportando logs:', error);"
        }
      ]
    },
    {
      "file": "apps/admin/src/components/dashboard/SystemSettings.tsx",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 116,
          "snippet": "console.error('Error loading system settings:', error);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 126,
          "snippet": "const handleSettingChange = (section: keyof SystemSettingsType, field: string, value: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 132,
          "snippet": "...(settings[section] as any),"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 151,
          "snippet": "console.log('Settings saved:', settings);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 153,
          "snippet": "console.error('Error saving settings:', error);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 175,
          "snippet": "console.error('Error resetting to defaults:', error);"
        }
      ]
    },
    {
      "file": "apps/admin/src/components/todo-write/TodoWriteSystem.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 2,
          "snippet": "* TODO-WRITE SYSTEM - ALTAMEDICA"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 201,
          "snippet": "<h1 className=\"text-3xl font-bold text-gray-900 mb-2\">üéØ TODO-WRITE SYSTEM</h1>"
        }
      ]
    },
    {
      "file": "apps/admin/src/hooks/useEnhancedAdminDashboard.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 96,
          "snippet": "recentActivities: [], // TODO: Implement"
        }
      ]
    },
    {
      "file": "apps/api-server/AUDIT_REPORT_2025.md",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 136,
          "snippet": "export const errorHandler = (err: any, req: Request, res: Response, next: NextFunction) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 137,
          "snippet": "const requestId = (req as any).requestId || crypto.randomUUID();"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 140,
          "snippet": "console.error(`[ERROR] ${requestId}`, {"
        }
      ]
    },
    {
      "file": "apps/api-server/CLAUDE.md",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 27,
          "snippet": "console.error(err.stack);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 220,
          "snippet": "console.error(`Attempt ${i + 1} failed:`, error.message);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 250,
          "snippet": "console.log(`Processed ${Math.min(i + batchSize, items.length)}/${items.length} items`);"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 450,
          "snippet": "| Endpoint                   | M√©todo | Descripci√≥n            | Auth | Service                    |"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 495,
          "snippet": "| Endpoint         | M√©todo | Descripci√≥n                  | Auth            | Service              |"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 505,
          "snippet": "| Endpoint                | M√©todo | Descripci√≥n          | Auth      | Service                     |"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 514,
          "snippet": "| Endpoint                | M√©todo | Descripci√≥n      | Auth      | Service                   |"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 522,
          "snippet": "| Endpoint                    | M√©todo | Descripci√≥n    | Auth | Service                  |"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 530,
          "snippet": "| Endpoint                           | M√©todo | Descripci√≥n      | Auth | Service                           |"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 539,
          "snippet": "| Endpoint               | M√©todo | Descripci√≥n       | Auth | Service      |"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 548,
          "snippet": "| Endpoint                | M√©todo   | Descripci√≥n          | Auth       | Service                     |"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 556,
          "snippet": "| Endpoint                             | M√©todo | Descripci√≥n   | Auth       | Service             |"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 848,
          "snippet": "export function encryptPHI(data: any): EncryptedData {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 1040,
          "snippet": "Esta documentaci√≥n exhaustiva proporciona todo lo necesario para trabajar con el API Server de AltaMedica, el coraz√≥n empresarial de la plataforma de telemedicina."
        }
      ]
    },
    {
      "file": "apps/api-server/sentry.client.config.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 47,
          "snippet": "function sanitizeMedicalData(data: any): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 57,
          "snippet": "const sanitized: any = {};"
        }
      ]
    },
    {
      "file": "apps/api-server/sentry.server.config.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 57,
          "snippet": "function sanitizeMedicalData(data: any): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 68,
          "snippet": "const sanitized: any = {};"
        }
      ]
    },
    {
      "file": "apps/api-server/src/__tests__/audit-prescription.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 34,
          "snippet": "let consoleSpy: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 35,
          "snippet": "let auditRepo: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 52,
          "snippet": "Object.values(consoleSpy).forEach((spy: any) => spy.mockRestore());"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 206,
          "snippet": "(UnifiedAuth as any).mockResolvedValueOnce({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 310,
          "snippet": "(global as any).auditEvent = auditEventSpy;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 347,
          "snippet": "(global as any).auditEvent = originalAuditEvent;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 376,
          "snippet": "(global as any).auditEvent = auditSpy;"
        }
      ]
    },
    {
      "file": "apps/api-server/src/__tests__/auth.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 56,
          "snippet": "const decoded = jwt.decode(token) as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 204,
          "snippet": "const token = generateAuthToken(sensitiveUser as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 205,
          "snippet": "const decoded = jwt.decode(token) as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 213,
          "snippet": "const decoded = jwt.decode(token) as any;"
        }
      ]
    },
    {
      "file": "apps/api-server/src/__tests__/doctors.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 123,
          "snippet": "} as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 166,
          "snippet": "} as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 206,
          "snippet": "} as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 246,
          "snippet": "} as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 286,
          "snippet": "} as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 323,
          "snippet": "} as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 370,
          "snippet": "} as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 431,
          "snippet": "} as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 469,
          "snippet": "} as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 514,
          "snippet": "} as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 580,
          "snippet": "} as any);"
        }
      ]
    },
    {
      "file": "apps/api-server/src/__tests__/notifications.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 55,
          "snippet": "let testDb: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 99,
          "snippet": "(NotificationService.getNotifications as any).mockResolvedValue(mockNotifications);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 129,
          "snippet": "(NotificationService.getNotifications as any).mockResolvedValue(mockNotifications);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 159,
          "snippet": "(NotificationService.getNotifications as any).mockResolvedValue(mockNotifications);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 177,
          "snippet": "(NotificationService.getNotifications as any).mockResolvedValue([]);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 210,
          "snippet": "(NotificationService.sendNotification as any).mockResolvedValue(mockNotification);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 305,
          "snippet": "(NotificationService.markAsRead as any).mockResolvedValue(mockNotification);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 324,
          "snippet": "(NotificationService.markAsRead as any).mockResolvedValue(null);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 348,
          "snippet": "(NotificationService.markAsArchived as any).mockResolvedValue(mockNotification);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 369,
          "snippet": "(NotificationService.deleteNotification as any).mockResolvedValue(true);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 387,
          "snippet": "(NotificationService.deleteNotification as any).mockResolvedValue(false);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 405,
          "snippet": "(NotificationService.markAllAsRead as any).mockResolvedValue(5);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 426,
          "snippet": "(NotificationService.deleteAllArchived as any).mockResolvedValue(10);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 467,
          "snippet": "(NotificationService.getSettings as any).mockResolvedValue(mockSettings);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 507,
          "snippet": "(NotificationService.updateSettings as any).mockResolvedValue(updatedSettings);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 562,
          "snippet": "(NotificationService.sendNotification as any).mockResolvedValue(mockTestNotification);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 609,
          "snippet": "(EmailService.sendEmail as any).mockResolvedValue({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 642,
          "snippet": "(SMSService.sendSMS as any).mockResolvedValue({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 673,
          "snippet": "(PushService.sendPushNotification as any).mockResolvedValue({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 707,
          "snippet": "(NotificationService.getNotifications as any).mockRejectedValue(new Error('Database error'));"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 740,
          "snippet": "(NotificationService.getNotifications as any).mockResolvedValue([]);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 759,
          "snippet": "(NotificationService.sendNotification as any).mockResolvedValue({"
        }
      ]
    },
    {
      "file": "apps/api-server/src/__tests__/patients.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 106,
          "snippet": "} as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 148,
          "snippet": "} as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 187,
          "snippet": "} as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 226,
          "snippet": "} as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 263,
          "snippet": "} as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 310,
          "snippet": "} as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 370,
          "snippet": "} as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 408,
          "snippet": "} as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 453,
          "snippet": "} as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 519,
          "snippet": "} as any);"
        }
      ]
    },
    {
      "file": "apps/api-server/src/__tests__/server.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 6,
          "snippet": "let server: any;"
        }
      ]
    },
    {
      "file": "apps/api-server/src/__tests__/setup.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 19,
          "snippet": "console.log('üß™ Setting up test environment...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 24,
          "snippet": "console.log('üßπ Cleaning up after test...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 29,
          "snippet": "console.log('üèÅ Test environment cleanup completed');"
        }
      ]
    },
    {
      "file": "apps/api-server/src/__tests__/telemedicine.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 47,
          "snippet": "let testDb: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 84,
          "snippet": "(TelemedicineService.getStats as any).mockResolvedValue(mockStats);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 102,
          "snippet": "(TelemedicineService.getStats as any).mockRejectedValue(new Error('Service error'));"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 118,
          "snippet": "(authenticateToken as any).mockImplementation((req, res) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 160,
          "snippet": "(TelemedicineService.getActiveSessions as any).mockResolvedValue(mockSessions);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 178,
          "snippet": "(TelemedicineService.getActiveSessions as any).mockResolvedValue([]);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 223,
          "snippet": "(TelemedicineService.getSessionDetails as any).mockResolvedValue(mockSession);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 241,
          "snippet": "(TelemedicineService.getSessionDetails as any).mockResolvedValue(null);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 266,
          "snippet": "(TelemedicineService.endSession as any).mockResolvedValue(mockEndedSession);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 285,
          "snippet": "(TelemedicineService.endSession as any).mockRejectedValue(new Error('Session already ended'));"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 315,
          "snippet": "(TelemedicineService.getConnectionQuality as any).mockResolvedValue(mockQuality);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 345,
          "snippet": "(TelemedicineService.sendChatMessage as any).mockResolvedValue(mockMessage);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 421,
          "snippet": "(TelemedicineService.shareVitals as any).mockResolvedValue(mockVitals);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 502,
          "snippet": "(TelemedicineService.getChatMessages as any).mockResolvedValue(mockMessages);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 549,
          "snippet": "(TelemedicineService.getVitalsHistory as any).mockResolvedValue(mockVitals);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 577,
          "snippet": "(TelemedicineService.startRecording as any).mockResolvedValue(mockRecording);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 605,
          "snippet": "(TelemedicineService.stopRecording as any).mockResolvedValue(mockRecording);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 626,
          "snippet": "(TelemedicineService.getStats as any).mockRejectedValue(new Error('Database connection failed'));"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 656,
          "snippet": "(authenticateToken as any).mockImplementation((req, res) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 674,
          "snippet": "(TelemedicineService.getSessionDetails as any).mockResolvedValue({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 697,
          "snippet": "(TelemedicineService.endSession as any).mockResolvedValue({"
        }
      ]
    },
    {
      "file": "apps/api-server/src/__tests__/test-utils.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 3,
          "snippet": "export const mockRequest = (options: any = {}) => ({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 11,
          "snippet": "const res: any = {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/app/api/v1/anamnesis/save/route.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 230,
          "snippet": "async function processWithAIAgents(anamnesisId: string, summary: any) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/app/api/v1/audit/verify-integrity/route.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 36,
          "snippet": "const filter: any = {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/app/api/v1/audit-logs/route.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 56,
          "snippet": "const filters: any = {};"
        }
      ]
    },
    {
      "file": "apps/api-server/src/app/api/v1/auth/mfa/verify/route.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 213,
          "snippet": "} catch (error: any) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/app/api/v1/baa/[baaId]/compliance/route.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 221,
          "snippet": "} catch (error: any) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/app/api/v1/baa/[baaId]/route.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 151,
          "snippet": "} catch (error: any) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/app/api/v1/baa/[baaId]/sign/route.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 185,
          "snippet": "} catch (error: any) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/app/api/v1/baa/onboarding/route.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 80,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 175,
          "snippet": "} catch (error: any) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/app/api/v1/lab-results/route.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 256,
          "snippet": "async function getLastDocument(query: any, offset: number) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/app/api/v1/medications/route.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 39,
          "snippet": "} catch (error: any) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/app/api/v1/patients/[id]/lab-results/route.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 152,
          "snippet": "async function getLabResultsStats(patientId: string, user: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 239,
          "snippet": "async function getLastDocument(query: any, offset: number) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/app/api/v1/patients/[id]/medical-records/route.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 126,
          "snippet": "async function getRecordsByType(patientId: string, user: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 150,
          "snippet": "async function getLastConsultation(patientId: string, user: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 180,
          "snippet": "async function getActivePrescriptions(patientId: string, user: any) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/app/api/v1/patients/export/route.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 106,
          "snippet": "// TODO: Implementar verificaci√≥n de relaci√≥n doctor-paciente"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 287,
          "snippet": "// TODO: Implementar notificaci√≥n por email/push"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 316,
          "snippet": "// TODO: Implementar guardado real en almacenamiento"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 333,
          "snippet": "// TODO: Implementar firma de URL con JWT o servicio de almacenamiento"
        }
      ]
    },
    {
      "file": "apps/api-server/src/app/api/v1/predictions/route.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 153,
          "snippet": "async function logAuditEvent(event: any) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/app/api/v1/prescriptions/route.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 52,
          "snippet": "status: searchParams.get('status') as any || undefined,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 268,
          "snippet": "} catch (error: any) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/app/api/v1/telemedicine/emergency/route.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 74,
          "snippet": "// TODO: Send emergency notifications to available doctors"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 75,
          "snippet": "// TODO: Integrate with emergency services if critical"
        }
      ]
    },
    {
      "file": "apps/api-server/src/app/api/v1/telemedicine/qos/sessions/[id]/route.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 75,
          "snippet": "function getQoSRecommendations(score: number, metrics: any) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/app/api/v1/webhooks/stripe/route.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 109,
          "snippet": "async function handlePaymentSuccess(data: any) {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 112,
          "snippet": "// TODO: Update order/invoice status"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 113,
          "snippet": "// TODO: Send confirmation email"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 114,
          "snippet": "// TODO: Update subscription status if applicable"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 120,
          "snippet": "async function handlePaymentFailure(data: any) {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 123,
          "snippet": "// TODO: Notify customer"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 124,
          "snippet": "// TODO: Update order status"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 125,
          "snippet": "// TODO: Trigger retry logic if applicable"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 131,
          "snippet": "async function handleSubscriptionUpdate(data: any) {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 134,
          "snippet": "// TODO: Update local subscription record"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 135,
          "snippet": "// TODO: Update customer access/features"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 136,
          "snippet": "// TODO: Send notification email"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 142,
          "snippet": "async function handleSubscriptionCancellation(data: any) {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 145,
          "snippet": "// TODO: Update local subscription record"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 146,
          "snippet": "// TODO: Schedule access removal"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 147,
          "snippet": "// TODO: Send cancellation confirmation"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 153,
          "snippet": "async function handleInvoicePaid(data: any) {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 156,
          "snippet": "// TODO: Update invoice status in database"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 157,
          "snippet": "// TODO: Send receipt email"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 158,
          "snippet": "// TODO: Update accounting records"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 164,
          "snippet": "async function handleInvoicePaymentFailed(data: any) {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 167,
          "snippet": "// TODO: Send payment failure notification"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 168,
          "snippet": "// TODO: Update subscription status if applicable"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 169,
          "snippet": "// TODO: Trigger dunning process"
        }
      ]
    },
    {
      "file": "apps/api-server/src/auth/UnifiedAuthSystem.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 419,
          "snippet": "return async (request: NextRequest, ...args: any[]) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 433,
          "snippet": "return async (request: NextRequest, ...args: any[]) => {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/components/dashboard/HealthStatus.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 144,
          "snippet": "data.issues.forEach((issue: any, index: number) => {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/components/dashboard/RealTimeLogs.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 332,
          "snippet": "<option value=\"all\">Todo el tiempo</option>"
        }
      ]
    },
    {
      "file": "apps/api-server/src/components/dashboard/SystemMetrics.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 68,
          "snippet": "memoryUsage: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 69,
          "snippet": "cpuUsage: any;"
        }
      ]
    },
    {
      "file": "apps/api-server/src/config/cors.config.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 49,
          "snippet": "export function applyCorsHeaders(req: any, res: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 83,
          "snippet": "export function corsMiddleware(req: any, res: any, next: any) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/config/production-security.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 129,
          "snippet": "(merged as any).REFRESH_TOKEN_EXPIRES_IN"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 131,
          "snippet": "merged.JWT_REFRESH_EXPIRES_IN = (merged as any).REFRESH_TOKEN_EXPIRES_IN as string;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 135,
          "snippet": "(merged as any).ENABLE_AUDIT_LOGGING"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 137,
          "snippet": "merged.AUDIT_LOGGING_ENABLED = (merged as any).ENABLE_AUDIT_LOGGING as string;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 141,
          "snippet": "(merged as any).ENCRYPTION_KEY"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 143,
          "snippet": "merged.ENCRYPTION_SECRET = (merged as any).ENCRYPTION_KEY as string;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 172,
          "snippet": "const current = (merged as any)[key];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 174,
          "snippet": "(merged as any)[key] = value;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 185,
          "snippet": "(k) => !(process.env as any)[k] || (process.env as any)[k] === '',"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 197,
          "snippet": "const zodErr = error as any;"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 218,
          "snippet": "\"'unsafe-inline'\", // TODO: Remove in production, use nonce instead"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 224,
          "snippet": "\"'unsafe-inline'\", // TODO: Replace with nonce for production"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 328,
          "snippet": "keyGenerator: (req: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 333,
          "snippet": "handler: (req: any, res: any) => {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/config/secrets-loader.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 12,
          "snippet": "console.log('[secrets-loader] üìÅ Usando secrets locales para desarrollo');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 35,
          "snippet": "console.log('[secrets-loader] ‚úÖ Secrets locales cargados desde archivo');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 39,
          "snippet": "console.log('[secrets-loader] ‚ö†Ô∏è No se pudo cargar archivo local-secrets.json');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 44,
          "snippet": "console.log('[secrets-loader] ‚úÖ Usando secrets desde .env');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 47,
          "snippet": "console.error("
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 59,
          "snippet": "console.log('[secrets-loader] ‚òÅÔ∏è Intentando cargar desde AWS Secrets Manager...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 82,
          "snippet": "console.log('[secrets-loader] ‚úÖ Secrets cargados desde AWS');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 84,
          "snippet": "console.warn("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 86,
          "snippet": "(error as any)?.message,"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 88,
          "snippet": "console.log('[secrets-loader] üìÅ Usando variables de entorno locales como fallback');"
        }
      ]
    },
    {
      "file": "apps/api-server/src/config/swagger.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 42,
          "snippet": "console.log('üìÑ Swagger docs available at /api-docs');"
        }
      ]
    },
    {
      "file": "apps/api-server/src/config/vercel-secrets-loader.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 11,
          "snippet": "console.log('[secrets-loader] üöÄ Inicializando secrets...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 20,
          "snippet": "console.log('[secrets-loader] üì° Conectando a Vercel KV...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 32,
          "snippet": "console.log('[secrets-loader] ‚úÖ Secrets cargados desde Vercel KV');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 43,
          "snippet": "console.log("
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 50,
          "snippet": "console.log('[secrets-loader] ‚ö†Ô∏è Vercel KV no disponible, usando secrets locales');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 53,
          "snippet": "console.log('[secrets-loader] üìÅ Usando secrets locales desde .env');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 58,
          "snippet": "console.warn('[secrets-loader] ‚ö†Ô∏è ADVERTENCIA: JWT secrets no encontrados');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 59,
          "snippet": "console.log('[secrets-loader] üí° Ejecuta: node scripts/setup-local-secrets.js');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 61,
          "snippet": "console.log('[secrets-loader] ‚úÖ Secrets inicializados correctamente');"
        }
      ]
    },
    {
      "file": "apps/api-server/src/controllers/marketplace-controller.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 16,
          "snippet": "export const createCompany = async (req: any, res: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 28,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 37,
          "snippet": "export const updateCompany = async (req: any, res: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 47,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 57,
          "snippet": "export const createListing = async (req: any, res: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 69,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 78,
          "snippet": "export const getListings = async (req: any, res: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 97,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 106,
          "snippet": "export const updateListing = async (req: any, res: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 116,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 126,
          "snippet": "export const applyToListing = async (req: any, res: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 140,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 149,
          "snippet": "export const getApplications = async (req: any, res: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 166,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 175,
          "snippet": "export const updateApplication = async (req: any, res: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 189,
          "snippet": "} catch (error: any) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/domains/marketplace/marketplace.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 24,
          "snippet": "static async getCompanies(filters: any = {}): Promise<Company[]> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 46,
          "snippet": "static async getJobListings(filters: any = {}): Promise<JobListing[]> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 71,
          "snippet": "static async getJobApplicationsByListing(listingId: string, filters: any = {}): Promise<JobApplication[]> {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/domains/patients/patient.controller.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 21,
          "snippet": "sortBy: (searchParams.get('sortBy') as any) || 'createdAt',"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 22,
          "snippet": "sortOrder: (searchParams.get('sortOrder') as any) || 'desc'"
        }
      ]
    },
    {
      "file": "apps/api-server/src/domains/patients/patient.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 89,
          "snippet": "static async createPatient(data: any, context?: ServiceContext): Promise<Patient> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 118,
          "snippet": "static async updatePatient(patientId: string, data: any, context?: ServiceContext): Promise<Patient> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 220,
          "snippet": "private static mapDocToPatient(doc: any): Patient {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/domains/telemedicine/telemedicine.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 51,
          "snippet": "socket.on('offer', (roomId: string, offer: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 55,
          "snippet": "socket.on('answer', (roomId: string, answer: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 59,
          "snippet": "socket.on('ice-candidate', (roomId: string, candidate: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 221,
          "snippet": "const updateData: any = {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 276,
          "snippet": "const updateData: any = {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 460,
          "snippet": "private static convertFirestoreToSession(data: any): TelemedicineSession {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 481,
          "snippet": "private static calculateAverageDuration(sessions: any[]): number {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/infrastructure/database/firestore.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 31,
          "snippet": "value: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 45,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 170,
          "snippet": "constraints.push(where(whereClause.field, whereClause.operator as any, whereClause.value));"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 216,
          "snippet": "constraints.push(where(whereClause.field, whereClause.operator as any, whereClause.value));"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 321,
          "snippet": "private static convertTimestamps(data: any): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 341,
          "snippet": "static prepareForUpdate(data: any): any {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/lib/audit-logger.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 102,
          "snippet": "// TODO: Implement encryption for PHI-related logs"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 124,
          "snippet": "user: any,"
        }
      ]
    },
    {
      "file": "apps/api-server/src/lib/audit.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 14,
          "snippet": "details: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 100,
          "snippet": "details: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 181,
          "snippet": "export async function auditAuthentication(action: string, userId: string, success: boolean, details: any, ipAddress?: string, userAgent?: string): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 197,
          "snippet": "export async function auditMedicalDataAccess(action: string, userId: string, patientId: string, details: any, ipAddress?: string): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 212,
          "snippet": "export async function auditMedicalDataModification(action: string, userId: string, patientId: string, changes: any, ipAddress?: string): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 227,
          "snippet": "export async function auditCompliance(action: string, userId: string, complianceType: string, details: any): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 353,
          "snippet": "async function encryptSensitiveData(data: any): Promise<any> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 424,
          "snippet": "async function emergencyAuditLog(entry: any, error: Error): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 433,
          "snippet": "async function getMockAuditLogs(filters: any): Promise<{ logs: AuditLogEntry[]; total: number }> {"
        },
        {
          "pattern": "TS_IGNORE",
          "severity": "warn",
          "line": 478,
          "snippet": "// @ts-ignore"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 479,
          "snippet": "return (log[key] as any) || '';"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 492,
          "snippet": "async function saveReport(reportId: string, report: any, format: string): Promise<string> {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/lib/auth-helpers.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 64,
          "snippet": "handler: (request: NextRequest, user: AuthenticatedUser, ...args: any[]) => Promise<NextResponse>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 66,
          "snippet": "return async (request: NextRequest, ...args: any[]): Promise<NextResponse> => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 86,
          "snippet": "handler: (request: NextRequest, user: AuthenticatedUser, ...args: any[]) => Promise<NextResponse>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 88,
          "snippet": "return withAuth(async (request: NextRequest, user: AuthenticatedUser, ...args: any[]): Promise<NextResponse> => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 104,
          "snippet": "handler: (request: NextRequest, user: AuthenticatedUser, ...args: any[]) => Promise<NextResponse>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 113,
          "snippet": "handler: (request: NextRequest, user: AuthenticatedUser, ...args: any[]) => Promise<NextResponse>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 122,
          "snippet": "handler: (request: NextRequest, user: AuthenticatedUser, ...args: any[]) => Promise<NextResponse>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 131,
          "snippet": "handler: (request: NextRequest, user: AuthenticatedUser, ...args: any[]) => Promise<NextResponse>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 151,
          "snippet": "handler: (request: NextRequest, user: AuthenticatedUser, ...args: any[]) => Promise<NextResponse>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 153,
          "snippet": "return withAuth(async (request: NextRequest, user: AuthenticatedUser, context: any, ...args: any[]): Promise<NextResponse> => {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/lib/database-compat.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 6,
          "snippet": "* Este archivo proporcionaa un wrapper temporal mientras se migra todo el c√≥digo"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 42,
          "snippet": "async create(patientData: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 57,
          "snippet": "async update(id: string, updateData: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 67,
          "snippet": "async search(filters: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 86,
          "snippet": "async create(doctorData: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 102,
          "snippet": "async update(id: string, updateData: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 112,
          "snippet": "async create(appointmentData: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 122,
          "snippet": "async findByPatient(patientId: string, filters?: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 128,
          "snippet": "async findByDoctor(doctorId: string, filters?: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 134,
          "snippet": "async update(id: string, updateData: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 144,
          "snippet": "async create(recordData: any) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/lib/drug-analysis.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 10,
          "snippet": "medications: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 11,
          "snippet": "interactions: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 18,
          "snippet": "export function analyzeDrugInteractions(data: any): DrugInteractionResult {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 26,
          "snippet": "const interactions: any[] = [];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 95,
          "snippet": "(inter: any) => inter.drug.toLowerCase() === med2"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 103,
          "snippet": "(inter: any) => inter.drug.toLowerCase() === med1"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 111,
          "snippet": "function generateRecommendations(interactions: any[], contraindications: string[], patientInfo: any): string[] {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 118,
          "snippet": "interactions.forEach((interaction: any) => {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/lib/email.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 15,
          "snippet": "// M√©todo para enviar correo electr√≥nico"
        }
      ]
    },
    {
      "file": "apps/api-server/src/lib/encryption.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 146,
          "snippet": "export function encryptPatientData(patientData: any): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 187,
          "snippet": "export function decryptPatientData(encryptedPatientData: any): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 233,
          "snippet": "export function encryptMedicalRecord(recordData: any): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 268,
          "snippet": "export function decryptMedicalRecord(encryptedRecordData: any): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 349,
          "snippet": "export function isPHIData(fieldName: string, value: any): boolean {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/lib/logger.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 14,
          "snippet": "export function logMedicalAction(action: string, userId: string, details?: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 25,
          "snippet": "info: (message: string, meta?: any) => logger.info(`[MEDICAL INFO] ${message}`, meta),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 26,
          "snippet": "error: (message: string, meta?: any) => logger.error(`[MEDICAL ERROR] ${message}`, meta),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 27,
          "snippet": "warn: (message: string, meta?: any) => logger.warn(`[MEDICAL WARN] ${message}`, meta),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 31,
          "snippet": "info: (message: string, meta?: any) => logger.info(`[INFO] ${message}`, meta),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 32,
          "snippet": "error: (message: string, meta?: any) => logger.error(`[ERROR] ${message}`, meta),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 33,
          "snippet": "warn: (message: string, meta?: any) => logger.warn(`[WARN] ${message}`, meta),"
        }
      ]
    },
    {
      "file": "apps/api-server/src/lib/mediasoup-server.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 20,
          "snippet": "async function query(sql: string, params: any[] = []): Promise<any> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 42,
          "snippet": "async function transaction(callback: (client: any) => Promise<any>): Promise<any> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 78,
          "snippet": "deviceInfo?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 678,
          "snippet": "private async logSessionEvent(action: string, userId: string, patientId: string, details: any) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/lib/medical-data-integration.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 145,
          "snippet": "static convertPatientToFHIR(altamedicaPatient: any): z.infer<typeof FHIRPatientSchema> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 190,
          "snippet": "static convertObservationToFHIR(observation: any): z.infer<typeof FHIRObservationSchema> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 508,
          "snippet": "private static convertToFHIRResource(record: any, reportType: string): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 543,
          "snippet": "handler: (request: NextRequest, user: any, patientId: string) => Promise<NextResponse>"
        },
        {
          "pattern": "TS_IGNORE",
          "severity": "warn",
          "line": 591,
          "snippet": "// @ts-ignore: NextRequest no tiene ip, usar cabeceras"
        }
      ]
    },
    {
      "file": "apps/api-server/src/lib/memory-db.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 82,
          "snippet": "query: async (sql: string, params: any[] = []): Promise<{ rows: any[] }> => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 177,
          "snippet": "transaction: async (callback: (client: any) => Promise<any>): Promise<any> => {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/lib/mercadopago.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 29,
          "snippet": "export const createPaymentPreference = async (preferenceData: any) => {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/lib/middleware/UnifiedAuth.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 146,
          "snippet": "(request as any).serviceContext = {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 412,
          "snippet": "return async (request: NextRequest, context?: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 422,
          "snippet": "return async (request: NextRequest, context?: any) => {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/lib/middleware.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 11,
          "snippet": "handler: (req: NextRequest, authUser?: any) => Promise<NextResponse>,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 22,
          "snippet": "let authUser: any = null;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 228,
          "snippet": "handler: (req: NextRequest, authUser?: any) => Promise<NextResponse>,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 247,
          "snippet": "handler: (req: NextRequest, authUser?: any) => Promise<NextResponse>,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 266,
          "snippet": "handler: (req: NextRequest, authUser?: any) => Promise<NextResponse>,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 283,
          "snippet": "handler: (req: NextRequest, authUser?: any) => Promise<NextResponse>,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 300,
          "snippet": "handler: (req: NextRequest, authUser?: any) => Promise<NextResponse>,"
        }
      ]
    },
    {
      "file": "apps/api-server/src/lib/mock-medical.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 8,
          "snippet": "set: async (key: string, value: any) => true,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 26,
          "snippet": "audit(action: string, userId: string, data?: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 32,
          "snippet": "constructor(prisma: any) {}"
        }
      ]
    },
    {
      "file": "apps/api-server/src/lib/monitoring.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 10,
          "snippet": "details?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 549,
          "snippet": "async function sendAlert(channel: string, alert: any): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 576,
          "snippet": "return (req: any, res: any, next: any) => {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/lib/patterns/ServicePattern.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 59,
          "snippet": "protected validateCreate(data: any): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 63,
          "snippet": "protected validateUpdate(data: any): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 125,
          "snippet": "async GET(request: NextRequest, context?: { params?: any }) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 142,
          "snippet": "const serviceContext = (request as any).serviceContext as ServiceContext;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 194,
          "snippet": "const serviceContext = (request as any).serviceContext as ServiceContext;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 242,
          "snippet": "async PUT(request: NextRequest, context?: { params?: any }) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 245,
          "snippet": "const serviceContext = (request as any).serviceContext as ServiceContext;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 298,
          "snippet": "async DELETE(request: NextRequest, context?: { params?: any }) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 300,
          "snippet": "const serviceContext = (request as any).serviceContext as ServiceContext;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 360,
          "snippet": "const serviceContext = (request as any).serviceContext as ServiceContext;"
        }
      ]
    },
    {
      "file": "apps/api-server/src/lib/rate-limit.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 400,
          "snippet": "async function applyRateLimit(req: NextRequest, key: string, config: any): Promise<RateLimitResult> {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/lib/redis.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 174,
          "snippet": "async set(sessionId: string, data: any, ttlSeconds: number = 3600): Promise<boolean> {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/lib/secure-auth.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 51,
          "snippet": "user?: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 92,
          "snippet": "} catch (firebaseError: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 129,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 227,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 319,
          "snippet": "} catch (error: any) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/lib/secure-rate-limit.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 36,
          "snippet": "private redisClient: any = null"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 308,
          "snippet": "return handler(request as any)"
        }
      ]
    },
    {
      "file": "apps/api-server/src/lib/security.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 24,
          "snippet": "export function validateInput(data: any): { isValid: boolean; errors: string[] } {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 93,
          "snippet": "function checkValue(value: any, path = ''): void {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 140,
          "snippet": "user?: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 180,
          "snippet": "handler: (request: NextRequest, ...args: any[]) => Promise<Response>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 182,
          "snippet": "return async (request: NextRequest, ...args: any[]) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 231,
          "snippet": "handler: (request: NextRequest, user: any, ...args: any[]) => Promise<Response>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 233,
          "snippet": "return async (request: NextRequest, ...args: any[]) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 243,
          "snippet": "if (!allowedRoles.includes((auth.user as any).role)) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/lib/sentry.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 49,
          "snippet": "captureEvent(event: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 72,
          "snippet": "setData: (key: string, value: any) => logger.info('üìä Data establecida:', { key, value })"
        }
      ]
    },
    {
      "file": "apps/api-server/src/marketplace/MARKETPLACE_API_DOCUMENTATION.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 666,
          "snippet": "// Ejemplo de migraci√≥n de m√©todo:"
        }
      ]
    },
    {
      "file": "apps/api-server/src/marketplace/UnifiedMarketplaceSystem.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 287,
          "snippet": "static async getCompanies(filters: any = {}): Promise<{ companies: Company[]; count: number }> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 338,
          "snippet": "const updateData: any = {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 407,
          "snippet": "static async getListings(filters: any = {}): Promise<{ listings: MarketplaceListing[]; count: number }> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 474,
          "snippet": "const updateData: any = {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 579,
          "snippet": "static async getApplicationsByListing(listingId: string, filters: any = {}): Promise<{ applications: JobApplication[]; count: number; total: number }> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 663,
          "snippet": "const updateData: any = {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 742,
          "snippet": "static async getMarketplaceOverview(filters: any = {}): Promise<any> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 765,
          "snippet": "private static convertFirestoreToCompany(data: any): Company {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 797,
          "snippet": "private static convertFirestoreToListing(data: any): MarketplaceListing {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 830,
          "snippet": "private static convertFirestoreToApplication(data: any): JobApplication {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/middleware/audit.middleware.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 19,
          "snippet": "async create(_entry: any): Promise<{ success: boolean; error?: string }> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 185,
          "snippet": "const result = await this.auditRepo.create(auditEntry as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 280,
          "snippet": "return async (request: NextRequest, _res?: NextResponse, context?: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 291,
          "snippet": "(_res as any) || ({} as any),"
        }
      ]
    },
    {
      "file": "apps/api-server/src/middleware/audit.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 135,
          "snippet": "function checkIfContainsPHI(data: any): boolean {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/middleware/auth.middleware.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 5,
          "snippet": "// TODO: integrar verificaci√≥n real de sesi√≥n (Firebase Session Cookies)"
        }
      ]
    },
    {
      "file": "apps/api-server/src/middleware/authorization.middleware.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 10,
          "snippet": "// TODO: integrar validaci√≥n real de roles/permisos"
        }
      ]
    },
    {
      "file": "apps/api-server/src/middleware/cookie-auth.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 43,
          "snippet": "static getUserInfoFromCookies(): any | null {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/middleware/error-handler.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 14,
          "snippet": "details?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 31,
          "snippet": "const requestId = (req as any).requestId || crypto.randomUUID();"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 52,
          "snippet": "user: (req as any).user?.uid || 'anonymous',"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 65,
          "snippet": "let responseBody: any = {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 138,
          "snippet": "public readonly details?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 145,
          "snippet": "details?: any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 162,
          "snippet": "badRequest: (message: string = 'Bad Request', details?: any) =>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 174,
          "snippet": "validationError: (details: any) =>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 198,
          "snippet": "export const formatZodError = (error: any): AppError => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 199,
          "snippet": "const details = error.errors?.map((e: any) => ({"
        }
      ]
    },
    {
      "file": "apps/api-server/src/middleware/hipaa-audit.middleware.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 22,
          "snippet": "previousData?: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 23,
          "snippet": "newData?: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 65,
          "snippet": "} as any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 72,
          "snippet": "previousData_encrypted: encryptedPrevData as any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 73,
          "snippet": "newData_encrypted: encryptedNewData as any,"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 77,
          "snippet": "console.error('Failed to create audit log:', error)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 84,
          "snippet": "private encryptSensitiveData(data: any): string {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 92,
          "snippet": "private sanitizeData(data: any): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 107,
          "snippet": "private fallbackLog(context: AuditContext, entry: AuditEntry, error: any): void {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 116,
          "snippet": "console.error('HIPAA_AUDIT_FALLBACK:', JSON.stringify(logEntry))"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 129,
          "snippet": "const where: any = {}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 164,
          "snippet": "userId: (req as any).user?.id || 'anonymous',"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 165,
          "snippet": "sessionId: (req as any).session?.id || 'no-session',"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 175,
          "snippet": "let responseData: any = null"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 176,
          "snippet": "let previousData: any = null"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 179,
          "snippet": "res.send = function(data: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 184,
          "snippet": "res.json = function(data: any) {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 194,
          "snippet": "console.error('Failed to get previous data:', error)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 232,
          "snippet": "export function sanitizeInput(input: any): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 254,
          "snippet": "const sanitized: any = {}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 264,
          "snippet": "function extractPatientId(req: Request, responseData: any): string | undefined {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 276,
          "snippet": "function mapAction(action: AuditEntry['action']): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 278,
          "snippet": "return action as any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 298,
          "snippet": "function detectPHIAccess(previousData?: any, newData?: any): { accessed: boolean; fields: string[] } {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 305,
          "snippet": "const scan = (obj: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 333,
          "snippet": "console.error('Failed to fetch previous data:', error)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 348,
          "snippet": "if (!(req as any).session?.id) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/middleware/index.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 8,
          "snippet": "// TODO: Implement proper auth"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 13,
          "snippet": "// TODO: Implement rate limiting"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 53,
          "snippet": "middleware(req, res, (err?: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 66,
          "snippet": "export const initializeMiddlewares = (app: any, encryptionKey: string) => {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/middleware/mfa-enforcement.middleware.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 164,
          "snippet": "(device: any) => device.token === deviceToken.value"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 173,
          "snippet": "// Todo verificado correctamente"
        }
      ]
    },
    {
      "file": "apps/api-server/src/middleware/optimized-api-middleware.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 86,
          "snippet": "static async set(key: string, value: any, ttlSeconds: number = 300): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 111,
          "snippet": "static async setPatientData(patientId: string, data: any, ttl: number = 600): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 119,
          "snippet": "static async setDoctorData(doctorId: string, data: any, ttl: number = 600): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 127,
          "snippet": "static async setMedicalRecords(recordId: string, data: any, ttl: number = 300): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 142,
          "snippet": "let dataToValidate: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 220,
          "snippet": "return function (handler: (request: NextRequest, user: any) => Promise<NextResponse>) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 277,
          "snippet": "(request as any).user = user;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 343,
          "snippet": "return function (handler: (request: NextRequest, validated: T, user: any) => Promise<NextResponse>) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 347,
          "snippet": "handler(request, validated, (request as any).user)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 475,
          "snippet": "const user = (request as any).user;"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 480,
          "snippet": "// Exportar todo para uso en otros archivos"
        }
      ]
    },
    {
      "file": "apps/api-server/src/middleware/rbac.middleware.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 14,
          "snippet": "const role = (decoded as any).role || (decoded as any)['customClaims']?.role;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 18,
          "snippet": "(req as any).user = decoded;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 36,
          "snippet": "(decoded as any).permissions || (decoded as any)['customClaims']?.permissions || [];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 41,
          "snippet": "(req as any).user = decoded;"
        }
      ]
    },
    {
      "file": "apps/api-server/src/middleware/security.middleware.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 79,
          "snippet": "(req as any).requestId = requestId;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 173,
          "snippet": "const requestId = (req as any).requestId || 'unknown';"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 190,
          "snippet": "export const initializeSecurityMiddlewares = (app: any) => {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/middleware/security.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 113,
          "snippet": "const userRole = (req.user as any).role;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 147,
          "snippet": "function sanitizeObject(obj: any): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 156,
          "snippet": "const sanitized: any = {};"
        }
      ]
    },
    {
      "file": "apps/api-server/src/middleware/telemedicine-auth.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 55,
          "snippet": "const hasValidRole = allowedRoles.some(role => authContext.hasRole(role as any));"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 160,
          "snippet": "const isAdmin = authContext.hasRole('admin' as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 179,
          "snippet": "const isAdmin = authContext.hasRole('admin' as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 193,
          "snippet": "const isAdmin = authContext.hasRole('admin' as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 316,
          "snippet": "return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 319,
          "snippet": "descriptor.value = async function (req: NextRequest, ...args: any[]) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/notifications/UnifiedNotificationSystem.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 549,
          "snippet": "const updateData: any = {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 613,
          "snippet": "const deliveryStatus: any = {};"
        }
      ]
    },
    {
      "file": "apps/api-server/src/routes/ai-jobs.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 28,
          "snippet": "function validateCreateJobRequest(body: any): { valid: boolean; error?: string; data?: any } {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/routes/auth-firebase.routes.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 90,
          "snippet": "router.post('/session-login', loginLimiter as any, async (req: Request, res: Response) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 109,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 136,
          "snippet": "let role: string | undefined = (decoded as any)?.role || (decoded as any)?.customClaims?.role;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 144,
          "snippet": "const data = snap?.data() as any | undefined;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 153,
          "snippet": "const redirectUrl = lower && (ROLE_REDIRECT_URLS as any)[lower] ? (ROLE_REDIRECT_URLS as any)[lower] : undefined;"
        }
      ]
    },
    {
      "file": "apps/api-server/src/routes/diagnostic.routes.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 346,
          "snippet": "const autoAnswers = data.symptoms.map((symptom: any, index: number) => ({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 364,
          "snippet": "possibleConditions: (report?.recommendations || []).map((rec: any, index: number) => ({"
        }
      ]
    },
    {
      "file": "apps/api-server/src/routes/metrics.routes.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 23,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 40,
          "snippet": "} catch (error: any) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/routes/mfa.routes.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 4,
          "snippet": "* TODO: Reimplementar usando UnifiedAuthSystem con sesiones"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 33,
          "snippet": "// TODO: Reimplementar con UnifiedAuthSystem"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 42,
          "snippet": "// TODO: Reimplementar con UnifiedAuthSystem"
        }
      ]
    },
    {
      "file": "apps/api-server/src/server.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 28,
          "snippet": "handler: (req: any, res: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 39,
          "snippet": "app.use(globalRateLimiter as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 111,
          "snippet": "} catch (e: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 379,
          "snippet": "server.on('error', (err: any) => {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/services/ApiMetricsService.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 99,
          "snippet": "return (req: any, res: any, next: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 103,
          "snippet": "res.send = function(data: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 367,
          "snippet": "public exportMetrics(): any {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/services/OptimizedPrescriptionService.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 84,
          "snippet": "let prescriptionsQuery: any = adminDb.collection(this.collectionName);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 253,
          "snippet": "let countQuery: any = adminDb.collection(this.collectionName);"
        }
      ]
    },
    {
      "file": "apps/api-server/src/services/ai/chatbot.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 19,
          "snippet": "async processMessage(data: any, context: ServiceContext) {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 73,
          "snippet": "// TODO: A√±adir validaci√≥n de permisos (ej. el usuario solo puede ver sus propias sesiones)"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 84,
          "snippet": "// TODO: A√±adir validaci√≥n de permisos"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 95,
          "snippet": "private updateConversationHistory(history: any[], userMessage: string, botResponse: any): any[] {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 108,
          "snippet": "private buildSessionData(sessionId: string, originalData: any, history: any[], botResponse: any, context: ServiceContext): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 129,
          "snippet": "private async createChatbotAlert(sessionData: any, chatbotResponse: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 151,
          "snippet": "private formatSuccessResponse(sessionId: string, messageCount: number, botResponse: any, language: string = 'es') {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/services/ai/medical-ai-service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 6,
          "snippet": "data: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 13,
          "snippet": "analysis: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 27,
          "snippet": "async analyzeSymptoms(symptoms: string[], patientHistory?: any): Promise<MedicalAnalysisResult> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 58,
          "snippet": "async analyzeLabResults(labData: any): Promise<MedicalAnalysisResult> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 124,
          "snippet": "async assessRisk(patientData: any, riskType: string): Promise<MedicalAnalysisResult> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 146,
          "snippet": "async medicalChatbot(message: string, context: any): Promise<any> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 162,
          "snippet": "async analyzeMedicalImage(medicalImage: any): Promise<any> {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 180,
          "snippet": "// M√©todo general para procesar cualquier tipo de an√°lisis"
        }
      ]
    },
    {
      "file": "apps/api-server/src/services/appointment.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 45,
          "snippet": "static async createAppointment(appointmentData: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 69,
          "snippet": "static async updateAppointment(id: string, updateData: any) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/services/backup-retention.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 429,
          "snippet": "let lastDoc: any = null;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 477,
          "snippet": "data: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 545,
          "snippet": "private async restoreCollection(file: any, collection: string): Promise<void> {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/services/firebase-auth.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 126,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 171,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 291,
          "snippet": "} catch (error: any) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/services/marketplace.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 28,
          "snippet": "} as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 35,
          "snippet": "static async getCompanies(filters: any = {}): Promise<{ companies: Company[]; count: number }> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 52,
          "snippet": "static async getListings(filters: any = {}): Promise<{ listings: MarketplaceListing[]; count: number }> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 85,
          "snippet": "static async getApplicationsForListing(listingId: string, filters: any = {}): Promise<{ applications: MarketplaceApplication[]; count: number; total: number }> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 94,
          "snippet": "static async getMarketplaceOverview(filters: any = {}): Promise<any> {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/services/medical-record.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 49,
          "snippet": "doctor?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 50,
          "snippet": "patient?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 51,
          "snippet": "appointment?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 52,
          "snippet": "relatedRecords?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 168,
          "snippet": "async findMany(options: any, context: ServiceContext): Promise<any> {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/services/monitoring.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 70,
          "snippet": "level: (process.env.LOG_LEVEL as any) || 'info',"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 221,
          "snippet": "const scrubValue = (value: any): any => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 233,
          "snippet": "const obj: any = {};"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 263,
          "snippet": "requestId: (req as any).requestId,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 278,
          "snippet": "id: (req as any).user?.id,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 279,
          "snippet": "username: (req as any).user?.username,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 289,
          "snippet": "const statusCode = (error as any).statusCode || 500;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 296,
          "snippet": "requestId: (req as any).requestId,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 308,
          "snippet": "const requestId = (req as any).requestId || this.generateRequestId();"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 309,
          "snippet": "(req as any).requestId = requestId;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 355,
          "snippet": "public trackMetric(name: string, value: any): void {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 476,
          "snippet": "public getStatistics(): any {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/services/patient-predictor.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 130,
          "snippet": "private async calculateRiskFactors(patientData: any): Promise<RiskFactor[]> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 202,
          "snippet": "patientData: any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 266,
          "snippet": "patientData: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 322,
          "snippet": "patientData: any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 393,
          "snippet": "private async predictComplications(patientData: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 419,
          "snippet": "private async assessMortalityRisk(patientData: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 538,
          "snippet": "private assessDataQuality(patientData: any): number {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 550,
          "snippet": "private countDataPoints(patientData: any): number {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/services/patient.service.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 25,
          "snippet": "* TODO: Implementar paginaci√≥n y filtros."
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 45,
          "snippet": "async createPatient(data: any, context?: ServiceContext): Promise<any> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 59,
          "snippet": "async getRecordsForPatient(patientId: string, options: any, context: ServiceContext): Promise<any> {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/services/payments/mercadopago.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 294,
          "snippet": "private async savePaymentPreference(preference: any): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 315,
          "snippet": "private async updatePaymentStatus(paymentData: any): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 334,
          "snippet": "private async handleApprovedPayment(paymentData: any): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 356,
          "snippet": "private async handleRejectedPayment(paymentData: any): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 375,
          "snippet": "private async handlePendingPayment(paymentData: any): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 391,
          "snippet": "private async handleInProcessPayment(paymentData: any): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 422,
          "snippet": "private async sendPaymentConfirmation(paymentData: any): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 434,
          "snippet": "private async sendDoctorNotification(paymentData: any): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 446,
          "snippet": "private async sendPaymentFailureNotification(paymentData: any): Promise<void> {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/services/prescription.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 37,
          "snippet": "doctor?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 38,
          "snippet": "patient?: any;"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 63,
          "snippet": "// TODO: Implementar batching para poblar doctor y paciente si es necesario,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 148,
          "snippet": "async findMany(options: any, context: ServiceContext): Promise<any> {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 153,
          "snippet": "// L√≥gica de permisos: los pacientes solo ven sus recetas, los doctores las suyas y los admins todo."
        }
      ]
    },
    {
      "file": "apps/api-server/src/services/prometheus-metrics.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 526,
          "snippet": "const values = await (metric as any).get();"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 536,
          "snippet": "p50: quantiles.find((q: any) => q.quantile === 0.5)?.value || 0,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 537,
          "snippet": "p95: quantiles.find((q: any) => q.quantile === 0.95)?.value || 0,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 538,
          "snippet": "p99: quantiles.find((q: any) => q.quantile === 0.99)?.value || 0,"
        }
      ]
    },
    {
      "file": "apps/api-server/src/services/qos-report.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 98,
          "snippet": "query = query.orderBy(params.sortBy || 'startTime', params.order as any || 'desc');"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 191,
          "snippet": "const metrics = snapshot.docs.map(doc => doc.data()) as any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 235,
          "snippet": "static async calculateQualityScore(metrics: any): Promise<number> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 462,
          "snippet": "private static calculateConnectionStability(metrics: any[]): number {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/services/telemedicine-session.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 151,
          "snippet": "async create(data: any, context: ServiceContext): Promise<TelemedicineSession> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 174,
          "snippet": "async findMany(options: any, context: ServiceContext): Promise<any> {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/services/telemedicine.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 156,
          "snippet": "socket.on('offer', (roomId: string, offer: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 160,
          "snippet": "socket.on('answer', (roomId: string, answer: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 164,
          "snippet": "socket.on('ice-candidate', (roomId: string, candidate: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 327,
          "snippet": "const updateData: any = {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 382,
          "snippet": "const updateData: any = {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 508,
          "snippet": "(status as any).roomStats = {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 568,
          "snippet": "private static convertFirestoreToSession(data: any): TelemedicineSession {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 589,
          "snippet": "private static calculateAverageDuration(sessions: any[]): number {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 685,
          "snippet": "private static convertFirestoreToConsent(data: any): ConsentRecord {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/services/user.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 182,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 244,
          "snippet": "let firestoreQuery: any = adminDb.collection(this.collectionName);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 515,
          "snippet": "const updateData: any = {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 545,
          "snippet": "let query: any = adminDb.collection(this.collectionName)"
        }
      ]
    },
    {
      "file": "apps/api-server/src/services/webhook-security.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 49,
          "snippet": "result?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 149,
          "snippet": "public verifyMercadoPagoWebhook(req: Request): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 225,
          "snippet": "): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 257,
          "snippet": ".createHmac(opts.algorithm as any, secret)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 278,
          "snippet": "(req as any).webhookEvent = event;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 296,
          "snippet": "(req as any).webhookEvent = event;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 423,
          "snippet": "public getStatistics(): any {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/services/webrtc/mediasoup-server-mock.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 7,
          "snippet": "constructor(server: any) {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 39,
          "snippet": "// M√©todo para simular creaci√≥n de sala"
        }
      ]
    },
    {
      "file": "apps/api-server/src/services/webrtc/mediasoup-server.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 206,
          "snippet": "socket.on('produce', async (data: { transportId: string; kind: mediasoup.types.MediaKind; rtpParameters: mediasoup.types.RtpParameters; appData?: any }) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 279,
          "snippet": "private async handleJoinRoom(socket: any, data: { roomId: string; rtpCapabilities?: mediasoup.types.RtpCapabilities }) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 328,
          "snippet": "private async handleCreateProducerTransport(socket: any, data: { roomId: string }) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 362,
          "snippet": "private async handleConnectProducerTransport(socket: any, data: { transportId: string; dtlsParameters: mediasoup.types.DtlsParameters }) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 380,
          "snippet": "private async handleProduce(socket: any, data: { transportId: string; kind: mediasoup.types.MediaKind; rtpParameters: mediasoup.types.RtpParameters; appData?: any }) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 426,
          "snippet": "private async handleCreateConsumerTransport(socket: any, data: { roomId: string }) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 460,
          "snippet": "private async handleConnectConsumerTransport(socket: any, data: { transportId: string; dtlsParameters: mediasoup.types.DtlsParameters }) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 477,
          "snippet": "private async handleConsume(socket: any, data: { transportId: string; producerId: string; rtpCapabilities: mediasoup.types.RtpCapabilities }) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 536,
          "snippet": "private async handlePauseProducer(socket: any, data: { producerId: string }) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 551,
          "snippet": "private async handleResumeProducer(socket: any, data: { producerId: string }) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 566,
          "snippet": "private async handleCloseTransport(socket: any, data: { transportId: string }) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 580,
          "snippet": "private handleDisconnect(socket: any) {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/services/webrtc/webrtc-client.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 10,
          "snippet": "onProducerCreated?: (producer: any) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 11,
          "snippet": "onConsumerCreated?: (consumer: any) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 34,
          "snippet": "private producerTransport: any = null;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 35,
          "snippet": "private consumerTransport: any = null;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 60,
          "snippet": "private onProducerCreated?: (producer: any) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 61,
          "snippet": "private onConsumerCreated?: (consumer: any) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 93,
          "snippet": "this.socket.on('router-rtp-capabilities', async (data: { rtpCapabilities: any }) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 104,
          "snippet": "this.socket.on('producer-transport-created', async (data: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 122,
          "snippet": "this.socket.on('consumer-transport-created', async (data: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 135,
          "snippet": "this.socket.on('consumed', (data: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 178,
          "snippet": "private async handleProducerTransportCreated(data: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 182,
          "snippet": "this.producerTransport.on('connect', async ({ dtlsParameters }: any, callback: any, errback: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 194,
          "snippet": "this.producerTransport.on('produce', async ({ kind, rtpParameters }: any, callback: any, errback: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 221,
          "snippet": "private async handleConsumerTransportCreated(data: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 225,
          "snippet": "this.consumerTransport.on('connect', async ({ dtlsParameters }: any, callback: any, errback: any) => {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/shared/lib/response-helpers.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 17,
          "snippet": "details?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 44,
          "snippet": "details?: any"
        }
      ]
    },
    {
      "file": "apps/api-server/src/telemedicine/unified-telemedicine-controller.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 49,
          "snippet": "socket: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 53,
          "snippet": "rtpCapabilities?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 127,
          "snippet": "const logError = (message: string, error: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 132,
          "snippet": "const decryptSessionData = (sessionData: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 152,
          "snippet": "private app: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 153,
          "snippet": "private server: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 262,
          "snippet": "public setupSocketIO(server: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 277,
          "snippet": "socket.on('join-room', async (data: { roomId: string; rtpCapabilities?: any }) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 346,
          "snippet": "socket.on('offer', (data: { roomId: string; offer: any }) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 351,
          "snippet": "socket.on('answer', (data: { roomId: string; answer: any }) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 356,
          "snippet": "socket.on('ice-candidate', (data: { roomId: string; candidate: any }) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 374,
          "snippet": "private db: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 519,
          "snippet": "const updateData: any = {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 698,
          "snippet": "const whereClause: any = {};"
        }
      ]
    },
    {
      "file": "apps/api-server/src/test/globals.d.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 36,
          "snippet": "makeRequest: (endpoint: string, options?: any) => Promise<any>;"
        }
      ]
    },
    {
      "file": "apps/api-server/src/test/health.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 17,
          "snippet": "expect((response as any).status).toBe(200)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 20,
          "snippet": "expect((response.data as any).status).toBe('healthy')"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 47,
          "snippet": "expect((response as any).status).toBe(200)"
        }
      ]
    },
    {
      "file": "apps/api-server/src/test/security.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 131,
          "snippet": "const blockedRequests = results.filter((r: any) => r.status === 429)"
        }
      ]
    },
    {
      "file": "apps/api-server/src/test/setup.ts",
      "matches": [
        {
          "pattern": "TS_IGNORE",
          "severity": "warn",
          "line": 1,
          "snippet": "// @ts-ignore"
        },
        {
          "pattern": "TS_IGNORE",
          "severity": "warn",
          "line": 2,
          "snippet": "// @ts-ignore"
        },
        {
          "pattern": "TS_IGNORE",
          "severity": "warn",
          "line": 3,
          "snippet": "// @ts-ignore"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 24,
          "snippet": "set: (data: any) => Promise.resolve({ id }),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 25,
          "snippet": "update: (data: any) => Promise.resolve({ id }),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 28,
          "snippet": "add: (data: any) => Promise.resolve({ id: 'generated-id' }),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 50,
          "snippet": "set: (data: any) => Promise.resolve({ id: path }),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 51,
          "snippet": "update: (data: any) => Promise.resolve({ id: path }),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 62,
          "snippet": "(global as any).mockAdminAuth = mockAdminAuth;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 63,
          "snippet": "(global as any).mockAdminDb = mockAdminDb;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 64,
          "snippet": "(global as any).mockFirebaseAdmin = mockFirebaseAdmin;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 77,
          "snippet": "(global as any).testHelpers = {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 78,
          "snippet": "makeRequest: async (endpoint: string, options: any = {}) => {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/test/test-utils.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 3,
          "snippet": "export const mockRequest = (options: any = {}) => ({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 11,
          "snippet": "const res: any = {"
        }
      ]
    },
    {
      "file": "apps/api-server/src/test/types.d.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 15,
          "snippet": "data: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 19,
          "snippet": "generateTestPatient(): any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 20,
          "snippet": "generateTestDoctor(): any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 21,
          "snippet": "validateApiResponse(response: any, expectSuccess?: boolean): boolean"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 25,
          "snippet": "auth(): any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 26,
          "snippet": "firestore(): any"
        }
      ]
    },
    {
      "file": "apps/api-server/src/utils/AppError.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 51,
          "snippet": "value?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 104,
          "snippet": "public static isAppError(error: any): error is AppError {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 127,
          "snippet": "static validation(field: string, message: string, value?: any): AppError {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 192,
          "snippet": "req: any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 193,
          "snippet": "res: any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 194,
          "snippet": "next: any"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 197,
          "snippet": "console.error('Error:', {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 221,
          "snippet": "const prismaError = err as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 293,
          "snippet": "return (req: any, res: any, next: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 313,
          "snippet": "log(error: Error | AppError, context?: any): void {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 334,
          "snippet": "console.error('Error Log:', errorLog);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 338,
          "snippet": "private sendToLoggingService(errorLog: any): void {"
        }
      ]
    },
    {
      "file": "apps/companies/CLAUDE.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 498,
          "snippet": "Nota: Este proyecto convive en monorepo pnpm. En esta app espec√≠fica, `npm run dev` funciona de forma aislada; para orquestar todo el monorepo usar los scripts ra√≠z con pnpm."
        }
      ]
    },
    {
      "file": "apps/companies/CLEANUP_REPORT.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 7,
          "snippet": "Se complet√≥ una limpieza arquitect√≥nica profunda de la aplicaci√≥n Companies, removiendo todo el contenido no relacionado con el rol empresarial B2B y manteniendo exclusivamente las funcionalidades de gesti√≥n hospitalaria y marketplace empre"
        }
      ]
    },
    {
      "file": "apps/companies/TESTING.md",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 451,
          "snippet": "console.log('Iniciando prueba...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 455,
          "snippet": "console.log('Request:', request.url());"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 460,
          "snippet": "console.log('Console:', msg.text());"
        }
      ]
    },
    {
      "file": "apps/companies/src/__tests__/api/companies.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 104,
          "snippet": "const colombianCompanies = companies.filter((company: any) =>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 114,
          "snippet": "const medicalSectors = companies.filter((company: any) =>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 127,
          "snippet": "companies.forEach((company: any) => {"
        }
      ]
    },
    {
      "file": "apps/companies/src/__tests__/components/HiringDashboard.test.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 25,
          "snippet": "ResponsiveContainer: ({ children }: any) => <div data-testid=\"chart-container\">{children}</div>,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 26,
          "snippet": "BarChart: ({ children }: any) => <div data-testid=\"bar-chart\">{children}</div>,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 33,
          "snippet": "PieChart: ({ children }: any) => <div data-testid=\"pie-chart\">{children}</div>,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 36,
          "snippet": "LineChart: ({ children }: any) => <div data-testid=\"line-chart\">{children}</div>,"
        }
      ]
    },
    {
      "file": "apps/companies/src/app/InteractiveMap.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 53,
          "snippet": "delete (L.Icon.Default.prototype as any)._getIconUrl;"
        }
      ]
    },
    {
      "file": "apps/companies/src/app/analytics/page.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 79,
          "snippet": "const shortages = 0; // TODO: Implement staff shortages logic"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 102,
          "snippet": "criticalAlerts: 0, // TODO: Implement critical alerts logic"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 103,
          "snippet": "staffingCoverage: 95, // TODO: Implement staffing coverage logic"
        }
      ]
    },
    {
      "file": "apps/companies/src/app/api/companies/route.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 164,
          "snippet": "// TODO: Implementar con companyRepository cuando est√© configurado"
        }
      ]
    },
    {
      "file": "apps/companies/src/app/billing/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 163,
          "snippet": "const statusConfig: Record<string, { color: string; icon: any }> = {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 427,
          "snippet": "Exportar Todo"
        }
      ]
    },
    {
      "file": "apps/companies/src/app/compliance/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 85,
          "snippet": "<Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as any)}>"
        }
      ]
    },
    {
      "file": "apps/companies/src/app/listings/new/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 86,
          "snippet": "const handleInputChange = (field: string, value: any) => {"
        }
      ]
    },
    {
      "file": "apps/companies/src/app/marketplace/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 85,
          "snippet": "function formatLocation(loc: any): string {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 170,
          "snippet": "icon: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 246,
          "snippet": "const s: any = (job as any)?.salary;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 291,
          "snippet": "{Number((job as any)?.views) || 0}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 301,
          "snippet": "const views = Number((job as any)?.views) || 0;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 302,
          "snippet": "const apps = Number((job as any)?.applications) || 0;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 323,
          "snippet": "const jobsApi = useMarketplaceJobs() as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 324,
          "snippet": "const publishedJobs: any[] = Array.isArray(jobsApi?.jobs) ? jobsApi.jobs : [];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 326,
          "snippet": "const jobsError: any = jobsApi?.error;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 327,
          "snippet": "const createJob = jobsApi?.createJob as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 328,
          "snippet": "const updateJob = jobsApi?.updateJob as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 329,
          "snippet": "const deleteJob = jobsApi?.deleteJob as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 331,
          "snippet": "const applicationsApi = useJobApplications('current-company-id') as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 332,
          "snippet": "const applications: any[] = Array.isArray(applicationsApi?.applications)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 337,
          "snippet": "const doctorApi = useDoctorSearch() as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 338,
          "snippet": "const availableDoctors: any[] = Array.isArray(doctorApi?.doctors) ? doctorApi.doctors : [];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 339,
          "snippet": "const searchDoctors = doctorApi?.searchDoctors as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 443,
          "snippet": "availableDoctors && (availableDoctors as any[]).length > 0"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 444,
          "snippet": "? (availableDoctors as any[])"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 445,
          "snippet": ": (mapDoctors as any[]);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 446,
          "snippet": "const companiesForMap = mapCompanies as any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 516,
          "snippet": "Array.isArray(publishedJobs) && (publishedJobs as any[]).length > 0"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 517,
          "snippet": "? (publishedJobs as any[])"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 518,
          "snippet": ": (mockCompanyJobs as any[]);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 519,
          "snippet": "const displayJobs: JobPosting[] = rawJobs.map((job: any) => ({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 527,
          "snippet": "totalViews: displayJobs.reduce((sum, job: any) => sum + (Number(job?.views) || 0), 0),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 638,
          "snippet": "onClick={() => setActiveTab(t.id as any)}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 706,
          "snippet": "onChange={(e) => setFilterStatus(e.target.value as any)}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 865,
          "snippet": "(d: any) =>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 870,
          "snippet": ".map((doc: any) => ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 915,
          "snippet": "doctors={doctorsForMap as any}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 916,
          "snippet": "companies={companiesForMap as any}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 921,
          "snippet": "onDoctorSelect={(doc: any) => setSelectedDoctorId(doc.id)}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 922,
          "snippet": "onCompanySelect={(c: any) => setSelectedCompanyId(c.id)}"
        }
      ]
    },
    {
      "file": "apps/companies/src/components/CompanyCard.test.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 342,
          "snippet": "const errorCompany = { ...mockCompany, name: undefined } as any"
        }
      ]
    },
    {
      "file": "apps/companies/src/components/MarketplaceMap.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 223,
          "snippet": "const BadgeEl = (ui?.Badge ?? ((props: any) => <span {...props} />)) as ComponentType<{"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 231,
          "snippet": "const L = (window as { L?: any }).L;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 478,
          "snippet": "const BadgeEl = (ui?.Badge ?? ((props: any) => <span {...props} />)) as ComponentType<{"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 616,
          "snippet": "} as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 651,
          "snippet": "const L = (window as { L?: any }).L;"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 733,
          "snippet": "// TODO: Implementar notificaciones una vez que el tipo est√© correcto"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 814,
          "snippet": "(mapRef.current as any)?.invalidateSize?.();"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 828,
          "snippet": "(mapRef.current as any)?.invalidateSize?.();"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 847,
          "snippet": "(mapRef.current as any)?.panTo?.(doc.location.coordinates);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 866,
          "snippet": "(mapRef.current as any)?.panTo?.(comp.location.coordinates);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 938,
          "snippet": "<Polyline positions={demoRoute as any} pathOptions={{ color: '#ef4444', weight: 4, dashArray: '8 6' }} />"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 943,
          "snippet": "<Marker position={demoAmbulancePos as any} icon={(function(){"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 944,
          "snippet": "if (typeof window === 'undefined') return undefined as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 945,
          "snippet": "const L = (window as any).L;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 946,
          "snippet": "if (!L || typeof L.divIcon !== 'function') return undefined as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 955,
          "snippet": "return undefined as any;"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 1261,
          "snippet": "<h4 className=\"font-medium mb-3\">M√©todo de Pago</h4>"
        }
      ]
    },
    {
      "file": "apps/companies/src/components/SimpleTestMap.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 3,
          "snippet": "// TODO: borrar el archivo del repositorio cuando no existan referencias en caches/artefactos."
        }
      ]
    },
    {
      "file": "apps/companies/src/components/analytics/AnalyticsDashboard.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 324,
          "snippet": "formatter={(value: any, name: string) => ["
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 361,
          "snippet": "<Tooltip formatter={(value: any) => [`${value} pacientes`, 'Cantidad']} />"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 383,
          "snippet": "formatter={(value: any) => [`${value}%`, 'Eficiencia']}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 410,
          "snippet": "formatter={(value: any) => [value, 'Citas']}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 439,
          "snippet": "formatter={(value: any) => [value, 'Pacientes']}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 542,
          "snippet": "formatter={(value: any, name: string) => ["
        }
      ]
    },
    {
      "file": "apps/companies/src/components/analytics/AppointmentAnalytics.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 370,
          "snippet": "formatter={(value: any) => [`${value}%`, 'Eficiencia']}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 514,
          "snippet": "formatter={(value: any, name: string) => ["
        }
      ]
    },
    {
      "file": "apps/companies/src/components/analytics/FinancialAnalytics.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 276,
          "snippet": "onChange={(e) => setSelectedPeriod(e.target.value as any)}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 285,
          "snippet": "onChange={(e) => setSelectedCurrency(e.target.value as any)}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 402,
          "snippet": "formatter={(value: any, name: string) => ["
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 430,
          "snippet": "formatter={(value: any) => [formatCurrency(value), 'Flujo de Caja']}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 566,
          "snippet": "<Tooltip formatter={(value: any) => [formatCurrency(value), 'Ingresos']} />"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 584,
          "snippet": "formatter={(value: any) => [`${value}%`, 'Crecimiento']}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 655,
          "snippet": "<Tooltip formatter={(value: any) => [formatCurrency(value), 'Gastos']} />"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 673,
          "snippet": "formatter={(value: any) => [`${value}%`, 'Variaci√≥n']}"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 734,
          "snippet": "<CardDescription>An√°lisis de transacciones por m√©todo de pago</CardDescription>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 863,
          "snippet": "formatter={(value: any, name: string) => ["
        }
      ]
    },
    {
      "file": "apps/companies/src/components/appointments/AppointmentCalendar.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 30,
          "snippet": "allDay: 'Todo el d√≠a',"
        }
      ]
    },
    {
      "file": "apps/companies/src/components/appointments/AppointmentForm.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 120,
          "snippet": "companyId: 'company-1', // TODO: obtener de contexto"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 121,
          "snippet": "createdBy: 'user-1', // TODO: obtener de auth"
        }
      ]
    },
    {
      "file": "apps/companies/src/components/b2c/JobApplicationsManager.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 10,
          "snippet": "// TODO: Implementar estos hooks en @altamedica/hooks"
        }
      ]
    },
    {
      "file": "apps/companies/src/components/baa/BAAComplianceStatus.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 60,
          "snippet": "obligations: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 109,
          "snippet": "} catch (error: any) {"
        }
      ]
    },
    {
      "file": "apps/companies/src/components/baa/BAAOnboarding.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 135,
          "snippet": "// TODO: Implementar notificaci√≥n visual sin toast"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 217,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 248,
          "snippet": "const progressStep = async (stepData: any = {}) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 293,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 337,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 764,
          "snippet": "<Label className=\"text-sm text-gray-600\">M√©todo de Firma</Label>"
        }
      ]
    },
    {
      "file": "apps/companies/src/components/crisis/CrisisMapPanel.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 27,
          "snippet": "hospitals={hospitals as any}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 28,
          "snippet": "redistributionRoutes={routes as any}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 29,
          "snippet": "staffShortages={staffShortages as any}"
        }
      ]
    },
    {
      "file": "apps/companies/src/components/dashboard/HospitalNetworkDashboard.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 323,
          "snippet": "const generateRedistributionSuggestions = (hospitals: any[]): RedistributionSuggestion[] => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 414,
          "snippet": "const detectStaffShortagesByHospital = (hospitals: any[]): StaffShortage[] => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 489,
          "snippet": "const triggerAutomaticJobPosting = async (hospitalId: string, specialty: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 559,
          "snippet": "const handleRouteSelectOnMap = (route: any) => {"
        }
      ]
    },
    {
      "file": "apps/companies/src/components/dashboard/HospitalRedistributionMap.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 100,
          "snippet": "const L = (window as any).L;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 413,
          "snippet": "const pane = (map as any)._mapPane as HTMLElement | undefined;"
        }
      ]
    },
    {
      "file": "apps/companies/src/components/dashboard/components/NetworkStatusCards.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 17,
          "snippet": "solarizedColors: any;"
        }
      ]
    },
    {
      "file": "apps/companies/src/components/dashboard/hooks/useEmergencyModeLogic.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 26,
          "snippet": "metrics: any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 59,
          "snippet": "networkStatus: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 74,
          "snippet": "const getEmergencyPriority = useCallback((metrics: any): 'low' | 'medium' | 'high' | 'critical' => {"
        }
      ]
    },
    {
      "file": "apps/companies/src/components/dashboard/hooks/useHospitalDashboard.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 94,
          "snippet": "source: 'mixed' as any,"
        }
      ]
    },
    {
      "file": "apps/companies/src/components/dashboard/types/HospitalDashboardTypes.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 69,
          "snippet": "metrics: any | null;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 82,
          "snippet": "mapHospitals: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 83,
          "snippet": "selectedHospitalOnMap: any | null;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 100,
          "snippet": "metadata?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 109,
          "snippet": "metadata?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 118,
          "snippet": "metrics?: any;"
        }
      ]
    },
    {
      "file": "apps/companies/src/components/hospital/IntelligentAlerts.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 44,
          "snippet": "data?: any;"
        }
      ]
    },
    {
      "file": "apps/companies/src/components/layout/ErrorBoundary.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 86,
          "snippet": "export function ErrorFallback({ error, resetErrorBoundary }: any) {"
        }
      ]
    },
    {
      "file": "apps/companies/src/components/maps/AltamedicaInteractiveMap.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 129,
          "snippet": "delete (L.Icon.Default.prototype as any)._getIconUrl;"
        }
      ]
    },
    {
      "file": "apps/companies/src/components/marketplace/MarketplaceAnalytics.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 132,
          "snippet": "onChange={(e) => setSelectedPeriod(e.target.value as any)}"
        }
      ]
    },
    {
      "file": "apps/companies/src/components/marketplace/MessagingSystem.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 220,
          "snippet": "(user as any)?.name ||"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 221,
          "snippet": "(user as any)?.displayName ||"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 222,
          "snippet": "(user as any)?.email ||"
        }
      ]
    },
    {
      "file": "apps/companies/src/components/operations-hub/OperationsHubLayout.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 296,
          "snippet": "doctors={getFilteredDoctors() as any}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 297,
          "snippet": "companies={getFilteredCompanies() as any}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 367,
          "snippet": "doctors={getFilteredDoctors() as any}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 368,
          "snippet": "companies={getFilteredCompanies() as any}"
        }
      ]
    },
    {
      "file": "apps/companies/src/contexts/CrisisDataContext.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 223,
          "snippet": "dataQuality: { source: 'default' as any, confidence: 70, lastUpdate: new Date() },"
        }
      ]
    },
    {
      "file": "apps/companies/src/contexts/OperationsUIContext.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 155,
          "snippet": "function saveToStorage(key: keyof typeof STORAGE_KEYS, value: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 166,
          "snippet": "function useDebounceCallback<T extends (...args: any[]) => void>("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 284,
          "snippet": "const handleLayoutChange = (event: any) => {"
        }
      ]
    },
    {
      "file": "apps/companies/src/hooks/useMarketplaceNotifications.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 95,
          "snippet": "(data: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 123,
          "snippet": "(n: any) => n.data?.marketplace,"
        }
      ]
    },
    {
      "file": "apps/companies/src/hooks/useMatching.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 291,
          "snippet": "mutationFn: async (newPreferences: any) => {"
        }
      ]
    },
    {
      "file": "apps/companies/src/lib/auth-middleware.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 34,
          "snippet": "export function requireAuth(handler: (req: NextRequest, user: any) => Promise<NextResponse>) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 59,
          "snippet": "export function requireRole(roles: string[], handler: (req: NextRequest, user: any) => Promise<NextResponse>) {"
        }
      ]
    },
    {
      "file": "apps/companies/src/lib/medical-mocks.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 5,
          "snippet": "* TODO: Reemplazar con packages reales cuando est√©n disponibles"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 12,
          "snippet": "metadata: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 26,
          "snippet": "export const encryptData = async (data: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 49,
          "snippet": "info: (message: string, meta?: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 53,
          "snippet": "error: (message: string, meta?: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 57,
          "snippet": "warn: (message: string, meta?: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 61,
          "snippet": "debug: (message: string, meta?: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 72,
          "snippet": "set: async (key: string, value: any, ttl: number = 300) => {"
        }
      ]
    },
    {
      "file": "apps/companies/src/providers/QueryProvider.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 15,
          "snippet": "retry: (failureCount, error: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 22,
          "snippet": "retry: (failureCount, error: any) => {"
        }
      ]
    },
    {
      "file": "apps/companies/src/services/HospitalDataIntegrationService.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 210,
          "snippet": "private async processWhatsAppMessage(message: any): Promise<HospitalMetrics | null> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 219,
          "snippet": "const extracted: any = {};"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 240,
          "snippet": "private mergeDataSources(sources: any[]): HospitalMetrics {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 315,
          "snippet": "private generateRecommendations(score: number, factors: any): string[] {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 357,
          "snippet": "private calculateConfidence(current: HospitalMetrics, historical: any): number {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 367,
          "snippet": "private fillDataGaps(base: any, secondary: any): void {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 385,
          "snippet": "private buildMetricsFromExtracted(hospitalId: string, extracted: any): HospitalMetrics {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 414,
          "snippet": "source: 'default' as any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 425,
          "snippet": "private async processSensorData(sensorData: any): Promise<HospitalMetrics> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 457,
          "snippet": "base.dataQuality.source = 'iot' as any;"
        }
      ]
    },
    {
      "file": "apps/companies/src/services/companyService.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 83,
          "snippet": "// TODO: Migrar estas funciones a clientes especializados en futuras versiones"
        }
      ]
    },
    {
      "file": "apps/companies/src/services/integrations/HospitalAPIService.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 31,
          "snippet": "async saveHistoricalData(hospitalId: string, data: any): Promise<void> {"
        }
      ]
    },
    {
      "file": "apps/companies/src/services/integrations/IoTSensorService.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 26,
          "snippet": "streamSensorData(hospitalId: string, callback: (data: any) => void): () => void {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 44,
          "snippet": "on: (event: string, callback: (...args: any[]) => void) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 46,
          "snippet": "connect: (options?: any) => this;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 51,
          "snippet": "requestLEScan: (options: any, callback: (result: any) => void) => Promise<void>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 61,
          "snippet": "[key: string]: any;"
        }
      ]
    },
    {
      "file": "apps/companies/src/services/integrations/WhatsAppService.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 12,
          "snippet": "type MessageHandler = (message: any) => void | Promise<void>;"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 34,
          "snippet": "// M√©todo auxiliar para pruebas manuales"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 53,
          "snippet": "on: (event: string, callback: (...args: any[]) => void) => void;"
        }
      ]
    },
    {
      "file": "apps/companies/src/services/marketplaceService.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 28,
          "snippet": "// TODO: Implement actual API call with filtering by companyId"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 40,
          "snippet": "export const createListing = async (listingData: any) => {"
        }
      ]
    },
    {
      "file": "apps/companies/src/test/mocks/auth.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 4,
          "snippet": "declare const jest: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 22,
          "snippet": "return (children as any) as unknown as React.ReactElement;"
        }
      ]
    },
    {
      "file": "apps/companies/src/types/altamedica-marketplace-hooks.d.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 3,
          "snippet": "export function useCompanyProfile(companyId: string): any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 4,
          "snippet": "export function useMarketplaceJobs(): any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 5,
          "snippet": "export function useJobApplications(companyId: string): any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 6,
          "snippet": "export function useDoctorSearch(): any;"
        }
      ]
    },
    {
      "file": "apps/companies/tests/helpers/page-objects.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 316,
          "snippet": "async editPatient(patientId: string, patientData: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 373,
          "snippet": "private async fillPatientForm(data: any) {"
        }
      ]
    },
    {
      "file": "apps/doctors/AUDITORIA_COMPLETADA.md",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 111,
          "snippet": "console.log('üì® Mensaje WebSocket recibido:', message);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 115,
          "snippet": "console.log('üì® Mensaje WebSocket recibido:', message);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 117,
          "snippet": "console.log('üì® WebSocket message type:', message.type,"
        }
      ]
    },
    {
      "file": "apps/doctors/AUDITORIA_SISTEM√ÅTICA.md",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 27,
          "snippet": "console.log(`üîÑ Reintentando conexi√≥n en ${delay}ms`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 31,
          "snippet": "console.error('üö® Error en WebSocket:', error);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 219,
          "snippet": "console.log('üì® Mensaje WebSocket recibido:', message);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 223,
          "snippet": "console.log('üì® WebSocket message type:', message.type);"
        }
      ]
    },
    {
      "file": "apps/doctors/CLAUDE.md",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 452,
          "snippet": "onInterventionImplemented={(id) => console.log('Implemented:', id)}"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 453,
          "snippet": "onAlertResolved={(id) => console.log('Resolved:', id)}"
        }
      ]
    },
    {
      "file": "apps/doctors/docs/VIDEO_EFFECTS_BEST_PRACTICES.md",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 127,
          "snippet": "const memory = (performance as any).memory?.jsHeapSizeLimit || 512;"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 186,
          "snippet": "console.log(`FPS: ${performance.fps}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 194,
          "snippet": "onEffectChange={(effects) => console.log('Efectos:', effects)}"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 244,
          "snippet": "// Todo el procesamiento ocurre en el navegador"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 276,
          "snippet": "console.log(`${effectId}: ${end - start}ms`);"
        }
      ]
    },
    {
      "file": "apps/doctors/src/app/api/appointments/route.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 271,
          "snippet": "(appointments as any[]).push(newAppointment);"
        }
      ]
    },
    {
      "file": "apps/doctors/src/app/api/marketplace/route.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 175,
          "snippet": "export const GET = requireRole(['DOCTOR' as any], async (request: NextRequest, user: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 277,
          "snippet": "export const POST = requireRole(['DOCTOR' as any], async (request: NextRequest, user: any) => {"
        }
      ]
    },
    {
      "file": "apps/doctors/src/app/api/telemedicine/route.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 196,
          "snippet": "(telemedicineSessions as any[]).push(newSession);"
        }
      ]
    },
    {
      "file": "apps/doctors/src/app/appointments/[id]/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 141,
          "snippet": "} catch (error: any) {"
        }
      ]
    },
    {
      "file": "apps/doctors/src/app/appointments/new/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 81,
          "snippet": "const filteredPatients = patients.filter((patient: any) =>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 86,
          "snippet": "const selectedPatient = patients.find((p: any) => p.id === selectedPatientId)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 179,
          "snippet": "{filteredPatients.map((patient: any) => ("
        }
      ]
    },
    {
      "file": "apps/doctors/src/app/appointments/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 37,
          "snippet": "const filters: any = {}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 191,
          "snippet": "onChange={(e) => setViewMode(e.target.value as any)}"
        }
      ]
    },
    {
      "file": "apps/doctors/src/app/dashboard/appointments/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 49,
          "snippet": "appointment: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 196,
          "snippet": "const upcomingAppointments = filteredAppointments.filter((a: any) => a.status === 'confirmed');"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 197,
          "snippet": "const pendingAppointments = filteredAppointments.filter((a: any) => a.status === 'pending');"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 222,
          "snippet": "{appointments.filter((a: any) => a.date === new Date().toLocaleDateString()).length}"
        }
      ]
    },
    {
      "file": "apps/doctors/src/app/dashboard/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 86,
          "snippet": "status={\"normal\" as any}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 87,
          "snippet": "trend={\"up\" as any}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 94,
          "snippet": "status={\"normal\" as any}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 95,
          "snippet": "trend={\"stable\" as any}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 102,
          "snippet": "status={\"normal\" as any}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 103,
          "snippet": "trend={\"stable\" as any}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 110,
          "snippet": "status={\"excellent\" as any}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 111,
          "snippet": "trend={\"up\" as any}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 123,
          "snippet": "{appointments.slice(0, 3).map((appointment: any) => ("
        }
      ]
    },
    {
      "file": "apps/doctors/src/app/dashboard/patients/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 67,
          "snippet": "patient: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 150,
          "snippet": "const filteredPatients = patients.filter((patient: any) =>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 189,
          "snippet": "{patients.filter((p: any) => {"
        }
      ]
    },
    {
      "file": "apps/doctors/src/app/dashboard/telemedicine/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 43,
          "snippet": "session: any;"
        }
      ]
    },
    {
      "file": "apps/doctors/src/app/job-applications/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 23,
          "snippet": "const doctorId = (user as any)?.doctorId || user?.id || 'mock-doctor-id';"
        }
      ]
    },
    {
      "file": "apps/doctors/src/app/marketplace/listings/[id]/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 204,
          "snippet": "onSubmit: (data: any) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 315,
          "snippet": "const handleApply = async (applicationData: any) => {"
        }
      ]
    },
    {
      "file": "apps/doctors/src/app/marketplace/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 190,
          "snippet": "const FilterPanel = ({ onFilterChange }: { onFilterChange: (filters: any) => void }) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 520,
          "snippet": "const handleFilterChange = (newFilters: any) => {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 521,
          "snippet": "// TODO: Implement filter logic. The useMarketplaceJobs hook does not currently support filtering."
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 538,
          "snippet": "// TODO: The logic here is incorrect. `updateApplication` expects an application ID."
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 626,
          "snippet": "onChange={(e) => setSortBy(e.target.value as any)}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 663,
          "snippet": "{displayJobs.map((job: any) => ("
        }
      ]
    },
    {
      "file": "apps/doctors/src/app/onboarding/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 8,
          "snippet": "const handleComplete = (data: any) => {"
        }
      ]
    },
    {
      "file": "apps/doctors/src/app/patients/new/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 73,
          "snippet": "const handleInputChange = (field: keyof PatientFormData | `address.${keyof PatientFormData['address']}`, value: any) => {"
        }
      ]
    },
    {
      "file": "apps/doctors/src/app/profile/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 275,
          "snippet": "const updateProfile = (field: string, value: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 282,
          "snippet": "const updateNestedField = (parent: keyof DoctorProfile, field: string, value: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 304,
          "snippet": "icon: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 701,
          "snippet": "checked={profile.workPreferences.types.includes(type as any)}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 784,
          "snippet": "proficiency: profSelect.value as any"
        }
      ]
    },
    {
      "file": "apps/doctors/src/app/schedule/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 62,
          "snippet": "const handleScheduleChange = (dayIndex: number, field: string, value: any) => {"
        }
      ]
    },
    {
      "file": "apps/doctors/src/app/settings/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 187,
          "snippet": "const handleProfileChange = (field: string, value: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 198,
          "snippet": "const handleWorkingHoursChange = (day: string, field: string, value: any) => {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 841,
          "snippet": "Agregar M√©todo de Pago"
        }
      ]
    },
    {
      "file": "apps/doctors/src/components/DoctorPatientsList.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 56,
          "snippet": "const handleUpdatePatient = async (patientId: string, updates: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 204,
          "snippet": "const timeSinceLastVisit = getTimeSinceLastVisit((patient as any).lastVisit || '');"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 218,
          "snippet": "{formatPatientName(patient as any)}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 222,
          "snippet": "{(patient as any).age || calculateAge(patient.dateOfBirth)} a√±os ‚Ä¢ {formatPhone(patient.phoneNumber || '')}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 244,
          "snippet": "onUpdate: (updates: any) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 252,
          "snippet": "<h3 className=\"text-lg font-semibold\">{formatPatientName(patient as any)}</h3>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 277,
          "snippet": "{(patient as any).bloodType && ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 280,
          "snippet": "<p className=\"text-gray-900\">{(patient as any).bloodType}</p>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 284,
          "snippet": "{(patient as any).allergies && (patient as any).allergies.length > 0 && ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 287,
          "snippet": "<p className=\"text-gray-900\">{(patient as any).allergies.join(', ')}</p>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 291,
          "snippet": "{(patient as any).emergencyContact && ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 295,
          "snippet": "{(patient as any).emergencyContact.name} - {formatPhone((patient as any).emergencyContact.phone)}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 296,
          "snippet": "<span className=\"text-sm text-gray-500 ml-2\">({(patient as any).emergencyContact.relationship})</span>"
        }
      ]
    },
    {
      "file": "apps/doctors/src/components/NotificationCenter.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 27,
          "snippet": "data?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 40,
          "snippet": "const [preferences, setPreferences] = useState((notificationService as any).getPreferences());"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 50,
          "snippet": "(notificationService as any).subscribe(handleNotifications);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 53,
          "snippet": "(notificationService as any).cleanOldNotifications();"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 65,
          "snippet": "(notificationService as any).unsubscribe(handleNotifications);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 71,
          "snippet": "(notificationService as any).markAsRead(notification.id);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 78,
          "snippet": "(notificationService as any).markAllAsRead();"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 83,
          "snippet": "(notificationService as any).deleteNotification(notificationId);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 86,
          "snippet": "const handlePreferenceChange = (key: string, value: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 89,
          "snippet": "(notificationService as any).updatePreferences(newPreferences);"
        }
      ]
    },
    {
      "file": "apps/doctors/src/components/b2c/MyJobApplications.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 46,
          "snippet": "await submitApplication(applicationData as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 68,
          "snippet": "messages: [...((prev as any).messages || []), {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 87,
          "snippet": "switch (status as any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 99,
          "snippet": "switch (status as any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 172,
          "snippet": "{applications.filter(app => ['pending', 'reviewing', 'interview_scheduled'].includes(app.status as any)).length}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 182,
          "snippet": "{applications.filter(app => app.status as any === 'accepted').length}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 223,
          "snippet": "<span>üìÖ Aplicado: {new Date((application as any).appliedAt).toLocaleDateString()}</span>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 224,
          "snippet": "{(application as any).reviewedAt && ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 225,
          "snippet": "<span>üëÄ Revisado: {new Date((application as any).reviewedAt).toLocaleDateString()}</span>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 227,
          "snippet": "{(application as any).interviewDate && ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 228,
          "snippet": "<span>üìÖ Entrevista: {new Date((application as any).interviewDate).toLocaleDateString()}</span>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 233,
          "snippet": "{(application as any).lastMessageAt && ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 235,
          "snippet": "üí¨ √öltimo mensaje: {new Date((application as any).lastMessageAt).toLocaleDateString()}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 257,
          "snippet": "{(application as any).coverLetter && ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 260,
          "snippet": "<strong>Carta de presentaci√≥n:</strong> {(application as any).coverLetter}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 306,
          "snippet": "<strong>Aplicado:</strong> {new Date((selectedApplication as any).appliedAt).toLocaleString()}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 308,
          "snippet": "{(selectedApplication as any).expectedSalary && ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 310,
          "snippet": "<strong>Salario esperado:</strong> {(selectedApplication as any).expectedSalary.currency} {(selectedApplication as any).expectedSalary.amount}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 320,
          "snippet": "{(selectedApplication as any).messages && (selectedApplication as any).messages.length > 0 ? ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 322,
          "snippet": "{(selectedApplication as any).messages.map((message: any) => ("
        }
      ]
    },
    {
      "file": "apps/doctors/src/components/dashboard/__tests__/DoctorDashboard.test.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 92,
          "snippet": "(fetch as any).mockResolvedValueOnce({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 98,
          "snippet": "(fetch as any).mockResolvedValueOnce({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 249,
          "snippet": "(fetch as any).mockResolvedValueOnce({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 378,
          "snippet": "(fetch as any).mockRejectedValueOnce(new Error('Network error'));"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 388,
          "snippet": "(fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 405,
          "snippet": "(fetch as any).mockImplementation(() => new Promise(() => {}));"
        }
      ]
    },
    {
      "file": "apps/doctors/src/components/layout/DoctorLayout.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 216,
          "snippet": "{user ? (user as any).name?.charAt(0).toUpperCase() : 'D'}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 219,
          "snippet": "<p className=\"text-sm font-medium\">{user ? (user as any).name : 'Doctor'}</p>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 221,
          "snippet": "{user ? (user as any).specialization : 'General Practice'}"
        }
      ]
    },
    {
      "file": "apps/doctors/src/components/medical-notes/MedicalNotesSystem.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 623,
          "snippet": "onChange={(e) => setFilterCategory(e.target.value as any)}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 639,
          "snippet": "onChange={(e) => setSortBy(e.target.value as any)}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 852,
          "snippet": "onChange={(e) => setNoteForm(prev => ({ ...prev, category: e.target.value as any }))}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 872,
          "snippet": "onChange={(e) => setNoteForm(prev => ({ ...prev, priority: e.target.value as any }))}"
        }
      ]
    },
    {
      "file": "apps/doctors/src/components/patient-predictor/PatientCrystalBall.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 94,
          "snippet": "} = usePatientPredictor(patientId) as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 239,
          "snippet": "{summary.mainFactors.map((factor: any, idx: number) => ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 280,
          "snippet": "priorityInterventions.map((intervention: any) => ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 328,
          "snippet": "onChange={(e: any) => setImplementationNotes(e.target.value)}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 389,
          "snippet": "{prediction.followUpPlan.schedule.map((item: any, idx: number) => ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 432,
          "snippet": "{prediction.followUpPlan.monitoringParameters.map((param: any, idx: number) => ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 472,
          "snippet": "{alerts.map((alert: any) => ("
        }
      ]
    },
    {
      "file": "apps/doctors/src/components/prescriptions/PrescriptionForm.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 45,
          "snippet": "onSuccess?: (prescription: any) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 79,
          "snippet": "doctorLicense: (user as any)?.licenseNumber || '',"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 80,
          "snippet": "doctorSpecialty: (user as any)?.specialty || '',"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 83,
          "snippet": "issuedAt: new Date() as any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 264,
          "snippet": "{(med as any).brandName} - {med.strength} - {med.dosageForm}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 277,
          "snippet": "<strong>{selectedMedication.genericName}</strong> ({(selectedMedication as any).brandName})"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 301,
          "snippet": "onValueChange={(value) => setValue('route', value as any)}"
        }
      ]
    },
    {
      "file": "apps/doctors/src/components/qos/QoSDashboard.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 89,
          "snippet": "const qualityBadgeVariant = (score: number): any => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 353,
          "snippet": "{reports?.reports?.map((report: any) => ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 413,
          "snippet": "function prepareTimelineData(reports: any[]): any[] {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 423,
          "snippet": "function prepareQualityDistribution(distribution: any): any[] {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 426,
          "snippet": "(sum: number, val: any) => sum + val,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 455,
          "snippet": "const renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent }: any) => {"
        }
      ]
    },
    {
      "file": "apps/doctors/src/components/qos/RealtimeQoSMetrics.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 58,
          "snippet": "onQualityChange(qualityIndicator as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 80,
          "snippet": "if ((metrics as any).connection.type === 'stable') {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 82,
          "snippet": "} else if ((metrics as any).connection.type === 'unstable') {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 104,
          "snippet": "{(metrics as any)?.latency ? `${(metrics as any).latency}ms` : '--'}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 162,
          "snippet": "<span className=\"text-lg font-semibold\">{(metrics as any)?.latency || '--'}</span>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 165,
          "snippet": "{(metrics as any)?.latency && (metrics as any).latency > 150 && ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 177,
          "snippet": "<span className=\"text-lg font-semibold\">{(metrics as any)?.packetLoss?.toFixed(1) || '0'}</span>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 180,
          "snippet": "{(metrics as any)?.packetLoss && (metrics as any).packetLoss > 2 && ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 192,
          "snippet": "<span className=\"text-lg font-semibold\">{(metrics as any)?.jitter || '--'}</span>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 205,
          "snippet": "{(metrics as any)?.bandwidth?.download ? ((metrics as any).bandwidth.download / 1000).toFixed(1) : '--'}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 213,
          "snippet": "{((metrics as any)?.video || (metrics as any)?.audio) && ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 215,
          "snippet": "{(metrics as any).video && ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 219,
          "snippet": "{(metrics as any).video.resolution} @ {(metrics as any).video.frameRate}fps"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 223,
          "snippet": "{(metrics as any).audio && ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 226,
          "snippet": "<span>{((metrics as any).audio.bitrate / 1000).toFixed(0)}kbps</span>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 235,
          "snippet": "{alerts.map((alert: any, index) => ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 248,
          "snippet": "{(metrics as any)?.connection?.type"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 249,
          "snippet": "? `Connection: ${(metrics as any).connection.type}`"
        }
      ]
    },
    {
      "file": "apps/doctors/src/components/telemedicine/AutoOptimizationPanel.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 38,
          "snippet": "const { optimizer, analyzeAndOptimize, getOptimizationRecommendations, getPerformanceStats } = useAutoOptimizer() as any;"
        }
      ]
    },
    {
      "file": "apps/doctors/src/components/telemedicine/DeviceDiagnosticPanel.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 41,
          "snippet": "const { checkDevicePermissions, getAvailableDevices, requestDevicePermissions }: any = {};"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 86,
          "snippet": "const cameras: DeviceInfo[] = deviceResults.cameras.map((device: any) => ({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 93,
          "snippet": "const microphones: DeviceInfo[] = deviceResults.microphones.map((device: any) => ({"
        }
      ]
    },
    {
      "file": "apps/doctors/src/components/telemedicine/IntegratedDoctorVideoCall.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 121,
          "snippet": "specialty: (user as any).specialty || 'Medicina General',"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 173,
          "snippet": "if (!status || 'error' in (status as any)) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 174,
          "snippet": "logger.error('Error getting call status:', status as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 178,
          "snippet": "setCallState((prev) => ({ ...prev, status: status as any }));"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 211,
          "snippet": "// TODO: Enviar notas m√©dicas a la API"
        }
      ]
    },
    {
      "file": "apps/doctors/src/components/telemedicine/ProfessionalTelemedicineCall.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 13,
          "snippet": "const VideoPanel = ({ localStream, remoteStream, connectionState, isConnected }: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 19,
          "snippet": "(localVideoRef.current as any).srcObject = localStream;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 25,
          "snippet": "(remoteVideoRef.current as any).srcObject = remoteStream;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 41,
          "snippet": "const ChatPanel = ({ messages, onSendMessage }: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 46,
          "snippet": "(messageEndRef.current as any)?.scrollIntoView({ behavior: 'smooth' });"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 60,
          "snippet": "{messages.map((msg: any) => ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 96,
          "snippet": "const MedicalNotesPanel = ({ notes, onNotesChange }: any) => ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 108,
          "snippet": "const AIDiagnosticsPanel = ({ aiAnalysis, onAnalyze, isAnalyzing }: any) => ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 120,
          "snippet": "{aiAnalysis.possibleConditions.map((c: any) => <li key={c.condition} className=\"text-gray-300\">{c.condition} ({Math.round(c.probability * 100)}%)</li>)}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 131,
          "snippet": "const CallControls = ({ onHangUp, onToggleAudio, onToggleVideo, isAudioMuted, isVideoMuted }: any) => ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 148,
          "snippet": "export const ProfessionalTelemedicineCall = ({ sessionId, doctorId, patientId }: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 155,
          "snippet": "const telemedicineHook: any = useTelemedicineDoctorHybrid({"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 157,
          "snippet": "doctorName: 'Dr. Usuario', // TODO: obtener del contexto de auth"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 158,
          "snippet": "specialty: 'Medicina General', // TODO: obtener del contexto de auth"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 167,
          "snippet": "} as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 170,
          "snippet": "const webrtcHook: any = useWebRTCDoctorHybrid({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 174,
          "snippet": "socket: (telemedicineHook as any).socket,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 190,
          "snippet": "await (telemedicineHook as any).joinSession();"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 191,
          "snippet": "await (webrtcHook as any).startCall();"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 225,
          "snippet": "setAiAnalysis(mockAnalysis as any);"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 262,
          "snippet": "doctorName=\"Dr. Usuario\" // TODO: obtener del contexto"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 263,
          "snippet": "specialty=\"Medicina General\" // TODO: obtener del contexto"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 265,
          "snippet": "onNoteCreated={(note: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 269,
          "snippet": "onNoteUpdated={(note: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 311,
          "snippet": "{(tabs as any)[activeTab]}"
        }
      ]
    },
    {
      "file": "apps/doctors/src/components/telemedicine/SessionControls.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 29,
          "snippet": "onSettingsChange?: (settings: any) => void;"
        }
      ]
    },
    {
      "file": "apps/doctors/src/components/telemedicine/VideoConsultationDoctor.tsx",
      "matches": [
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 13,
          "snippet": "// eslint-disable-next-line no-console"
        }
      ]
    },
    {
      "file": "apps/doctors/src/components/ui-stub.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 4,
          "snippet": "export const Button = ({ children, ...props }: any) => <button {...props}>{children}</button>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 6,
          "snippet": "export const Card = ({ children, ...props }: any) => <div {...props}>{children}</div>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 8,
          "snippet": "export const CardContent = ({ children, ...props }: any) => <div {...props}>{children}</div>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 10,
          "snippet": "export const CardDescription = ({ children, ...props }: any) => <p {...props}>{children}</p>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 12,
          "snippet": "export const CardHeader = ({ children, ...props }: any) => <div {...props}>{children}</div>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 14,
          "snippet": "export const CardTitle = ({ children, ...props }: any) => <h3 {...props}>{children}</h3>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 16,
          "snippet": "export const CardFooter = ({ children, ...props }: any) => <div {...props}>{children}</div>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 18,
          "snippet": "export const Input = ({ ...props }: any) => <input {...props} />;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 20,
          "snippet": "export const Badge = ({ children, ...props }: any) => <span {...props}>{children}</span>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 22,
          "snippet": "export const Progress = ({ value, ...props }: any) => ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 28,
          "snippet": "export const Alert = ({ children, ...props }: any) => <div {...props}>{children}</div>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 30,
          "snippet": "export const AlertDescription = ({ children, ...props }: any) => <p {...props}>{children}</p>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 32,
          "snippet": "export const Tabs = ({ children, ...props }: any) => <div {...props}>{children}</div>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 34,
          "snippet": "export const TabsContent = ({ children, ...props }: any) => <div {...props}>{children}</div>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 36,
          "snippet": "export const TabsList = ({ children, ...props }: any) => <div {...props}>{children}</div>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 38,
          "snippet": "export const TabsTrigger = ({ children, ...props }: any) => <button {...props}>{children}</button>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 40,
          "snippet": "export const LoadingSpinner = ({ ...props }: any) => <div {...props}>Loading...</div>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 42,
          "snippet": "export const Separator = ({ ...props }: any) => <hr {...props} />;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 45,
          "snippet": "export const Label = ({ children, ...props }: any) => <label {...props}>{children}</label>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 47,
          "snippet": "export const Textarea = ({ ...props }: any) => <textarea {...props} />;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 49,
          "snippet": "export const ScrollArea = ({ children, ...props }: any) => ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 53,
          "snippet": "export const AlertTitle = ({ children, ...props }: any) => <h4 {...props}>{children}</h4>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 56,
          "snippet": "export const Dialog = ({ children, ...props }: any) => <div {...props}>{children}</div>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 58,
          "snippet": "export const DialogTrigger = ({ children, ...props }: any) => <button {...props}>{children}</button>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 60,
          "snippet": "export const DialogContent = ({ children, ...props }: any) => ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 66,
          "snippet": "export const DialogHeader = ({ children, ...props }: any) => <div {...props}>{children}</div>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 68,
          "snippet": "export const DialogTitle = ({ children, ...props }: any) => <h2 {...props}>{children}</h2>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 70,
          "snippet": "export const DialogDescription = ({ children, ...props }: any) => <p {...props}>{children}</p>;"
        }
      ]
    },
    {
      "file": "apps/doctors/src/firebase-stub.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 8,
          "snippet": "onAuthStateChanged: (callback: any) => callback({ uid: 'stub-uid' }),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 23,
          "snippet": "onAuthStateChanged: (callback: any) => callback({ uid: 'stub-uid' }),"
        }
      ]
    },
    {
      "file": "apps/doctors/src/hooks/DEPRECATED_useTelemedicineDoctorHybrid.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 187,
          "snippet": "options?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 230,
          "snippet": "endSession: (sessionId: string, sessionSummary: any) => Promise<void>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 259,
          "snippet": "logMedicalAction: (action: string, details: any) => Promise<void>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 306,
          "snippet": "logger.warn('Firebase no disponible, usando solo Socket.IO:', err as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 340,
          "snippet": "socketInstance.on('connect_error', (err: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 341,
          "snippet": "setError(`Error de conexi√≥n: ${(err as any).message}`);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 389,
          "snippet": "socketInstance.on('quality_metrics_update', (metrics: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 395,
          "snippet": "socketInstance.on('medical_alert', (alert: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 414,
          "snippet": "setError(`Error al inicializar Socket.IO: ${err as any}`);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 472,
          "snippet": "const newSession: any = {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 530,
          "snippet": "const errorMsg = `Error al crear sesi√≥n m√©dica: ${err as any}`;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 564,
          "snippet": "const messagesSnapshot = await (messagesQuery as any).get();"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 566,
          "snippet": "(doc: any) =>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 582,
          "snippet": "const vitalSignsSnapshot = await (vitalSignsQuery as any).get();"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 584,
          "snippet": "(doc: any) =>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 599,
          "snippet": "setError(`Error al unirse a la sesi√≥n: ${err as any}`);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 623,
          "snippet": "category: category as any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 624,
          "snippet": "urgency: urgency as any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 724,
          "snippet": "async (sessionId: string, sessionSummary: any): Promise<void> => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 777,
          "snippet": "async (action: string, details: any): Promise<void> => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 792,
          "snippet": "logger.error('Error logging medical action:', err as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 969,
          "snippet": "const snapshot = await (auditQuery as any).get();"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 970,
          "snippet": "return snapshot.docs.map((doc: any) => doc.data() as AuditLogEntry);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 972,
          "snippet": "logger.error('Error fetching audit trail:', err as any);"
        }
      ]
    },
    {
      "file": "apps/doctors/src/hooks/DEPRECATED_useTelemedicineWebSocket.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 19,
          "snippet": "data?: any;"
        }
      ]
    },
    {
      "file": "apps/doctors/src/hooks/DEPRECATED_useWebRTCDoctorHybrid.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 133,
          "snippet": "technicalDetails: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 328,
          "snippet": "logger.warn('Firebase no disponible para WebRTC:', err as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 449,
          "snippet": "const calculateVideoQualityScore = (video: any): number => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 470,
          "snippet": "const calculateAudioQualityScore = (audio: any): number => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 484,
          "snippet": "const calculateNetworkQualityScore = (network: any): number => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 500,
          "snippet": "(metrics: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 620,
          "snippet": "message: `Error al iniciar llamada: ${err as any}`,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 621,
          "snippet": "technicalDetails: { error: err as any },"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 758,
          "snippet": "throw new Error(`Error al iniciar grabaci√≥n: ${err as any}`);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 793,
          "snippet": "logger.error('Error verificando cifrado:', err as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 849,
          "snippet": "logger.error('Error sharing screen:', err as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 960,
          "snippet": "severity: severity as any,"
        }
      ]
    },
    {
      "file": "apps/doctors/src/hooks/api/index.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 6,
          "snippet": "// TODO: Reintroducir bridge si se necesita multiplexar m√∫ltiples backends."
        }
      ]
    },
    {
      "file": "apps/doctors/src/hooks/api/useVideoCall.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 4,
          "snippet": "// TODO: definir tipo VideoCall en @altamedica/types y re-exportarlo aqu√≠; eliminado por deprecaci√≥n de medical-hooks."
        }
      ]
    },
    {
      "file": "apps/doctors/src/hooks/useDashboard.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 99,
          "snippet": "if (!(dbConnection as any).isReady) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 105,
          "snippet": "(dbConnection as any).authentication,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 122,
          "snippet": "logger.error('Error inicializando dashboard:', err as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 161,
          "snippet": "logger.error('Error cargando datos del dashboard:', err as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 198,
          "snippet": "logger.error('Error reconociendo alerta:', err as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 227,
          "snippet": "logger.error('Error completando cita:', err as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 256,
          "snippet": "await doctorService.createTelemedicineSession(telemedicineSession as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 258,
          "snippet": "logger.warn('No se pudo guardar la sesi√≥n en Firebase:', err as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 275,
          "snippet": "logger.error('Error iniciando sesi√≥n de telemedicina:', err as any);"
        }
      ]
    },
    {
      "file": "apps/doctors/src/hooks/useDashboardData.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 63,
          "snippet": "const { user, firebaseUser } = useAuth() as any;"
        }
      ]
    },
    {
      "file": "apps/doctors/src/hooks/useDiagnosis.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 13,
          "snippet": "const apiClient: any = {};"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 14,
          "snippet": "const withOptions: any = {};"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 171,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 228,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 251,
          "snippet": "} catch (error: any) {"
        }
      ]
    },
    {
      "file": "apps/doctors/src/hooks/useMarketplace.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 63,
          "snippet": "function convertMatchToJobOffer(match: any): JobOffer {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 129,
          "snippet": "certifications: profile.certifications?.map((c: any) => c.name) || [],"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 138,
          "snippet": "languages: profile.languages?.map((l: any) => l.language) || ['Espa√±ol'],"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 190,
          "snippet": "(notificationService as any).notifyJobMatch({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 213,
          "snippet": "const handleRealtimeUpdate = (data: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 222,
          "snippet": "(notificationService as any).notifyJobMatch({"
        }
      ]
    },
    {
      "file": "apps/doctors/src/hooks/useMarketplaceNotifications.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 165,
          "snippet": "const handleWebSocketMessage = useCallback((data: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 185,
          "snippet": "(n: any) => n.data?.marketplace,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 195,
          "snippet": "(n: any) => n.data?.marketplace,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 235,
          "snippet": "if ((notification.data as any)?.status === 'hired') {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 253,
          "snippet": "actions: (notification.data as any)?.actionUrl"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 261,
          "snippet": "} as any);"
        }
      ]
    },
    {
      "file": "apps/doctors/src/hooks/usePatients.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 81,
          "snippet": "const result = await updateMutation.mutateAsync({ id, ...data } as any);"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 96,
          "snippet": "// TODO: Implementar b√∫squeda con filtros en el hook base"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 121,
          "snippet": "patients: ((baseQuery.data as any)?.items || []).map(toSimplePatient),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 125,
          "snippet": "totalPatients: (baseQuery.data as any)?.pageInfo?.total || 0,"
        }
      ]
    },
    {
      "file": "apps/doctors/src/hooks/useTelemedicineDoctorHybrid.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 21,
          "snippet": "console.error('Error starting call:', error);"
        }
      ]
    },
    {
      "file": "apps/doctors/src/lib/api-client.ts",
      "matches": [
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 11,
          "snippet": "// eslint-disable-next-line no-console"
        }
      ]
    },
    {
      "file": "apps/doctors/src/lib/auth-middleware.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 36,
          "snippet": "logger.error('Auth verification failed', error as any, {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 44,
          "snippet": "export function requireAuth(handler: (req: NextRequest, user: any) => Promise<NextResponse>) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 59,
          "snippet": "export function requireRole(roles: UserRole[], handler: (req: NextRequest, user: any) => Promise<NextResponse>) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 70,
          "snippet": "const userRole = ((user as any).role || (user as any).custom_claims?.role) as UserRole"
        }
      ]
    },
    {
      "file": "apps/doctors/src/lib/firestore-stub.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 42,
          "snippet": "getOffers: async (filters: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 49,
          "snippet": "applyToOffer: async (application: any) => {"
        }
      ]
    },
    {
      "file": "apps/doctors/src/lib/socket.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 192,
          "snippet": "this.socket.on(event, callback as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 202,
          "snippet": "this.socket.off(event, callback as any);"
        }
      ]
    },
    {
      "file": "apps/doctors/src/lib/webrtc-client.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 11,
          "snippet": "private onProducerCreated?: (producer: any) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 12,
          "snippet": "private onConsumerCreated?: (consumer: any) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 13,
          "snippet": "private onError?: (error: any) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 21,
          "snippet": "onProducerCreated?: (producer: any) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 22,
          "snippet": "onConsumerCreated?: (consumer: any) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 23,
          "snippet": "onError?: (error: any) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 119,
          "snippet": "getStats(): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 165,
          "snippet": "onProducerCreated?: (producer: any) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 166,
          "snippet": "onConsumerCreated?: (consumer: any) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 167,
          "snippet": "onError?: (error: any) => void;"
        }
      ]
    },
    {
      "file": "apps/doctors/src/middleware.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 43,
          "snippet": "const clientIP = (request as any).ip ?? request.headers.get('x-forwarded-for') ?? 'unknown';"
        }
      ]
    },
    {
      "file": "apps/doctors/src/server/signalingServer.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 10,
          "snippet": "data: any;"
        }
      ]
    },
    {
      "file": "apps/doctors/src/services/api-client-adapter.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 57,
          "snippet": "async post<T>(endpoint: string, data?: any): Promise<ApiResponse<T>> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 61,
          "snippet": "async put<T>(endpoint: string, data?: any): Promise<ApiResponse<T>> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 65,
          "snippet": "async patch<T>(endpoint: string, data?: any): Promise<ApiResponse<T>> {"
        }
      ]
    },
    {
      "file": "apps/doctors/src/services/appointment-service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 97,
          "snippet": "private validationService: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 98,
          "snippet": "private notificationService: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 605,
          "snippet": "private async validateAppointmentData(appointmentData: any): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 634,
          "snippet": "appointmentData: any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 710,
          "snippet": "private async validateAppointmentPermissions(userId: string, appointmentData: any): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 819,
          "snippet": "private generateTimeSlots(schedule: any, duration: number): TimeSlot[] {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 849,
          "snippet": "private async logAppointmentAudit(auditData: any): Promise<void> {"
        }
      ]
    },
    {
      "file": "apps/doctors/src/services/doctor-service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 10,
          "snippet": "const medicalLogger: any = console;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 157,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 170,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 183,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 196,
          "snippet": "} catch (error: any) {"
        }
      ]
    },
    {
      "file": "apps/doctors/src/services/marketplaceService.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 4,
          "snippet": "const QueryProvider: any = {};"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 5,
          "snippet": "const apiClient: any = {};"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 6,
          "snippet": "const services: any = {};"
        }
      ]
    },
    {
      "file": "apps/doctors/src/services/matching-api.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 208,
          "snippet": "connectToRealTimeUpdates(doctorId: string, onUpdate: (data: any) => void): void {"
        }
      ]
    },
    {
      "file": "apps/doctors/src/services/notification-service.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 7,
          "snippet": "* IMPORTANTE: Todo nuevo c√≥digo debe usar directamente:"
        }
      ]
    },
    {
      "file": "apps/doctors/src/services/notification.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 4,
          "snippet": "const QueryProvider: any = {};"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 5,
          "snippet": "const apiClient: any = {};"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 6,
          "snippet": "const services: any = {};"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 65,
          "snippet": "data?: any;"
        }
      ]
    },
    {
      "file": "apps/doctors/src/services/patients-service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 9,
          "snippet": "const apiClient: any = {};"
        }
      ]
    },
    {
      "file": "apps/doctors/src/services/webrtcService.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 16,
          "snippet": "data: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 22,
          "snippet": "data: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 274,
          "snippet": "getConnectionState(): any | null {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 305,
          "snippet": "private emit(event: string, data: any): void {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 310,
          "snippet": "callback({ type: event as any, data });"
        }
      ]
    },
    {
      "file": "apps/doctors/src/telemedicine-core-stub.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 3,
          "snippet": "export const useTelemedicineUnified = (config: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 17,
          "snippet": "export const useWebRTCQoS = (config: any) => {"
        }
      ]
    },
    {
      "file": "apps/doctors/src/types/index.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 114,
          "snippet": "export const toSimpleDoctor = (complexDoctor: any): SimpleDoctor => ({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 124,
          "snippet": "export const toSimplePatient = (complexPatient: any): SimplePatient => ({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 141,
          "snippet": "export const toSimpleAppointment = (complexAppointment: any): SimpleAppointment => ({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 154,
          "snippet": "export const toSimplePrescription = (complexPrescription: any): SimplePrescription => ({"
        }
      ]
    },
    {
      "file": "apps/doctors/src/utils/throttle.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 1,
          "snippet": "export function throttle<T extends (...args: any[]) => any>("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 27,
          "snippet": "export function debounce<T extends (...args: any[]) => any>("
        }
      ]
    },
    {
      "file": "apps/doctors/src/utils-stub.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 3,
          "snippet": "export const cn = (...inputs: any[]) => inputs.filter(Boolean).join(' ');"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 5,
          "snippet": "export const classNames = (...classes: any[]) => classes.filter(Boolean).join(' ');"
        }
      ]
    },
    {
      "file": "apps/patients/AUDIT_REPORT.md",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 27,
          "snippet": "console.log('JWT Token:', token); // CR√çTICO: Token expuesto"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 28,
          "snippet": "console.log('Patient data:', patientInfo); // HIPAA violation"
        },
        {
          "pattern": "TS_IGNORE",
          "severity": "warn",
          "line": 117,
          "snippet": "- @ts-ignore: 8 instancias"
        }
      ]
    },
    {
      "file": "apps/patients/docs/BACKEND_INTEGRATION_ANALYSIS.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 288,
          "snippet": "4. **Riesgo m√≠nimo:** Todo est√° implementado, solo necesita conectarse"
        }
      ]
    },
    {
      "file": "apps/patients/docs/INTEGRATION_GUIDE.md",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 103,
          "snippet": "console.error('Error creating patient:', error);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 136,
          "snippet": "console.error('Error booking appointment:', error);"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 185,
          "snippet": "<button onClick={refetchAll}>Actualizar Todo</button>"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 212,
          "snippet": "console.log('Joined session:', sessionData.sessionId);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 214,
          "snippet": "console.error('Error joining session:', error);"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 333,
          "snippet": "- Logout limpia todo el cache"
        }
      ]
    },
    {
      "file": "apps/patients/src/app/ai-diagnosis/page.tsx",
      "matches": [
        {
          "pattern": "TS_IGNORE",
          "severity": "warn",
          "line": 193,
          "snippet": "// @ts-ignore - Three.js components"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 668,
          "snippet": "const generateNearbySpecialists = (userLocation: any): SpecialistLocation[] => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 847,
          "snippet": "gender: e.target.value as any,"
        }
      ]
    },
    {
      "file": "apps/patients/src/app/alta-anamnesis/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 36,
          "snippet": "patientId: (user as any)?.id || '',"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 47,
          "snippet": "logger.error('Error guardando anamnesis:', error as any);"
        }
      ]
    },
    {
      "file": "apps/patients/src/app/appointments/[id]/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 116,
          "snippet": "} catch (error: any) {"
        }
      ]
    },
    {
      "file": "apps/patients/src/app/appointments/book/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 536,
          "snippet": "setFormData((prev) => ({ ...prev, type: e.target.value as any }))"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 592,
          "snippet": "setFormData((prev) => ({ ...prev, urgency: e.target.value as any }))"
        }
      ]
    },
    {
      "file": "apps/patients/src/app/appointments/new/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 256,
          "snippet": "const handleFormChange = (field: keyof AppointmentForm, value: any) => {"
        }
      ]
    },
    {
      "file": "apps/patients/src/app/appointments/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 626,
          "snippet": "setBookingForm({ ...bookingForm, type: e.target.value as any })"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 672,
          "snippet": "setBookingForm({ ...bookingForm, urgency: e.target.value as any })"
        }
      ]
    },
    {
      "file": "apps/patients/src/app/dashboard/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 78,
          "snippet": "} catch (err: any) {"
        }
      ]
    },
    {
      "file": "apps/patients/src/app/doctors/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 164,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 326,
          "snippet": "onChange={(e) => setFilters({ ...filters, sortBy: e.target.value as any })}"
        }
      ]
    },
    {
      "file": "apps/patients/src/app/onboarding/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 8,
          "snippet": "const handleComplete = (data: any) => {"
        }
      ]
    },
    {
      "file": "apps/patients/src/app/page.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 255,
          "snippet": "<button className=\"text-xs text-primary-700 hover:underline\">Ver todo</button>"
        }
      ]
    },
    {
      "file": "apps/patients/src/app/prescriptions/[id]/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 11,
          "snippet": "const prescription = prescriptions?.find((p: any) => p.id === id);"
        }
      ]
    },
    {
      "file": "apps/patients/src/app/profile/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 84,
          "snippet": "const handleInputChange = (field: string, value: any) => {"
        }
      ]
    },
    {
      "file": "apps/patients/src/app/settings/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 447,
          "snippet": "onChange={(e) => setTheme(e.target.value as any)}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 464,
          "snippet": "onChange={(e) => setTheme(e.target.value as any)}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 481,
          "snippet": "onChange={(e) => setTheme(e.target.value as any)}"
        }
      ]
    },
    {
      "file": "apps/patients/src/components/appointments/AppointmentCard.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 7,
          "snippet": "appointment: any;"
        }
      ]
    },
    {
      "file": "apps/patients/src/components/dashboard/README.md",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 51,
          "snippet": "onEmergencyTrigger={() => console.log('Emergencia activada')}"
        }
      ]
    },
    {
      "file": "apps/patients/src/components/dashboard/__tests__/PatientDashboard.test.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 76,
          "snippet": "(fetch as any).mockResolvedValueOnce({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 82,
          "snippet": "(fetch as any).mockResolvedValueOnce({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 201,
          "snippet": "(fetch as any).mockResolvedValueOnce({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 248,
          "snippet": "(fetch as any).mockResolvedValueOnce({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 270,
          "snippet": "(fetch as any).mockRejectedValueOnce(new Error('Network error'));"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 280,
          "snippet": "(fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 297,
          "snippet": "(fetch as any).mockImplementation(() => new Promise(() => {}));"
        }
      ]
    },
    {
      "file": "apps/patients/src/components/dashboard/__tests__/TelemedicineDashboard.test.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 117,
          "snippet": "(global.fetch as any).mockImplementation(() =>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 127,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 153,
          "snippet": "(global.fetch as any).mockRejectedValue(new Error('Network error'));"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 171,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 225,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 269,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 293,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 328,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 352,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 390,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 424,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 448,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 495,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 526,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 557,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 582,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 607,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 634,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 661,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 685,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 708,
          "snippet": "const initialCallCount = (global.fetch as any).mock.calls.length;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 714,
          "snippet": "expect((global.fetch as any).mock.calls.length).toBe(initialCallCount);"
        }
      ]
    },
    {
      "file": "apps/patients/src/components/dashboard/lab/LabResultsTrends.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 234,
          "snippet": "{range === '3m' ? '3M' : range === '6m' ? '6M' : range === '1y' ? '1A' : 'Todo'}"
        }
      ]
    },
    {
      "file": "apps/patients/src/components/dashboard/monitors/VitalSignsMonitor.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 14,
          "snippet": "onAlertTrigger?: (alert: any) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 111,
          "snippet": "currentValue: (vitalSigns as any).glucose || 95,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 133,
          "snippet": "}, {} as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 150,
          "snippet": "const checkForAlerts = (data: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 299,
          "snippet": "{(vitalSigns as any).hasAnomalies && ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 323,
          "snippet": "metric: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 333,
          "snippet": "setAnimatedValue((prev: any) => {"
        }
      ]
    },
    {
      "file": "apps/patients/src/components/dashboard/profile/PatientProfile.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 34,
          "snippet": "{((patient as any).name || (patient as any).firstName || 'P').charAt(0)}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 40,
          "snippet": "{(patient as any).name || `${(patient as any).firstName || ''} ${(patient as any).lastName || ''}`.trim() || 'Paciente'}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 45,
          "snippet": "{(patient as any).age || 'N/A'} a√±os ‚Ä¢ {(patient as any).gender || 'N/A'} ‚Ä¢ {(patient as any).bloodType || 'N/A'}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 56,
          "snippet": "{((patient as any).name || (patient as any).firstName || 'P').charAt(0)}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 61,
          "snippet": "{(patient as any).name || `${(patient as any).firstName || ''} ${(patient as any).lastName || ''}`.trim() || 'Paciente'}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 67,
          "snippet": "<span className=\"ml-2 font-medium\">{(patient as any).age || 'N/A'} a√±os</span>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 71,
          "snippet": "<span className=\"ml-2 font-medium\">{(patient as any).gender || 'N/A'}</span>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 75,
          "snippet": "<span className=\"ml-2 font-medium\">{(patient as any).bloodType || 'N/A'}</span>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 80,
          "snippet": "{(patient as any).lastVisit ? new Date((patient as any).lastVisit).toLocaleDateString('es-MX') : 'N/A'}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 101,
          "snippet": "{(patient as any).nextAppointment && ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 104,
          "snippet": "Pr√≥xima Cita: {new Date((patient as any).nextAppointment).toLocaleDateString('es-MX')}"
        }
      ]
    },
    {
      "file": "apps/patients/src/components/dashboard/trackers/MedicationTracker.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 47,
          "snippet": "const schedule: any[] = [];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 86,
          "snippet": "const interactions: any[] = [];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 286,
          "snippet": "item: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 342,
          "snippet": "interactions: any[];"
        }
      ]
    },
    {
      "file": "apps/patients/src/components/lab-results/LabResultCard.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 17,
          "snippet": "<div className=\"font-bold text-lg mb-1\">{(labResult as any).testName || labResult.testType || 'Examen'}</div>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 19,
          "snippet": "{(labResult as any).date || (labResult.createdAt ? new Date(labResult.createdAt).toLocaleDateString() : 'N/A')} ‚Ä¢ {labResult.status || 'Pendiente'}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 22,
          "snippet": "Laboratorio: {(labResult as any).laboratoryName || labResult.laboratory || 'N/A'}"
        }
      ]
    },
    {
      "file": "apps/patients/src/components/lab-results/LabResultDetailCard.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 14,
          "snippet": "<h2 className=\"text-xl font-bold mb-2\">{(labResult as any).testName || labResult.testType || 'Examen'}</h2>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 16,
          "snippet": "{(labResult as any).date || (labResult.createdAt ? new Date(labResult.createdAt).toLocaleDateString() : 'N/A')} ‚Ä¢ {labResult.status || 'Pendiente'}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 18,
          "snippet": "<div className=\"mb-4 text-gray-700\">{(labResult as any).resultSummary || 'Sin resumen disponible'}</div>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 20,
          "snippet": "Laboratorio: {(labResult as any).laboratoryName || labResult.laboratory || 'N/A'}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 23,
          "snippet": "M√©dico solicitante: {(labResult as any).requestedBy || 'N/A'}"
        }
      ]
    },
    {
      "file": "apps/patients/src/components/lab-results/LabResultFilters.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 5,
          "snippet": "filters: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 6,
          "snippet": "onFiltersChange: (filters: any) => void;"
        }
      ]
    },
    {
      "file": "apps/patients/src/components/layout/PatientLayoutModular.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 30,
          "snippet": "onNavigate?: (item: any) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 55,
          "snippet": "(item: any) => {"
        }
      ]
    },
    {
      "file": "apps/patients/src/components/layout/PatientSidebarModular.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 61,
          "snippet": "constructor(props: any) {"
        }
      ]
    },
    {
      "file": "apps/patients/src/components/medical-history/MedicalHistoryMVP.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 173,
          "snippet": "Ver todo"
        }
      ]
    },
    {
      "file": "apps/patients/src/components/notifications/__tests__/NotificationSystem.test.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 127,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 152,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 172,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 228,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 251,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 310,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 322,
          "snippet": "(global.fetch as any).mockResolvedValueOnce({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 346,
          "snippet": "(global.fetch as any).mockResolvedValueOnce({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 370,
          "snippet": "(global.fetch as any).mockResolvedValueOnce({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 394,
          "snippet": "(global.fetch as any).mockResolvedValueOnce({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 420,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 446,
          "snippet": "(global.fetch as any).mockResolvedValueOnce({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 475,
          "snippet": "(global.fetch as any).mockResolvedValueOnce({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 506,
          "snippet": "(global.fetch as any).mockResolvedValueOnce({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 539,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 579,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 611,
          "snippet": "(global.fetch as any).mockRejectedValue(new Error('Network error'));"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 627,
          "snippet": "(global.fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 665,
          "snippet": "(global.fetch as any)"
        }
      ]
    },
    {
      "file": "apps/patients/src/components/optimized/PerformanceOptimizer.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 80,
          "snippet": "const toast = useCallback((..._args: any[]) => {}, []);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 144,
          "snippet": "const memory = (performance as any).memory;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 180,
          "snippet": "(navigator as any).getBattery().then((battery: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 261,
          "snippet": "(window as any).gc();"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 319,
          "snippet": "(window as any).gc();"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 570,
          "snippet": "onChange={(e) => setSettings(prev => ({ ...prev, videoQuality: e.target.value as any }))}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 583,
          "snippet": "onChange={(e) => setSettings(prev => ({ ...prev, audioQuality: e.target.value as any }))}"
        }
      ]
    },
    {
      "file": "apps/patients/src/components/optimized/__tests__/PerformanceOptimizer.test.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 252,
          "snippet": "(global as any).gc = jest.fn();"
        }
      ]
    },
    {
      "file": "apps/patients/src/components/prescriptions/PrescriptionFilters.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 5,
          "snippet": "filters: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 6,
          "snippet": "onFiltersChange: (filters: any) => void;"
        }
      ]
    },
    {
      "file": "apps/patients/src/components/security/MFAChallenge.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 111,
          "snippet": "// Auto-seleccionar m√©todo primario si solo hay uno disponible"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 284,
          "snippet": "rawId: Array.from(new Uint8Array((credential as any).rawId)),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 286,
          "snippet": "authenticatorData: Array.from(new Uint8Array((credential as any).response.authenticatorData)),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 287,
          "snippet": "clientDataJSON: Array.from(new Uint8Array((credential as any).response.clientDataJSON)),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 288,
          "snippet": "signature: Array.from(new Uint8Array((credential as any).response.signature)),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 289,
          "snippet": "userHandle: (credential as any).response.userHandle ? Array.from(new Uint8Array((credential as any).response.userHandle)) : null,"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 352,
          "snippet": "// Funci√≥n para obtener icono del m√©todo MFA"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 368,
          "snippet": "// Funci√≥n para obtener nombre del m√©todo MFA"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 382,
          "snippet": "return 'M√©todo desconocido';"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 428,
          "snippet": "Seleccione un m√©todo de verificaci√≥n:"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 452,
          "snippet": "<p className=\"text-xs text-blue-600\">M√©todo principal</p>"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 503,
          "snippet": "Usar otro m√©todo"
        }
      ]
    },
    {
      "file": "apps/patients/src/components/security/SecureSessionLauncher.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 64,
          "snippet": "onSessionLaunched: (sessionData: any) => void;"
        }
      ]
    },
    {
      "file": "apps/patients/src/components/triage/TriageChat.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 16,
          "snippet": "data?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 60,
          "snippet": "const addMessage = (type: Message['type'], content: string, data?: any) => {"
        }
      ]
    },
    {
      "file": "apps/patients/src/hooks/BACKUP_useMedicalRecords.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 53,
          "snippet": "pagination: null as any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 255,
          "snippet": "const analyzeSymptoms = useCallback(async (symptoms: string[], patientInfo?: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 324,
          "snippet": "upcomingAppointments: [] as any[],"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 325,
          "snippet": "healthMetrics: null as any,"
        }
      ]
    },
    {
      "file": "apps/patients/src/hooks/DEPRECATED_useTelemedicine.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 210,
          "snippet": "const { RTCRtpReceiver } = window as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 318,
          "snippet": "const { RTCRtpReceiver } = window as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 330,
          "snippet": "const setupRemoteStream = useCallback((data: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 633,
          "snippet": "async (filters?: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 701,
          "snippet": "async (filters?: any) => {"
        }
      ]
    },
    {
      "file": "apps/patients/src/hooks/__tests__/useAppointments.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 66,
          "snippet": "(fetch as any).mockResolvedValueOnce({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 88,
          "snippet": "(fetch as any).mockRejectedValueOnce(new Error('Network error'));"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 101,
          "snippet": "(fetch as any).mockResolvedValueOnce({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 118,
          "snippet": "(fetch as any).mockResolvedValueOnce({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 136,
          "snippet": "(fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 166,
          "snippet": "(fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 191,
          "snippet": "(fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 224,
          "snippet": "(fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 245,
          "snippet": "(fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 275,
          "snippet": "(fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 312,
          "snippet": "(fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 333,
          "snippet": "(fetch as any).mockResolvedValueOnce({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 355,
          "snippet": "(fetch as any).mockResolvedValueOnce({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 380,
          "snippet": "(fetch as any).mockResolvedValueOnce({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 405,
          "snippet": "(fetch as any).mockImplementation(() => new Promise(() => {}));"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 415,
          "snippet": "(fetch as any)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 438,
          "snippet": "(fetch as any)"
        }
      ]
    },
    {
      "file": "apps/patients/src/hooks/ai/useDiagnosisQuickAnalysis.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 14,
          "snippet": "// TODO: reemplazar por POST real al api-server"
        }
      ]
    },
    {
      "file": "apps/patients/src/hooks/ai/useDiagnosisRestrictions.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 18,
          "snippet": "// TODO: reemplazar con llamada real a api-server"
        }
      ]
    },
    {
      "file": "apps/patients/src/hooks/firebase-auth-adapter.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 57,
          "snippet": "private async mapFirebaseUserToLocal(firebaseUser: any): Promise<User> {"
        }
      ]
    },
    {
      "file": "apps/patients/src/hooks/useAIHIPAA.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 151,
          "snippet": "ipAddress: 'client-ip', // TODO: Implementar detecci√≥n real de IP"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 201,
          "snippet": "// Simular an√°lisis de IA (TODO: Integrar con backend real)"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 269,
          "snippet": "// Simulaci√≥n de an√°lisis de IA (TODO: Reemplazar con llamada real al backend)"
        }
      ]
    },
    {
      "file": "apps/patients/src/hooks/useAccessibility.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 4,
          "snippet": "* @todo Migrar a '@altamedica/hooks' una vez que est√© estable"
        }
      ]
    },
    {
      "file": "apps/patients/src/hooks/useAppointmentService.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 137,
          "snippet": "queryClient.setQueryData(['appointments'], (old: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 153,
          "snippet": "queryClient.setQueryData(['appointments'], (old: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 157,
          "snippet": "data: old.data.map((apt: any) =>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 166,
          "snippet": "queryClient.setQueryData(['appointments'], (old: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 170,
          "snippet": "data: old.data.filter((apt: any) => apt.id !== tempId)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 198,
          "snippet": "queryClient.setQueryData(['appointments'], (old: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 202,
          "snippet": "data: old.data.map((apt: any) =>"
        }
      ]
    },
    {
      "file": "apps/patients/src/hooks/useAuthHIPAA.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 207,
          "snippet": "ipAddress: 'client-ip', // TODO: Implementar detecci√≥n real de IP"
        }
      ]
    },
    {
      "file": "apps/patients/src/hooks/useDashboardData.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 198,
          "snippet": "const response = await dashboardService.refreshDashboardSection(apiSection as any);"
        }
      ]
    },
    {
      "file": "apps/patients/src/hooks/useEmergency.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 46,
          "snippet": "const notifyContacts = useCallback(async (patientId: string, emergencyId: string, contacts: any[]) => {"
        }
      ]
    },
    {
      "file": "apps/patients/src/hooks/useMedicalHistoryUnified.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 113,
          "snippet": "upcomingAppointments: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 114,
          "snippet": "healthMetrics: any;"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 332,
          "snippet": "upcomingAppointments: [], // TODO: Implement appointments"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 333,
          "snippet": "healthMetrics: null, // TODO: Implement health metrics"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 347,
          "snippet": "const analyzeSymptoms = useCallback(async (symptoms: string[], patientInfo?: any): Promise<SymptomAnalysis | null> => {"
        }
      ]
    },
    {
      "file": "apps/patients/src/hooks/useNotifications.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 18,
          "snippet": "metadata?: any;"
        }
      ]
    },
    {
      "file": "apps/patients/src/hooks/usePatientData.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 28,
          "snippet": "medicalHistory: any[];"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 53,
          "snippet": "vitalSigns: null, // TODO: Conectar a endpoint de signos vitales"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 54,
          "snippet": "medications: [],   // TODO: Conectar a endpoint de medicamentos"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 55,
          "snippet": "appointments: [],  // TODO: Usar 'useAppointments' hook que se conectar√° al API"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 56,
          "snippet": "labResults: [],    // TODO: Conectar a endpoint de resultados de laboratorio"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 57,
          "snippet": "medicalHistory: [],// TODO: Conectar a endpoint de historial m√©dico"
        }
      ]
    },
    {
      "file": "apps/patients/src/hooks/usePatients.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 86,
          "snippet": "searchPatients: (filters?: any) => Promise<void>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 131,
          "snippet": "async (filters?: any) => {"
        }
      ]
    },
    {
      "file": "apps/patients/src/hooks/usePrescriptionsHIPAA.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 156,
          "snippet": "ipAddress: 'client-ip', // TODO: Implementar detecci√≥n real de IP"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 315,
          "snippet": "ndc: `NDC_${Math.random().toString(36).substr(2, 9)}`, // TODO: Integrar con base de datos real de medicamentos"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 316,
          "snippet": "deaSchedule: 'IV', // TODO: Determinar basado en el medicamento"
        }
      ]
    },
    {
      "file": "apps/patients/src/hooks/useRealTimeUpdates.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 5,
          "snippet": "onVitalSignsUpdate?: (data: any) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 6,
          "snippet": "onAlertReceived?: (alert: any) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 7,
          "snippet": "onMedicationUpdate?: (data: any) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 8,
          "snippet": "onAppointmentUpdate?: (data: any) => void;"
        }
      ]
    },
    {
      "file": "apps/patients/src/hooks/useTelemedicinePatientHybrid.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 122,
          "snippet": "joinSession: (sessionId: string, patientData: any) => Promise<void>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 126,
          "snippet": "reportEmergency: (emergencyData: any) => Promise<void>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 213,
          "snippet": "const joinSession = useCallback(async (sessionId: string, patientData: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 364,
          "snippet": "const reportEmergency = useCallback(async (emergencyData: any) => {"
        }
      ]
    },
    {
      "file": "apps/patients/src/hooks/useTelemedicineUnified.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 470,
          "snippet": "const handleWebRTCSignal = useCallback(async (data: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 506,
          "snippet": "const joinSession = useCallback(async (sessionId: string, patientData: any) => {"
        }
      ]
    },
    {
      "file": "apps/patients/src/hooks/useWebRTCPatientHybrid.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 100,
          "snippet": "initializeConnection: (sessionId: string, signaling: any) => Promise<void>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 208,
          "snippet": "const initializeConnection = useCallback(async (sessionId: string, signaling: any) => {"
        }
      ]
    },
    {
      "file": "apps/patients/src/lib/api-client-jwt.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 128,
          "snippet": "data?: any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 143,
          "snippet": "data?: any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 158,
          "snippet": "data?: any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 205,
          "snippet": "public data?: any"
        }
      ]
    },
    {
      "file": "apps/patients/src/lib/firebase-config.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 11,
          "snippet": "// Configuraci√≥n de Firebase (TODO: Mover a variables de entorno)"
        }
      ]
    },
    {
      "file": "apps/patients/src/lib/socket.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 192,
          "snippet": "this.socket.on(event, callback as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 202,
          "snippet": "this.socket.off(event, callback as any);"
        }
      ]
    },
    {
      "file": "apps/patients/src/providers/AuthProvider.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 6,
          "snippet": "// Re-exportar todo desde el paquete centralizado"
        }
      ]
    },
    {
      "file": "apps/patients/src/providers/QueryProvider.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 20,
          "snippet": "retry: (failureCount, error: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 35,
          "snippet": "retry: (failureCount, error: any) => {"
        }
      ]
    },
    {
      "file": "apps/patients/src/services/DashboardService.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 333,
          "snippet": "private transformAppointmentsForDashboard(appointments: any[]): DashboardAppointment[] {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 352,
          "snippet": "private transformRecordsForDashboard(records: any[]): DashboardMedicalRecord[] {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 368,
          "snippet": "private transformPrescriptionsForDashboard(prescriptions: any[]): DashboardPrescription[] {"
        }
      ]
    },
    {
      "file": "apps/patients/src/services/appointments-service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 260,
          "snippet": "): Promise<ApiResponse<{ schedule: any; availability: AppointmentSlot[] }>> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 267,
          "snippet": "return apiClient.get<{ schedule: any; availability: AppointmentSlot[] }>(endpoint);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 350,
          "snippet": "webrtcConfig: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 355,
          "snippet": "webrtcConfig: any;"
        }
      ]
    },
    {
      "file": "apps/patients/src/services/auth-jwt.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 407,
          "snippet": "private setUser(user: any): void {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 413,
          "snippet": "getUser(): any {"
        }
      ]
    },
    {
      "file": "apps/patients/src/types/index.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 90,
          "snippet": "export const toSimplePatient = (complexPatient: any): SimplePatient => ({"
        }
      ]
    },
    {
      "file": "apps/signaling-server/src/controllers/socket.controller.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 8,
          "snippet": "// TODO: Definir estos tipos en @altamedica/types"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 19,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 25,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 30,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 37,
          "snippet": "data: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 39,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 48,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 307,
          "snippet": "...((data as any).fileUrl ? { fileUrl: (data as any).fileUrl } : {}),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 308,
          "snippet": "...((data as any).fileName ? { fileName: (data as any).fileName } : {}),"
        }
      ]
    },
    {
      "file": "apps/signaling-server/src/index.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 53,
          "snippet": "app.use('/api/*', limiter as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 199,
          "snippet": "transports: serverConfig.socketIO.transports as any,"
        }
      ]
    },
    {
      "file": "apps/signaling-server/src/middleware/auth.middleware.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 6,
          "snippet": "// TODO: Definir este tipo en @altamedica/types"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 11,
          "snippet": "[key: string]: any;"
        }
      ]
    },
    {
      "file": "apps/signaling-server/src/services/firebase.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 50,
          "snippet": "async updateTelemedicineSession(sessionId: string, updateData: any): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 71,
          "snippet": "async saveChatMessage(sessionId: string, message: any): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 101,
          "snippet": "details?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 127,
          "snippet": "async updateVitalSigns(sessionId: string, patientId: string, vitals: any): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 171,
          "snippet": "connectionInfo: any;"
        }
      ]
    },
    {
      "file": "apps/signaling-server/src/services/room.service.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 6,
          "snippet": "// TODO: Definir estos tipos en @altamedica/types"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 14,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 26,
          "snippet": "connectionInfo: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 27,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 40,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 79,
          "snippet": "async joinRoom(roomId: string, user: User, connectionInfo: any): Promise<Participant | null> {"
        }
      ]
    },
    {
      "file": "apps/web-app/src/app/about/page.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 27,
          "snippet": "description: 'Ponemos la salud y bienestar de nuestros pacientes en el centro de todo lo que hacemos.'"
        }
      ]
    },
    {
      "file": "apps/web-app/src/app/auth/select-role/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 10,
          "snippet": "const { user, updateProfile, isLoading } = useAuth() as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 34,
          "snippet": "} catch (e: any) {"
        }
      ]
    },
    {
      "file": "apps/web-app/src/app/auth/verify-email/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 50,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 97,
          "snippet": "} catch (error: any) {"
        }
      ]
    },
    {
      "file": "apps/web-app/src/app/blog/page.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 40,
          "snippet": "excerpt: 'Todo lo que necesitas saber sobre el cumplimiento de HIPAA y c√≥mo protegemos tu informaci√≥n m√©dica en AltaMedica.',"
        }
      ]
    },
    {
      "file": "apps/web-app/src/app/page.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 25,
          "snippet": "function OptimizedSkeleton({ icon: Icon, text }: { icon: any; text: string }) {"
        }
      ]
    },
    {
      "file": "apps/web-app/src/app/servicios/page.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 194,
          "snippet": "Todo lo que necesitas para una pr√°ctica m√©dica moderna"
        }
      ]
    },
    {
      "file": "apps/web-app/src/app/sitemap.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 88,
          "snippet": "// TODO: Add dynamic pages (blog posts, doctor profiles, etc.)"
        }
      ]
    },
    {
      "file": "apps/web-app/src/app/terms/page.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 165,
          "snippet": "Todo el contenido de AltaMedica, incluyendo software, dise√±os, logos y tecnolog√≠a,"
        }
      ]
    },
    {
      "file": "apps/web-app/src/components/auth/CompleteProfileForm.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 10,
          "snippet": "// updateProfile es el m√©todo expuesto por el hook (no updateUserProfile)"
        }
      ]
    },
    {
      "file": "apps/web-app/src/components/auth/ForgotPasswordForm.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 53,
          "snippet": "} catch (error: any) {"
        }
      ]
    },
    {
      "file": "apps/web-app/src/components/auth/LoginForm.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 85,
          "snippet": "const normalizedRole = (role || '').toString().toLowerCase() as any;"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 238,
          "snippet": "console.error('ReCAPTCHA error:', error);"
        }
      ]
    },
    {
      "file": "apps/web-app/src/components/auth/ReCaptcha.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 20,
          "snippet": "render: (container: HTMLElement | string, options: any) => number;"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 75,
          "snippet": "console.error('ReCAPTCHA site key not found for platform:', platform);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 91,
          "snippet": "console.error('Error rendering ReCAPTCHA:', error);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 123,
          "snippet": "console.error('Error resetting ReCAPTCHA on cleanup:', error);"
        }
      ]
    },
    {
      "file": "apps/web-app/src/components/auth/RegisterForm.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 55,
          "snippet": "const role = user.role as any;"
        }
      ]
    },
    {
      "file": "apps/web-app/src/components/auth/UnifiedAuthSystem.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 36,
          "snippet": "onSuccess?: (user: any) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 91,
          "snippet": "if ((user as any)?.pendingRoleSelection) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 103,
          "snippet": "const normalized = role?.toString().toLowerCase() as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 120,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 144,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 167,
          "snippet": "} catch (error: any) {"
        }
      ]
    },
    {
      "file": "apps/web-app/src/components/home/VideoCarousel.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 1,
          "snippet": "// TODO(MIGRATION): Evaluar mover este componente a un paquete compartido (@altamedica/media) o simplificarlo para marketing."
        }
      ]
    },
    {
      "file": "apps/web-app/src/components/home/VideoPlayer.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 54,
          "snippet": "const connection = (navigator as any).connection;"
        }
      ]
    },
    {
      "file": "apps/web-app/src/components/marketplace/UnifiedMarketplaceMap.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 13,
          "snippet": "delete (L.Icon.Default.prototype as any)._getIconUrl;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 26,
          "snippet": "data?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 93,
          "snippet": "const MapError = ({ error, resetErrorBoundary }: any) => ("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 111,
          "snippet": "const StaticMapFallback = ({ center, markers }: any) => ("
        }
      ]
    },
    {
      "file": "apps/web-app/src/components/ui/FirebaseErrorBoundary.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 98,
          "snippet": "const handleFirebaseError = (error: any, context: string = '') => {"
        }
      ]
    },
    {
      "file": "apps/web-app/src/components/ui/label.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 6,
          "snippet": "[key: string]: any"
        }
      ]
    },
    {
      "file": "apps/web-app/src/components/ui/wizard/README.md",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 67,
          "snippet": "onComplete={(data) => console.log('Wizard completed:', data)}"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 99,
          "snippet": "console.log('Patient data:', data)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 187,
          "snippet": "custom?: (value: any) => boolean | string"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 570,
          "snippet": "console.log('Saving:', data) // Debug callback"
        }
      ]
    },
    {
      "file": "apps/web-app/src/components/ui/wizard/Wizard.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 17,
          "snippet": "validation?: (data: any) => boolean | string[]"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 23,
          "snippet": "[stepId: string]: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 45,
          "snippet": "updateStepData: (stepId: string, data: any) => void"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 188,
          "snippet": "const updateStepData = useCallback((stepId: string, stepData: any) => {"
        }
      ]
    },
    {
      "file": "apps/web-app/src/components/ui/wizard/hooks.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 11,
          "snippet": "validationRules?: Record<keyof T, (value: any) => boolean | string>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 52,
          "snippet": "const updateField = useCallback((field: keyof T, value: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 87,
          "snippet": "const trackEvent = useCallback((action: string, metadata?: any) => {"
        }
      ]
    },
    {
      "file": "apps/web-app/src/constants/homePage.d.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 2,
          "snippet": "export interface FeatureCardDef { icon: any; title: string; description: string; color: string }"
        }
      ]
    },
    {
      "file": "apps/web-app/src/constants/homePage.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 6,
          "snippet": "icon: any; // Lucide icon component"
        }
      ]
    },
    {
      "file": "apps/web-app/src/hooks/api-hooks.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 68,
          "snippet": "// TODO: Migrar a cookies HttpOnly siguiendo HIPAA compliance"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 74,
          "snippet": "onSuccess: (data: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 130,
          "snippet": "mutationFn: (data: any) => api.doctors.create(data),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 153,
          "snippet": "export function useMedicalRecords(params?: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 173,
          "snippet": "mutationFn: (data: any) => api.medicalRecords.create(data),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 184,
          "snippet": "export function useJobs(params?: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 192,
          "snippet": "export function useJobApplications(params?: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 203,
          "snippet": "mutationFn: (data: any) => api.jobs.applications.create(data),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 212,
          "snippet": "export function useMessages(params?: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 224,
          "snippet": "mutationFn: (data: any) => api.messages.send(data),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 235,
          "snippet": "mutationFn: (data: any) => api.ai.riskAssessment(data)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 241,
          "snippet": "mutationFn: (data: any) => api.ai.diagnosis(data)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 256,
          "snippet": "export function useMedicalLocations(params?: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 286,
          "snippet": "export function usePatientStats(params?: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 294,
          "snippet": "export function useAppointmentStats(params?: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 320,
          "snippet": "mutationFn: ({ id, data }: { id: string; data: any }) =>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 330,
          "snippet": "queryClient.setQueryData(['appointments', id], (old: any) => ({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 360,
          "snippet": "placeholderData: (previousData: any) => previousData"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 369,
          "snippet": "hasNextPage: (query.data as any)?.hasMore ?? false,"
        }
      ]
    },
    {
      "file": "apps/web-app/src/hooks/gateway-hooks.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 34,
          "snippet": "onError: (error: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 55,
          "snippet": "onError: (error: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 74,
          "snippet": "onError: (error: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 92,
          "snippet": "onError: (error: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 147,
          "snippet": "queryClient.setQueryData(['notifications', 'global'], (old: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 159,
          "snippet": "onError: (error: any) => {"
        }
      ]
    },
    {
      "file": "apps/web-app/src/hooks/useAPI.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 69,
          "snippet": "post<T>(endpoint: string, data?: any, options?: RequestInit): Promise<T> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 77,
          "snippet": "put<T>(endpoint: string, data?: any, options?: RequestInit): Promise<T> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 129,
          "snippet": "mutationFn: (userData: any) =>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 150,
          "snippet": "mutationFn: (symptoms: any) =>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 158,
          "snippet": "mutationFn: (diagnosticData: any) =>"
        }
      ]
    },
    {
      "file": "apps/web-app/src/hooks/useEventDelegation.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 175,
          "snippet": "onSceneInteraction?.(event as any)"
        }
      ]
    },
    {
      "file": "apps/web-app/src/hooks/useHydrationSafe.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 85,
          "snippet": "if (typeof window !== 'undefined' && (window as any).trackError) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 86,
          "snippet": "(window as any).trackError({"
        }
      ]
    },
    {
      "file": "apps/web-app/src/hooks/useLeafletMap.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 22,
          "snippet": "map.eachLayer((layer: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 43,
          "snippet": "if ((container as any)._leaflet_id) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 44,
          "snippet": "delete (container as any)._leaflet_id;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 78,
          "snippet": "const L = (window as any).L;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 127,
          "snippet": "const onMapCreated = (mapInstance: any) => {"
        }
      ]
    },
    {
      "file": "apps/web-app/src/hooks/useSentry.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 13,
          "snippet": "const captureError = useCallback((error: Error, context?: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 29,
          "snippet": "context?: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 58,
          "snippet": "const setContext = useCallback((name: string, context: any) => {"
        }
      ]
    },
    {
      "file": "apps/web-app/src/middleware/role-redirect.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 6,
          "snippet": "let AUTH_COOKIES_IMPORTED: any, LEGACY_AUTH_COOKIES_IMPORTED: any;"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 8,
          "snippet": "// eslint-disable-next-line @typescript-eslint/no-var-requires"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 31,
          "snippet": "let tokenPayload: any = {};"
        }
      ]
    },
    {
      "file": "apps/web-app/src/providers/APIProvider.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 20,
          "snippet": "retry: (failureCount, error: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 42,
          "snippet": "retry: (failureCount, error: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 90,
          "snippet": "onError: (error: any) => {"
        }
      ]
    },
    {
      "file": "apps/web-app/src/services/firebase-chat.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 8,
          "snippet": "updatedAt?: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 19,
          "snippet": "createdAt?: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 21,
          "snippet": "prescriptionData?: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 22,
          "snippet": "attachments?: any[]"
        }
      ]
    },
    {
      "file": "apps/web-app/src/services/firebase-notifications.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 44,
          "snippet": "medicalData?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 47,
          "snippet": "createdAt: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 85,
          "snippet": "sendAppointmentReminder: (patientId: string, appointmentData: any) => Promise<void>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 86,
          "snippet": "sendPrescriptionReady: (patientId: string, prescriptionData: any) => Promise<void>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 87,
          "snippet": "sendLabResultsReady: (patientId: string, labData: any) => Promise<void>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 88,
          "snippet": "sendEmergencyAlert: (recipientIds: string[], emergencyData: any) => Promise<void>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 279,
          "snippet": "async sendAppointmentReminder(patientId: string, appointmentData: any): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 303,
          "snippet": "async sendPrescriptionReady(patientId: string, prescriptionData: any): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 327,
          "snippet": "async sendLabResultsReady(patientId: string, labData: any): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 351,
          "snippet": "async sendEmergencyAlert(recipientIds: string[], emergencyData: any): Promise<void> {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 422,
          "snippet": "// M√©todo privado para push notifications (requerir√≠a implementaci√≥n adicional)"
        }
      ]
    },
    {
      "file": "apps/web-app/src/services/firebase-storage.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 43,
          "snippet": "createdAt: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 44,
          "snippet": "updatedAt: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 72,
          "snippet": "approvedAt?: any"
        }
      ]
    },
    {
      "file": "apps/web-app/src/services/grok-connector.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 204,
          "snippet": "// M√©todo para cambiar entre servidor real y simulaci√≥n"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 210,
          "snippet": "// M√©todo para testing"
        }
      ]
    },
    {
      "file": "apps/web-app/src/services/redirect-service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 25,
          "snippet": "const dashboardUrl = getDashboardUrl(role as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 87,
          "snippet": "return getDashboardUrl(role as any);"
        }
      ]
    },
    {
      "file": "apps/web-app/src/types/global.d.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 14,
          "snippet": "create: (component: string, containerId: string, settings: any) => Promise<any>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 16,
          "snippet": "checkout: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 37,
          "snippet": "export const auth: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 38,
          "snippet": "export const db: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 39,
          "snippet": "export const storage: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 40,
          "snippet": "export const analytics: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 57,
          "snippet": "const content: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 62,
          "snippet": "export const render: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 63,
          "snippet": "export const screen: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 64,
          "snippet": "export const waitFor: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 65,
          "snippet": "export const fireEvent: any;"
        }
      ]
    },
    {
      "file": "apps/web-app/src/utils/suppress-css-warnings.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 42,
          "snippet": "console.warn = (...args: any[]) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 54,
          "snippet": "console.error = (...args: any[]) => {"
        }
      ]
    },
    {
      "file": "apps/web-app/tests/e2e/complete-patient-telemedicine.spec.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 13,
          "snippet": "* Este es el test definitivo que valida todo el flujo m√©dico."
        }
      ]
    },
    {
      "file": "claude-gemini-sync.cjs",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 38,
          "snippet": "console.log(`\\nüîÑ Auto-sync detectado:`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 39,
          "snippet": "console.log(`  Claude: ${claudeFiles.length} archivos en packages/`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 40,
          "snippet": "console.log(`  Gemini: ${geminiFiles.length} archivos en apps/`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 56,
          "snippet": "console.log('‚úÖ Nuevos cambios sincronizados desde remoto');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 67,
          "snippet": "console.error('Error en sincronizaci√≥n:', error.message);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 86,
          "snippet": "console.log(`‚úÖ Auto-commit exitoso: ${worker}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 88,
          "snippet": "console.log('‚ö†Ô∏è Auto-commit pospuesto (posibles conflictos)');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 157,
          "snippet": "console.log('‚ö†Ô∏è Build artifacts missing:', missing);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 163,
          "snippet": "console.log('üîß Rebuilding packages...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 168,
          "snippet": "console.log('‚úÖ Packages rebuilt successfully');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 170,
          "snippet": "console.error('‚ùå Rebuild failed:', e.message);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 187,
          "snippet": "console.log('üöÄ Claude-Gemini Sync System Started');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 188,
          "snippet": "console.log('üìç Monitoring every 30 seconds...\\n');"
        }
      ]
    },
    {
      "file": "deployment/admin-build/types/app/monitoring/logs/page.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 24,
          "snippet": "metadata?: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 26,
          "snippet": "viewport?: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 51,
          "snippet": "checkFields<Diff<{ __tag__: 'generateStaticParams', __return_type__: any[] | Promise<any[]> }, { __tag__: 'generateStaticParams', __return_type__: ReturnType<MaybeField<TEntry, 'generateStaticParams'>> }>>()"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 66,
          "snippet": "type RevalidateRange<T> = T extends { revalidate: any } ? NonNegative<T['revalidate']> : never"
        }
      ]
    },
    {
      "file": "docs/GUIA-DEFINITIVA-WORKTREE-QUALITY.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 7,
          "snippet": "- **Objetivo**: Hacer que todo funcione para el usuario final"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 25,
          "snippet": "B --> C[‚úÖ VALIDATE<br/>Verificar todo]"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 141,
          "snippet": "### Objetivo: Asegurar que TODO funciona sin errores"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 298,
          "snippet": "- INTEGRATE: 3-4 d√≠as (conectar todo)"
        }
      ]
    },
    {
      "file": "docs/METRICAS_AUDIT_INTEGRATE_VALIDATE.md",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 116,
          "snippet": "node -e \"console.log(require('./coverage/coverage-summary.json').total)\""
        }
      ]
    },
    {
      "file": "docs/NAVIGATION-MAP.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 15,
          "snippet": "### üéØ **¬øQuieres entender todo el proyecto de un vistazo?**"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 114,
          "snippet": "**Historia**: \"_Como administrador, aqu√≠ supervisas todo el ecosistema_\""
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 126,
          "snippet": "**El cerebro de todo**. Aqu√≠ encuentras:"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 275,
          "snippet": "**üéØ Recuerda**: AltaMedica es como una ciudad - cada barrio tiene su prop√≥sito, pero todo est√° conectado. ¬°Usa este mapa para navegar como un local!"
        }
      ]
    },
    {
      "file": "docs/PROCESOS_REPETIBLES_DELEGACION.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 481,
          "snippet": "Los procesos repetibles de delegaci√≥n estrat√©gica han sido **completamente establecidos** y **validados** a trav√©s de la implementaci√≥n exitosa del sistema Todo-Write:"
        }
      ]
    },
    {
      "file": "docs/REPORTE_EJECUTIVO_STAKEHOLDERS.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 34,
          "snippet": "| **Sistema Todo-Write**       | 0% implementado | 100% funcional      | **100%** |"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 84,
          "snippet": "## üéØ **CASO DE √âXITO: SISTEMA TODO-WRITE**"
        }
      ]
    },
    {
      "file": "docs/TESTING-COMPLETE.md",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 87,
          "snippet": "console.log('Violations:', compliance.violations);"
        }
      ]
    },
    {
      "file": "docs/VALIDACION_TECNICA_ALTAMEDICA.md",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 194,
          "snippet": "app.use('/api/*', limiter as any);"
        }
      ]
    },
    {
      "file": "docs/WORKFLOW_COLABORATIVO_EXITOSO.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 21,
          "snippet": "- **Sistema Todo-Write**: 0% implementado ‚Üí 100% funcional y operativo"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 84,
          "snippet": "## üéØ **CASO DE √âXITO: SISTEMA TODO-WRITE**"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 110,
          "snippet": "- **Integraci√≥n**: Ruta /todo-write funcional y accesible"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 249,
          "snippet": "- **Sistema Todo-Write**: Operativo y listo para producci√≥n"
        }
      ]
    },
    {
      "file": "docs/WORKTREE-CLAUDE-GUIDE.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 7,
          "snippet": "1. **Mantiene el contexto completo** - Claude puede ver todo el proyecto cuando necesitas hacer cambios cross-cutting"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 71,
          "snippet": "claude \"Auditar todo el proyecto y generar reporte de optimizaciones\""
        }
      ]
    },
    {
      "file": "docs/WORKTREE-MODEL.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 25,
          "snippet": "‚îî‚îÄ‚îÄ devaltamedica-validate\\     # VALIDATE - Verificar que todo funciona"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 101,
          "snippet": "**Objetivo**: Verificar que TODO funciona perfectamente"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 128,
          "snippet": "**Objetivo**: Merge a main cuando TODO est√© perfecto"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 298,
          "snippet": "3. **Visibilidad total**: Claude ve todo el proyecto"
        }
      ]
    },
    {
      "file": "e2e/config/global-setup.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 8,
          "snippet": "console.log('üè• Initializing AltaMedica Medical Testing Environment...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 15,
          "snippet": "console.log('‚öïÔ∏è Checking API Server health...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 24,
          "snippet": "console.log('‚úÖ API Server is healthy');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 27,
          "snippet": "console.log('üè• Checking Patients Portal...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 29,
          "snippet": "console.log('‚úÖ Patients Portal accessible');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 32,
          "snippet": "console.log('üìä Initializing medical test data...');"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 34,
          "snippet": "(window as any).medicalTestEnvironment = {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 42,
          "snippet": "console.log('üîí HIPAA compliance mode enabled');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 43,
          "snippet": "console.log('‚úÖ AltaMedica testing environment ready');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 46,
          "snippet": "console.error('‚ùå Global setup failed:', error.message);"
        }
      ]
    },
    {
      "file": "e2e/config/global-teardown.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 8,
          "snippet": "console.log('üßπ Starting AltaMedica test environment cleanup...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 12,
          "snippet": "console.log('üîí Performing HIPAA-compliant data cleanup...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 15,
          "snippet": "console.log('üìä Generating medical compliance report...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 17,
          "snippet": "console.log('‚úÖ AltaMedica test environment cleanup completed');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 20,
          "snippet": "console.error('‚ùå Global teardown failed:', error.message);"
        }
      ]
    },
    {
      "file": "e2e/reports/test-results.json",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 246,
          "snippet": "\"snippet\": \"\\u001b[90m   at \\u001b[39m../config/global-setup.ts:16\\n\\n  14 |     // Wait for API server to be ready\\n  15 |     console.log('‚öïÔ∏è Checking API Server health...');\\n> 16 |     await page.goto('http://localhost:3001/api/health')"
        }
      ]
    },
    {
      "file": "e2e/tests/integration/api-health-check.spec.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 27,
          "snippet": "console.log(`‚úÖ API Health Check: ${responseTime}ms`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 47,
          "snippet": "console.log(`‚úÖ Patients Portal Load: ${loadTime}ms`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 67,
          "snippet": "console.log(`‚úÖ Web App Load: ${loadTime}ms`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 103,
          "snippet": "console.log('üè• API Performance Report:');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 106,
          "snippet": "console.log(`  ${status} ${result.endpoint}: ${result.responseTime}ms (${result.status})`);"
        }
      ]
    },
    {
      "file": "e2e/tests/medical-workflows/emergency-consultation.spec.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 73,
          "snippet": "return (window as any).webrtcStats?.audioLevel || 0;"
        }
      ]
    },
    {
      "file": "e2e/utils/compliance-validators.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 478,
          "snippet": "currentSession: (window as any).currentSession || null"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 513,
          "snippet": "session_id: (window as any).currentSession?.id || 'unknown',"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 514,
          "snippet": "total_actions: (window as any).medicalActions?.length || 0,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 515,
          "snippet": "phi_accessed: (window as any).phiAccessed || false,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 516,
          "snippet": "compliance_violations: (window as any).complianceViolations || [],"
        }
      ]
    },
    {
      "file": "e2e/utils/medical-compliance-reporter.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 12,
          "snippet": "medicalMetrics?: any;"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 25,
          "snippet": "console.log('\\nüè• AltaMedica Medical Compliance Report');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 26,
          "snippet": "console.log('=====================================');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 32,
          "snippet": "console.log(`‚úÖ Passed: ${passed}/${total}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 33,
          "snippet": "console.log(`‚ùå Failed: ${failed}/${total}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 34,
          "snippet": "console.log(`üè• Medical Compliance: ${failed === 0 ? 'COMPLIANT' : 'REVIEW REQUIRED'}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 37,
          "snippet": "console.log('\\n‚ùå Failed Medical Tests:');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 40,
          "snippet": ".forEach(r => console.log(`  - ${r.test}`));"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 43,
          "snippet": "console.log('\\n=====================================\\n');"
        }
      ]
    },
    {
      "file": "e2e/utils/medical-helpers.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 152,
          "snippet": "const pc = (window as any).webrtcConnection;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 154,
          "snippet": "pc.getStats().then((stats: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 156,
          "snippet": "stats.forEach((report: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 187,
          "snippet": "const pc = (window as any).webrtcConnection;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 189,
          "snippet": "pc.getStats().then((stats: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 194,
          "snippet": "stats.forEach((report: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 255,
          "snippet": "if (!(window as any).medicalMetrics) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 256,
          "snippet": "(window as any).medicalMetrics = [];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 258,
          "snippet": "(window as any).medicalMetrics.push(metricData);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 304,
          "snippet": "if ((window as any).testPatients) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 305,
          "snippet": "delete (window as any).testPatients[patientId];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 332,
          "snippet": "return (window as any).medicalMetrics || [];"
        }
      ]
    },
    {
      "file": "eliminate-stubs.js",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 63,
          "snippet": "console.log(`  ‚úÖ Replaced ${replacements} occurrence(s) of \"${stub}\"`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 83,
          "snippet": "console.log(`\\nüìÅ Processing ${files.length} files in ${dir}...\\n`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 93,
          "snippet": "console.log(`\\nüìÑ Processing: ${relativePath}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 100,
          "snippet": "console.log('üöÄ STUB ELIMINATION SCRIPT');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 101,
          "snippet": "console.log('=========================\\n');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 109,
          "snippet": "console.log('\\n=========================');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 110,
          "snippet": "console.log('‚ú® SUMMARY:');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 111,
          "snippet": "console.log(`  Files modified: ${filesModified}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 112,
          "snippet": "console.log(`  Total replacements: ${totalReplacements}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 113,
          "snippet": "console.log('\\n‚úÖ Stub elimination complete!');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 116,
          "snippet": "console.log('\\nüóëÔ∏è  Stub files that can now be deleted:');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 122,
          "snippet": "console.log(`  rm ${file}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 125,
          "snippet": "console.log('\\nüí° Run the following command to delete all stub files:');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 126,
          "snippet": "console.log('  ' + stubFiles.map(f => `rm ${f}`).join(' && '));"
        }
      ]
    },
    {
      "file": "fix-logger-imports.cjs",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 30,
          "snippet": "console.log(`Fixed: ${file}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 35,
          "snippet": "console.log(`\\nFixed ${fixedCount} files with incorrect logger imports`);"
        }
      ]
    },
    {
      "file": "fix-modules-for-gemini.cjs",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 12,
          "snippet": "console.log('üîß FIXING MODULES FOR GEMINI\\n');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 21,
          "snippet": "console.log(`‚úÖ Fixing ${pkg} tsup config...`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 42,
          "snippet": "console.log('\\nüèóÔ∏è Rebuilding packages for dual compatibility...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 46,
          "snippet": "console.log('‚úÖ UI package rebuilt');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 49,
          "snippet": "console.log('‚úÖ Types package rebuilt');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 52,
          "snippet": "console.log('‚úÖ Hooks package rebuilt');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 55,
          "snippet": "console.log('‚ö†Ô∏è Some builds failed, continuing...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 59,
          "snippet": "console.log('\\nüß™ Testing CJS imports for Gemini...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 73,
          "snippet": "console.log(`‚úÖ ${pkg} CJS working`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 75,
          "snippet": "console.log(`‚ùå ${pkg} missing CJS build`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 78,
          "snippet": "console.log(`‚ö†Ô∏è ${pkg} CJS has issues: ${e.message}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 82,
          "snippet": "console.log('\\nüéØ READY FOR GEMINI!');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 83,
          "snippet": "console.log('Apps should now import packages without ES Module errors.');"
        }
      ]
    },
    {
      "file": "fix-user-type-for-gemini.cjs",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 11,
          "snippet": "console.log('üîß FIXING USER TYPE CONFLICTS FOR GEMINI\\n');"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 68,
          "snippet": "export function normalizeUser(user: any): User {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 82,
          "snippet": "console.log('‚úÖ Rewriting types/base.ts with unified User...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 149,
          "snippet": "console.log('‚úÖ Updated index.ts exports');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 152,
          "snippet": "console.log('üèóÔ∏è Rebuilding types package...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 157,
          "snippet": "console.log('‚úÖ Types package rebuilt successfully');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 159,
          "snippet": "console.log('‚ö†Ô∏è Types rebuild had issues, but exports should work');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 162,
          "snippet": "console.log('\\\\nüéØ USER TYPE FIXED FOR GEMINI!');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 163,
          "snippet": "console.log('');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 164,
          "snippet": "console.log('APPS CAN NOW USE:');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 165,
          "snippet": "console.log('- import { User } from \"@altamedica/types\" // Compatible con uid/id');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 166,
          "snippet": "console.log('- import { UserWithName } from \"@altamedica/types\" // Con name field');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 167,
          "snippet": "console.log('- normalizeUser() helper para conversi√≥n autom√°tica');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 168,
          "snippet": "console.log('');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 169,
          "snippet": "console.log('GEMINI: Prueba de nuevo apps/admin TypeScript check');"
        }
      ]
    },
    {
      "file": "functions/lib/marketplace.d.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 1,
          "snippet": "export declare const onApplicationAccepted: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 2,
          "snippet": "export declare const onContractCompleted: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 3,
          "snippet": "export declare const onDoctorReviewCreated: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 4,
          "snippet": "export declare const onCompanyReviewCreated: any;"
        }
      ]
    },
    {
      "file": "functions/lib/marketplace.js",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 51,
          "snippet": "console.log(`Contract ${contractRef.id} created for application ${context.params.applicationId}`);"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 52,
          "snippet": "// TODO: Send notifications to the company and the doctor"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 78,
          "snippet": "console.log(`Updated average rating for doctor ${doctorId} to ${averageRating}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 90,
          "snippet": "console.log(`Updated average rating for company ${companyId} to ${averageRating}`);"
        }
      ]
    },
    {
      "file": "functions/lib/notifications.d.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 1,
          "snippet": "export declare const sendMedicalNotification: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 2,
          "snippet": "export declare const sendBatchNotifications: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 3,
          "snippet": "export declare const scheduleAppointmentReminders: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 4,
          "snippet": "export declare const updateFCMToken: any;"
        }
      ]
    },
    {
      "file": "functions/lib/notifications.js",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 110,
          "snippet": "console.error('Error sending notification:', error);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 162,
          "snippet": "console.error('Error sending batch notifications:', error);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 237,
          "snippet": "console.error('Error scheduling reminders:', error);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 282,
          "snippet": "console.error('Error updating FCM token:', error);"
        }
      ]
    },
    {
      "file": "functions/lib/setCustomClaims.d.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 5,
          "snippet": "export declare const setCustomClaims: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 9,
          "snippet": "export declare const updateCustomClaims: any;"
        }
      ]
    },
    {
      "file": "functions/src/marketplace.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 30,
          "snippet": "console.log(`Contract ${contractRef.id} created for application ${context.params.applicationId}`);"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 32,
          "snippet": "// TODO: Send notifications to the company and the doctor"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 61,
          "snippet": "console.log(`Updated average rating for doctor ${doctorId} to ${averageRating}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 74,
          "snippet": "console.log(`Updated average rating for company ${companyId} to ${averageRating}`);"
        }
      ]
    },
    {
      "file": "functions/src/notifications.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 135,
          "snippet": "console.error('Error sending notification:', error)"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 195,
          "snippet": "console.error('Error sending batch notifications:', error)"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 281,
          "snippet": "console.error('Error scheduling reminders:', error)"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 334,
          "snippet": "console.error('Error updating FCM token:', error)"
        }
      ]
    },
    {
      "file": "gemini-claude-sync.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 162,
          "snippet": "| **TODO/FIXME** | 4,136 ocurrencias | 218 archivos | üî¥ CR√çTICA |"
        },
        {
          "pattern": "FIXME",
          "severity": "warn",
          "line": 162,
          "snippet": "| **TODO/FIXME** | 4,136 ocurrencias | 218 archivos | üî¥ CR√çTICA |"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 237,
          "snippet": "‚úÖ 1 √∫nico useAuth en todo el proyecto"
        }
      ]
    },
    {
      "file": "gemini-claude.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 40,
          "snippet": "- **Ventaja**: 1M tokens permite analizar todo el monorepo de una vez"
        }
      ]
    },
    {
      "file": "integration-health-check.cjs",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 25,
          "snippet": "console.log('üè• HEALTH CHECK DE INTEGRACI√ìN ALTAMEDICA\\n');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 26,
          "snippet": "console.log('='.repeat(42));"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 38,
          "snippet": "console.log('\\nüì¶ Verificando Packages (Claude Territory)...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 79,
          "snippet": "`node -e \"console.log(Object.keys(require('./${pkgPath}/dist/index.js')).length)\"`,"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 96,
          "snippet": "console.log(`  ${status} @altamedica/${pkg.name}: ${health.exportsCount} exports`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 101,
          "snippet": "console.log('\\nüöÄ Verificando Apps (Gemini Territory)...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 156,
          "snippet": "console.log(`  ${status} ${app} (port ${health.port})`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 161,
          "snippet": "console.log('\\nüîó Verificando Integraci√≥n Claude-Gemini...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 178,
          "snippet": "console.log(`  üìä Integration Score: ${this.results.integration.integrationScore}%`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 179,
          "snippet": "console.log(`  ‚ùå Missing exports: ${missingExports.length}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 180,
          "snippet": "console.log(`  ‚ö†Ô∏è  Unused exports: ${unusedExports.length}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 190,
          "snippet": "console.log('\\nüîç Verificando Dependencias Cr√≠ticas...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 210,
          "snippet": "console.log(`  ${hasLockfile ? '‚úÖ' : '‚ùå'} Lockfile presente`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 211,
          "snippet": "console.log(`  ${hasNodeModules ? '‚úÖ' : '‚ùå'} node_modules presente`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 267,
          "snippet": "console.log('\\n' + '='.repeat(42));"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 268,
          "snippet": "console.log('üìã RESUMEN DEL HEALTH CHECK\\n');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 277,
          "snippet": "console.log(`üèÜ HEALTH SCORE GENERAL: ${overallScore.toFixed(1)}%`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 278,
          "snippet": "console.log(`  üì¶ Packages (Claude): ${packagesScore.toFixed(1)}%`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 279,
          "snippet": "console.log(`  üöÄ Apps (Gemini): ${appsScore.toFixed(1)}%`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 280,
          "snippet": "console.log(`  üîó Integration: ${this.results.integration.integrationScore}%`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 283,
          "snippet": "console.log('\\n‚ùå PROBLEMAS CR√çTICOS:');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 285,
          "snippet": "console.log(`  ${i + 1}. ${issue}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 290,
          "snippet": "console.log('\\nüí° RECOMENDACIONES:');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 292,
          "snippet": "console.log(`  ${i + 1}. ${rec}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 299,
          "snippet": "console.log(`\\nüìÑ Reporte completo guardado en: ${reportPath}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 307,
          "snippet": "console.log('\\n‚úÖ Health check completado');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 309,
          "snippet": "console.error('‚ùå Error en health check:', error);"
        }
      ]
    },
    {
      "file": "monitor-claude.cjs",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 26,
          "snippet": "console.log(`üîÑ CLAUDE DETECTADO:\\n====================\\n  ${action}\\n  Worker: ü§ñ CLAUDE\\n`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 31,
          "snippet": "console.log('üëÅÔ∏è Monitoring Claude changes in real-time...');"
        }
      ]
    },
    {
      "file": "monitor-gemini.cjs",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 11,
          "snippet": "console.log('ü§ñ Monitor Claude-Gemini Collaboration');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 12,
          "snippet": "console.log('=====================================\\n');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 32,
          "snippet": "console.log('\\nüîÑ CAMBIOS DETECTADOS:');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 33,
          "snippet": "console.log('====================');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 53,
          "snippet": "console.log(`  [${timestamp}] ${action}: ${file}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 54,
          "snippet": "console.log(`  Worker: ${aiWorker}\\n`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 63,
          "snippet": "console.log('\\nüìä ESTADO ACTUAL DEL PROYECTO:');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 64,
          "snippet": "console.log('==============================');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 70,
          "snippet": "console.log('‚úÖ No hay cambios pendientes');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 90,
          "snippet": "console.log('\\nü§ñ Claude - Patients App & UI Fixes:');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 91,
          "snippet": "categories.patients.forEach(f => console.log(`  - ${f}`));"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 95,
          "snippet": "console.log('\\nüíé Gemini - Companies App & Marketplace:');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 96,
          "snippet": "categories.companies.forEach(f => console.log(`  - ${f}`));"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 100,
          "snippet": "console.log('\\nüì¶ Shared - Package Modifications:');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 101,
          "snippet": "categories.packages.forEach(f => console.log(`  - ${f}`));"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 105,
          "snippet": "console.log('\\nüîß Other Changes:');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 106,
          "snippet": "categories.other.forEach(f => console.log(`  - ${f}`));"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 116,
          "snippet": "console.log('\\n‚ö†Ô∏è  SUGGESTION: Too many changes detected!');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 117,
          "snippet": "console.log('   Consider committing current work to avoid conflicts');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 118,
          "snippet": "console.log('   Run: git add . && git commit -m \"WIP: AI collaborative work\"');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 126,
          "snippet": "console.log('\\nüëÅÔ∏è  Monitoring changes every 5 seconds...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 127,
          "snippet": "console.log('Press Ctrl+C to stop\\n');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 136,
          "snippet": "console.log('\\n\\nüõë Stopping monitor...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 138,
          "snippet": "console.log('\\n‚úÖ Monitor stopped. Happy coding! ü§ñüíé');"
        }
      ]
    },
    {
      "file": "packages/ai-agents/src/aiAgentsService.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 26,
          "snippet": "result?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 120,
          "snippet": "labResults?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 134,
          "snippet": "async analyzeSymptoms(patientId: string, symptoms: string[], additionalInfo?: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 145,
          "snippet": "async generatePrescription(patientId: string, diagnosis: string, patientInfo: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 156,
          "snippet": "async analyzeLabResults(patientId: string, labResults: any[]) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 167,
          "snippet": "async assessMedicalRisk(patientId: string, riskFactors: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 186,
          "snippet": "async diagnosticAssistance(patientId: string, context: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 209,
          "snippet": "labResults: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 242,
          "snippet": "async localDiagnosticPrototype(input: { patientId: string; context: any }) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 253,
          "snippet": "} catch (e: any) {"
        }
      ]
    },
    {
      "file": "packages/ai-agents/src/shims.d.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 3,
          "snippet": "startSession(input: any): { id: string };"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 5,
          "snippet": "submitAnswer(sessionId: string, questionId: string, answer: any): void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 6,
          "snippet": "generateReport(sessionId: string): any;"
        }
      ]
    },
    {
      "file": "packages/alta-agent/E2E-ARCHITECTURE.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 54,
          "snippet": "| Endpoint | M√©todo | Prop√≥sito | Autenticaci√≥n |"
        }
      ]
    },
    {
      "file": "packages/alta-agent/README.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 20,
          "snippet": "**NUEVO**: Alta ahora incluye un **Package Expert Agent** - Un agente experto que conoce TODO sobre los 26+ paquetes del monorepo AltaMedica, ayud√°ndote a encontrar la funcionalidad correcta y evitar duplicaci√≥n de c√≥digo."
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 144,
          "snippet": "console.log('Anamnesis completada:', summary);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 176,
          "snippet": "console.log(welcome.text); // \"Hola, soy Alta...\""
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 180,
          "snippet": "console.log(response.text); // Respuesta contextual de Alta"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 254,
          "snippet": "console.log('‚ö†Ô∏è Urgencia detectada:', data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 405,
          "snippet": "console.log(capabilities);"
        }
      ]
    },
    {
      "file": "packages/alta-agent/src/PackageExpertAgent.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 4,
          "snippet": "* Este agente conoce TODO sobre los 26+ paquetes del monorepo:"
        }
      ]
    },
    {
      "file": "packages/alta-agent/src/components/AltaChat.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 218,
          "snippet": "const SpeechRecognition = (window as any).webkitSpeechRecognition;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 227,
          "snippet": "recognition.onresult = (event: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 229,
          "snippet": ".map((result: any) => result[0].transcript)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 242,
          "snippet": "recognition.onerror = (event: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 259,
          "snippet": "const handleUrgencyDetected = (data: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 275,
          "snippet": "const handleSessionEnd = (data: any) => {"
        }
      ]
    },
    {
      "file": "packages/alta-agent/src/core/AltaAgent.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 22,
          "snippet": "// TODO: Mover SECCIONES_ANAMNESIS a @altamedica/types o crear un paquete separado"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 43,
          "snippet": "private medicalKnowledgeBase: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 251,
          "snippet": "private extractMedicalInfo(message: string): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 252,
          "snippet": "const medicalData: any = {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 288,
          "snippet": "medicalData: any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 507,
          "snippet": "protected addToHistory(speaker: 'alta' | 'patient', content: string, additionalData?: any): void {"
        }
      ]
    },
    {
      "file": "packages/alta-agent/src/core/AltaAgentWithAI.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 24,
          "snippet": "generateFollowUp(context: any): Promise<string[]>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 482,
          "snippet": "patientHistory?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 586,
          "snippet": "createVisualization(data: any, type: string): Promise<Visualization>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 599,
          "snippet": "data: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 614,
          "snippet": "attachments?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 627,
          "snippet": "patientProfile: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 645,
          "snippet": "options?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 649,
          "snippet": "value: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 675,
          "snippet": "data: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 716,
          "snippet": "language: (this as any).config.personality.language,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 717,
          "snippet": "specialtyContext: (this as any).config.personality.specialties || ['medicina-general'],"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 729,
          "snippet": "language: (this as any).config.personality.language,"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 751,
          "snippet": "// TODO: Cuando tengas el SDK real, reemplazar con:"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 840,
          "snippet": "generateFollowUp: async (context: any): Promise<string[]> => {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 850,
          "snippet": "// TODO: Cuando tengas el SDK real, reemplazar con:"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 893,
          "snippet": "difficulty: level as any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 905,
          "snippet": "createVisualization: async (data: any, type: string): Promise<Visualization> => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 907,
          "snippet": "type: type as any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 1051,
          "snippet": "if ((clinicalAnalysis as any)?.timeline?.length) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 1053,
          "snippet": "(clinicalAnalysis as any).timeline,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 1079,
          "snippet": "purpose: purpose as any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 1360,
          "snippet": "private formatHistory(history: any[]): string {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 1475,
          "snippet": "} as any;"
        }
      ]
    },
    {
      "file": "packages/alta-agent/src/core/communication/ResponseGenerator.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 105,
          "snippet": "private generateBaseMessage(context: string, config: ResponseConfig, data?: any): string {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 134,
          "snippet": "private generateDynamicResponse(context: string, config: ResponseConfig, data?: any): string {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 168,
          "snippet": "private formatDiagnosisResult(data: any, config: ResponseConfig): string {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 187,
          "snippet": "private formatTreatmentPlan(data: any, config: ResponseConfig): string {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 202,
          "snippet": "private formatFollowUp(data: any, config: ResponseConfig): string {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 223,
          "snippet": "private generateSuggestions(context: string, data?: any): string[] {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 244,
          "snippet": "private generateWarnings(context: string, data?: any): string[] {"
        }
      ]
    },
    {
      "file": "packages/alta-agent/src/index.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 84,
          "snippet": "(globalThis as any).altaAgent = packageExpert;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 85,
          "snippet": "(globalThis as any).agent = packageExpert;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 86,
          "snippet": "(globalThis as any).mcp = mcp;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 87,
          "snippet": "(globalThis as any).MCP = mcp;"
        }
      ]
    },
    {
      "file": "packages/alta-agent/src/logger.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 2,
          "snippet": "info: (message: string, data?: any) => {"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 4,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 5,
          "snippet": "console.log(`[INFO] ${message}`, data || '');"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 9,
          "snippet": "warn: (message: string, data?: any) => {"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 11,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 12,
          "snippet": "console.warn(`[WARN] ${message}`, data || '');"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 16,
          "snippet": "error: (message: string, data?: any) => {"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 18,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 19,
          "snippet": "console.error(`[ERROR] ${message}`, data || '');"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 23,
          "snippet": "debug: (message: string, data?: any) => {"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 25,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 26,
          "snippet": "console.log(`[DEBUG] ${message}`, data || '');"
        }
      ]
    },
    {
      "file": "packages/alta-agent/src/mcp/APIMCP.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 244,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 249,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 254,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 259,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/alta-agent/src/mcp/BaseMCP.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 250,
          "snippet": "* M√©todo abstracto para obtener ayuda espec√≠fica"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 255,
          "snippet": "* M√©todo abstracto para generar c√≥digo de ejemplo"
        }
      ]
    },
    {
      "file": "packages/alta-agent/src/mcp/UnifiedMCP.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 17,
          "snippet": "agent: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 69,
          "snippet": "getAgent(system: string): any {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 105,
          "snippet": "// PackageExpert tiene m√©todo diferente"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 115,
          "snippet": "/* eslint-disable no-console */"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 118,
          "snippet": "console.log = (msg: any) => { output += msg + '\\n'; };"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 275,
          "snippet": "(globalThis as any).mcp = mcp;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 276,
          "snippet": "(globalThis as any).MCP = mcp;"
        }
      ]
    },
    {
      "file": "packages/alta-agent/src/types/alta.types.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 114,
          "snippet": "entities?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 115,
          "snippet": "insights?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 190,
          "snippet": "data?: any;"
        }
      ]
    },
    {
      "file": "packages/anamnesis/src/components/HistoriaMedicaComponent.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 3,
          "snippet": "// TODO(MIGRATION): Revisar estilos y accesibilidad en contexto definitivo."
        }
      ]
    },
    {
      "file": "packages/anamnesis/src/components/PreguntaInteractiva.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 8,
          "snippet": "interface PreguntaInteractivaProps { pregunta: PreguntaAnamnesis; onResponder: (respuesta: RespuestaAnamnesis) => void; respuestaPrevia?: any }"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 20,
          "snippet": "if (props.pregunta.validacion) { const r = props.pregunta.validacion(valor as any); if (typeof r === 'string') { setError(r); return } else if (!r) { setError('Valor inv√°lido'); return } }"
        }
      ]
    },
    {
      "file": "packages/anamnesis/src/components/UnifiedAnamnesis.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 46,
          "snippet": "validation?: (value: any) => boolean;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 53,
          "snippet": "value: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 263,
          "snippet": "const handleResponse = (questionId: string, value: any) => {"
        }
      ]
    },
    {
      "file": "packages/anamnesis/src/hooks/useAnamnesis.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 59,
          "snippet": "responderPregunta: (preguntaId: string, valor: any) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 95,
          "snippet": "const id = patientId || (auth?.user as any)?.id;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 185,
          "snippet": "if (!id || !(auth as any)?.token) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 197,
          "snippet": "'Authorization': `Bearer ${(auth as any).token}`"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 215,
          "snippet": "}, [id, (auth as any)?.token]);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 219,
          "snippet": "if (!id || !(auth as any)?.token) return;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 232,
          "snippet": "'Authorization': `Bearer ${(auth as any).token}`,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 249,
          "snippet": "}, [id, (auth as any)?.token, progreso, completionPercentage, mode, onSave]);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 252,
          "snippet": "const responderPregunta = useCallback((preguntaId: string, valor: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 262,
          "snippet": "tipo: (preguntaActual as any)?.type || 'text'"
        }
      ]
    },
    {
      "file": "packages/anamnesis/src/types/anamnesis.types.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 2,
          "snippet": "// TODO(MIGRATION): Unificar con @altamedica/types si procede."
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 24,
          "snippet": "validacion?: (valor: any) => boolean | string"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 30,
          "snippet": "respuesta?: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 31,
          "snippet": "valor?: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 107,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 114,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 122,
          "snippet": "[key: string]: any;"
        }
      ]
    },
    {
      "file": "packages/api-client/src/base-types.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 12,
          "snippet": "details?: any;"
        }
      ]
    },
    {
      "file": "packages/api-client/src/cache/strategies.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 293,
          "snippet": "// Tambi√©n limpiar todo el cache por seguridad"
        }
      ]
    },
    {
      "file": "packages/api-client/src/client.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 136,
          "snippet": "public post<T = any>(endpoint: string, data?: any, options?: RequestOptions): Promise<T> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 144,
          "snippet": "public put<T = any>(endpoint: string, data?: any, options?: RequestOptions): Promise<T> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 152,
          "snippet": "public patch<T = any>(endpoint: string, data?: any, options?: RequestOptions): Promise<T> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 194,
          "snippet": "return response.text() as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 198,
          "snippet": "return response as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 205,
          "snippet": "let errorData: any = {};"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 253,
          "snippet": "private normalizeError(error: any): ApiError {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 283,
          "snippet": "private isRetryableError(error: any): boolean {"
        }
      ]
    },
    {
      "file": "packages/api-client/src/errors.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 11,
          "snippet": "public details?: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 36,
          "snippet": "constructor(message: string, public errors: any[] = []) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 78,
          "snippet": "export function isApiError(error: any): error is ApiError {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 82,
          "snippet": "export function isNetworkError(error: any): error is NetworkError {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 86,
          "snippet": "export function isValidationError(error: any): error is ValidationError {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 90,
          "snippet": "export function isAuthenticationError(error: any): error is AuthenticationError {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 94,
          "snippet": "export function isAuthorizationError(error: any): error is AuthorizationError {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 98,
          "snippet": "export function isNotFoundError(error: any): error is NotFoundError {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 102,
          "snippet": "export function isRateLimitError(error: any): error is RateLimitError {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 106,
          "snippet": "export function isServerError(error: any): error is ServerError {"
        }
      ]
    },
    {
      "file": "packages/api-client/src/hooks/__tests__/useAppointments.test.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 95,
          "snippet": "vi.mocked(createApiClient).mockReturnValue(mockApiClient as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 119,
          "snippet": "vi.mocked(createApiClient).mockReturnValue(mockApiClient as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 163,
          "snippet": "vi.mocked(createApiClient).mockReturnValue(mockApiClient as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 220,
          "snippet": "vi.mocked(createApiClient).mockReturnValue(mockApiClient as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 252,
          "snippet": "vi.mocked(createApiClient).mockReturnValue(mockApiClient as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 299,
          "snippet": "vi.mocked(createApiClient).mockReturnValue(mockApiClient as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 338,
          "snippet": "vi.mocked(createApiClient).mockReturnValue(mockApiClient as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 372,
          "snippet": "vi.mocked(createApiClient).mockReturnValue(mockApiClient as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 407,
          "snippet": "vi.mocked(createApiClient).mockReturnValue(mockApiClient as any);"
        }
      ]
    },
    {
      "file": "packages/api-client/src/hooks/__tests__/useAuth.test.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 70,
          "snippet": "vi.mocked(createApiClient).mockReturnValue(mockApiClient as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 101,
          "snippet": "vi.mocked(createApiClient).mockReturnValue(mockApiClient as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 140,
          "snippet": "vi.mocked(createApiClient).mockReturnValue(mockApiClient as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 164,
          "snippet": "vi.mocked(createApiClient).mockReturnValue(mockApiClient as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 185,
          "snippet": "vi.mocked(createApiClient).mockReturnValue(mockApiClient as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 227,
          "snippet": "vi.mocked(createApiClient).mockReturnValue(mockApiClient as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 262,
          "snippet": "vi.mocked(createApiClient).mockReturnValue(mockApiClient as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 327,
          "snippet": "vi.mocked(createApiClient).mockReturnValue(mockApiClient as any);"
        }
      ]
    },
    {
      "file": "packages/api-client/src/hooks/__tests__/useOptimisticAppointments.test.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 87,
          "snippet": "vi.mocked(createApiClient).mockReturnValue(mockApiClient as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 136,
          "snippet": "const cacheData = queryClient.getQueryData(['appointments']) as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 140,
          "snippet": "expect(cacheData.data.find((apt: any) => apt.id === 'real-123')).toBeTruthy();"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 141,
          "snippet": "expect(cacheData.data.find((apt: any) => apt.id.startsWith('temp-'))).toBeFalsy();"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 156,
          "snippet": "vi.mocked(createApiClient).mockReturnValue(mockApiClient as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 208,
          "snippet": "const cacheData = queryClient.getQueryData(['appointments']) as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 220,
          "snippet": "vi.mocked(createApiClient).mockReturnValue(mockApiClient as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 257,
          "snippet": "const cacheData = queryClient.getQueryData(['appointments']) as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 273,
          "snippet": "vi.mocked(createApiClient).mockReturnValue(mockApiClient as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 316,
          "snippet": "const cacheData = queryClient.getQueryData(['appointments']) as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 333,
          "snippet": "vi.mocked(createApiClient).mockReturnValue(mockApiClient as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 379,
          "snippet": "const listCache = queryClient.getQueryData(['appointments']) as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 384,
          "snippet": "const detailCache = queryClient.getQueryData(['appointments', 'apt-123']) as any;"
        }
      ]
    },
    {
      "file": "packages/api-client/src/hooks/optimistic/useOptimisticAppointments.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 50,
          "snippet": "queryClient.setQueryData(['appointments'], (old: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 82,
          "snippet": "queryClient.setQueryData(['appointments'], (old: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 119,
          "snippet": "queryClient.setQueryData(['appointments'], (old: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 188,
          "snippet": "queryClient.setQueryData(['appointments', id], (old: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 199,
          "snippet": "queryClient.setQueryData(['appointments'], (old: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 284,
          "snippet": "queryClient.setQueryData(['appointments', id], (old: any) =>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 288,
          "snippet": "queryClient.setQueryData(['appointments'], (old: any) => {"
        }
      ]
    },
    {
      "file": "packages/api-client/src/hooks/useAnalytics.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 198,
          "snippet": "details: any;"
        }
      ]
    },
    {
      "file": "packages/api-client/src/hooks/useAuth.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 91,
          "snippet": "// Limpiar todo el cach√©"
        }
      ]
    },
    {
      "file": "packages/api-client/src/hooks/useTelemedicine.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 73,
          "snippet": "// TODO: Fix refetchInterval callback typing"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 244,
          "snippet": "(window as any).RTCPeerConnection"
        }
      ]
    },
    {
      "file": "packages/api-client/src/test-setup.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 26,
          "snippet": "(globalThis as any).localStorage = localStorageMock;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 35,
          "snippet": "(globalThis as any).sessionStorage = sessionStorageMock;"
        }
      ]
    },
    {
      "file": "packages/api-client/src/types.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 12,
          "snippet": "details?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 101,
          "snippet": "details?: any[];"
        }
      ]
    },
    {
      "file": "packages/api-helpers/src/response-helpers.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 6,
          "snippet": "info: (message: any, data?: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 8,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 11,
          "snippet": "warn: (message: any, data?: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 13,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 16,
          "snippet": "error: (message: any, data?: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 18,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 21,
          "snippet": "debug: (message: any, data?: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 23,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 53,
          "snippet": "info: (message: string, data?: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 56,
          "snippet": "error: (message: string, error?: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 59,
          "snippet": "warn: (message: string, data?: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 62,
          "snippet": "debug: (message: string, data?: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 99,
          "snippet": "export const validatePagination = (params: any): Required<PaginationParams> => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 126,
          "snippet": "export const successResponse = (data: any, message?: string, meta?: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 135,
          "snippet": "export const createSuccessResponse = (data: any, message?: string, meta?: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 184,
          "snippet": "return async (...args: any[]) => {"
        }
      ]
    },
    {
      "file": "packages/auth/src/components/AuthGuard.jsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 2,
          "snippet": "// TODO: Definir UserRole en @altamedica/types"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 19,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 20,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 25,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 26,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 31,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 32,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 37,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 38,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/auth/src/components/AuthGuard.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 3,
          "snippet": "// TODO: Definir UserRole en @altamedica/types"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 20,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 21,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 26,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 27,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 32,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 33,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 38,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 39,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 153,
          "snippet": "const log = (message: string, data?: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 294,
          "snippet": "const errMsg = typeof error === 'string' ? error : (error as any).message || 'Error';"
        }
      ]
    },
    {
      "file": "packages/auth/src/components/index.js",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 9,
          "snippet": "// TODO: Futuros componentes a agregar"
        }
      ]
    },
    {
      "file": "packages/auth/src/components/index.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 14,
          "snippet": "// TODO: Futuros componentes a agregar"
        }
      ]
    },
    {
      "file": "packages/auth/src/context/AuthContext.tsx",
      "matches": [
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 19,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 20,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 25,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 26,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 31,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 32,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 37,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 38,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 131,
          "snippet": "? (window as any).NEXT_PUBLIC_API_URL || 'http://localhost:3001'"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 220,
          "snippet": "const firebaseGlobal = (window as any).firebase;"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 400,
          "snippet": "// Si no hay sesi√≥n v√°lida, limpiar todo"
        }
      ]
    },
    {
      "file": "packages/auth/src/firebase-admin.ts",
      "matches": [
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 8,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 9,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 14,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 15,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 20,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 21,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 26,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 27,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 98,
          "snippet": "createCustomToken: async (uid: string, claims?: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 110,
          "snippet": "} as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 126,
          "snippet": "export async function createCustomToken(uid: string, claims?: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 131,
          "snippet": "export async function setCustomUserClaims(uid: string, claims: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 151,
          "snippet": "export async function updateUser(uid: string, properties: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 156,
          "snippet": "export async function createUser(properties: any) {"
        }
      ]
    },
    {
      "file": "packages/auth/src/hooks/useAuth.jsx",
      "matches": [
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 16,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 17,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 22,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 23,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 28,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 29,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 34,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 35,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 407,
          "snippet": "// Exportar todo"
        }
      ]
    },
    {
      "file": "packages/auth/src/hooks/useAuth.tsx",
      "matches": [
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 26,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 27,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 32,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 33,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 38,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 39,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 44,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 45,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 223,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 258,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 293,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 322,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 355,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 518,
          "snippet": "export function useRole(requiredRole: any): any {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 527,
          "snippet": "// Exportar todo"
        }
      ]
    },
    {
      "file": "packages/auth/src/index.js",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 13,
          "snippet": "// Re-export todo desde client.ts para mantener compatibilidad con imports existentes"
        }
      ]
    },
    {
      "file": "packages/auth/src/mfa.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 89,
          "snippet": "const opts: any = authenticator.options || {};"
        }
      ]
    },
    {
      "file": "packages/auth/src/middleware/auth-guard.js",
      "matches": [
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 12,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 13,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 18,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 19,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 24,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 25,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 30,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 31,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/auth/src/middleware/auth-guard.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 12,
          "snippet": "info: (message: string, data?: any) => {"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 14,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 15,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 18,
          "snippet": "warn: (message: string, data?: any) => {"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 20,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 21,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 24,
          "snippet": "error: (message: string, data?: any) => {"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 26,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 27,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 30,
          "snippet": "debug: (message: string, data?: any) => {"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 32,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 33,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/auth/src/services/AuthService.js",
      "matches": [
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 13,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 14,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 19,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 20,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 25,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 26,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 31,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 32,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 36,
          "snippet": "// TODO: Definir UserRole en @altamedica/types"
        }
      ]
    },
    {
      "file": "packages/auth/src/services/AuthService.ts",
      "matches": [
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 28,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 29,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 34,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 35,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 40,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 41,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 46,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 47,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 51,
          "snippet": "// TODO: Definir UserRole en @altamedica/types"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 185,
          "snippet": "if ((data.role as any) === 'admin') {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 228,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 258,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 268,
          "snippet": "let credential: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 271,
          "snippet": "} catch (popupError: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 332,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 353,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 403,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 415,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 448,
          "snippet": "const authUpdates: any = {};"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 461,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 601,
          "snippet": "private handleAuthError(error: any): Error {"
        }
      ]
    },
    {
      "file": "packages/auth/src/services/mfa.service.ts",
      "matches": [
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 13,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 14,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 19,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 20,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 25,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 26,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 31,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 32,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 238,
          "snippet": "// TODO: Implementar bloqueo en base de datos"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 249,
          "snippet": "// TODO: Implementar verificaci√≥n en base de datos"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 280,
          "snippet": "// TODO: Implementar reset en base de datos"
        }
      ]
    },
    {
      "file": "packages/auth/src/test/edward-validation-test.ts",
      "matches": [
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 12,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 13,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 18,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 19,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 24,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 25,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 30,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 31,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 165,
          "snippet": "(window as any).runEdwardTests = runEdwardTests;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 166,
          "snippet": "(window as any).analyzeEdward = analyzeEdward;"
        }
      ]
    },
    {
      "file": "packages/auth/src/test/quick-consonant-test.js",
      "matches": [
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 6,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 7,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 12,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 13,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 18,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 19,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 24,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 25,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/auth/src/types/validation-types.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 17,
          "snippet": "custom?: (value: any) => boolean | string;"
        }
      ]
    },
    {
      "file": "packages/auth/src/types.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 2,
          "snippet": "// TODO: Definir UserRole en @altamedica/types"
        }
      ]
    },
    {
      "file": "packages/auth/src/utils/index.ts",
      "matches": [
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 7,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 8,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 13,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 14,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 19,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 20,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 25,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 26,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 65,
          "snippet": "static saveUserData(userData: any): void {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 73,
          "snippet": "static getUserData(): any | null {"
        }
      ]
    },
    {
      "file": "packages/auth/src/validators/README.md",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 147,
          "snippet": "console.log(result);"
        }
      ]
    },
    {
      "file": "packages/auth/src/validators/form-integration.ts",
      "matches": [
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 277,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 278,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 283,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 284,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 289,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 290,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 295,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 296,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 308,
          "snippet": "// Exportar todo lo necesario"
        }
      ]
    },
    {
      "file": "packages/auth/src/validators/index.ts",
      "matches": [
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 114,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 115,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 120,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 121,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 126,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 127,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 132,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 133,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/auth/src/validators/name-validators.ts",
      "matches": [
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 6,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 7,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 12,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 13,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 18,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 19,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 24,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 25,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 416,
          "snippet": "// No debe ser todo may√∫sculas (excepto si es muy corto)"
        }
      ]
    },
    {
      "file": "packages/config-next/src/index.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 95,
          "snippet": "webpack?: (config: any, options: any) => any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 185,
          "snippet": "webpack: (config: any, options: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 189,
          "snippet": "apply: (compiler: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 190,
          "snippet": "compiler.hooks.compilation.tap('ChunkErrorHandler', (compilation: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 193,
          "snippet": "(data: any, cb: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 329,
          "snippet": "function applyTelemedicineProfile(cfg: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 349,
          "snippet": "function applyMarketplaceProfile(cfg: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 375,
          "snippet": "function applyAdminSensitiveProfile(cfg: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 403,
          "snippet": "export function withProfile(baseConfig: any, profile?: ProfileOptions['profile']): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 406,
          "snippet": "baseConfig.webpack = (config: any, options: any) => {"
        }
      ]
    },
    {
      "file": "packages/database/README.md",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 40,
          "snippet": "console.log('Database Status:', db.healthCheck.status);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 41,
          "snippet": "console.log('Available Services:', db.healthCheck.services);"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 135,
          "snippet": "‚îú‚îÄ‚îÄ services/                      # TODO: Service layer"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 136,
          "snippet": "‚îú‚îÄ‚îÄ security/                      # TODO: HIPAA & security"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 137,
          "snippet": "‚îú‚îÄ‚îÄ cache/                         # TODO: Cache layer"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 138,
          "snippet": "‚îú‚îÄ‚îÄ monitoring/                    # TODO: Monitoring tools"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 246,
          "snippet": "console.log('Has more:', results.hasMore);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 247,
          "snippet": "console.log('Next cursor:', results.cursor);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 274,
          "snippet": "console.log('Average query time:', metrics.avgQueryTime, 'ms');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 361,
          "snippet": "console.warn('üêå Slow query detected', {"
        }
      ]
    },
    {
      "file": "packages/database/src/cache/index.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 6,
          "snippet": "// TODO: Implement cache layer"
        }
      ]
    },
    {
      "file": "packages/database/src/core/DatabaseConnection.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 73,
          "snippet": "environment: (process.env.NODE_ENV as any) || 'development'"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 199,
          "snippet": "} as any);"
        }
      ]
    },
    {
      "file": "packages/database/src/examples/audit-usage-example.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 14,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 19,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 24,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 29,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 125,
          "snippet": "resource: resource as any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 204,
          "snippet": "resource: attemptedResource as any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 295,
          "snippet": "return async (req: any, res: any, next: any) => {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 407,
          "snippet": "// 3. Si todo va bien, el audit log ya est√° registrado"
        }
      ]
    },
    {
      "file": "packages/database/src/firebase/config.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 3,
          "snippet": "* Configuraci√≥n centralizada de Firebase para todo el ecosistema AltaMedica"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 15,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 20,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 25,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 30,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 116,
          "snippet": "if (currentAuth && !(currentAuth as any)?.config?.emulator) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 124,
          "snippet": "const isEmulated = (currentDb as any)?._settings?.host?.includes?.('localhost') || (currentDb as any)?._delegate?._settings?.host?.includes?.('localhost')"
        }
      ]
    },
    {
      "file": "packages/database/src/firestore/audit-collection.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 8,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 13,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 18,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 23,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/database/src/index.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 66,
          "snippet": "info: (message: string, data?: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 68,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 71,
          "snippet": "error: (message: string, data?: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 73,
          "snippet": "console.error(message, data);"
        }
      ]
    },
    {
      "file": "packages/database/src/migrations/001_create_audit_logs.firestore.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 14,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 19,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 24,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 29,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/database/src/migrations/001_create_audit_logs.postgresql.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 14,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 19,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 24,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 29,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/database/src/migrations/index.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 14,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 19,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 24,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 29,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/database/src/monitoring/index.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 6,
          "snippet": "// TODO: Implement monitoring layer"
        }
      ]
    },
    {
      "file": "packages/database/src/repositories/AppointmentRepository.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 212,
          "snippet": "const created = await this.create(appointmentData as any, context);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 246,
          "snippet": "const updateData: any = {"
        }
      ]
    },
    {
      "file": "packages/database/src/repositories/AuditLogRepository.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 147,
          "snippet": "const invalidLog: any = {"
        }
      ]
    },
    {
      "file": "packages/database/src/repositories/AuditLogRepository.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 18,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 23,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 28,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 33,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 181,
          "snippet": "private async createEmergencyLog(originalData: any, error: Error): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 245,
          "snippet": "private async findManyInternal(options?: any): Promise<AuditLog[]> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 367,
          "snippet": "public async count(options?: { where?: any }): Promise<{ success: boolean; data?: number; error?: string }> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 428,
          "snippet": "private async getStatsInternal(options?: any): Promise<any> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 630,
          "snippet": "public async findByField(field: string, value: any): Promise<{ success: boolean; data?: AuditLog[] }> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 662,
          "snippet": "private firestoreDocToAuditLog(doc: any): AuditLog {"
        }
      ]
    },
    {
      "file": "packages/database/src/repositories/BaseRepository.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 16,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 21,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 26,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 31,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 101,
          "snippet": "protected validateData(data: any, isPartial: boolean = false): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 106,
          "snippet": "? (this.entitySchema as any).partial()"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 128,
          "snippet": "protected async logAudit(action: string, entityId: string, context: ServiceContext, metadata?: any): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 401,
          "snippet": "data?: any;"
        }
      ]
    },
    {
      "file": "packages/database/src/repositories/CompanyRepository.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 15,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 20,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 25,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 30,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 329,
          "snippet": "(data as any).email = data.email.toLowerCase();"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 333,
          "snippet": "(data as any).marketplaceInfo = {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 361,
          "snippet": "(data as any).email = data.email.toLowerCase();"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 372,
          "snippet": "delete (data.marketplaceInfo as any).verificationStatus;"
        }
      ]
    },
    {
      "file": "packages/database/src/repositories/DoctorRepository.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 207,
          "snippet": "} as any, context);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 220,
          "snippet": "} as any, context);"
        }
      ]
    },
    {
      "file": "packages/database/src/repositories/MarketplaceRepository.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 14,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 19,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 24,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 29,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 313,
          "snippet": "// TODO: Implement proper status change method in base repository"
        }
      ]
    },
    {
      "file": "packages/database/src/repositories/MedicalRecordRepository.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 15,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 20,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 25,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 30,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 342,
          "snippet": "(data as any).recordNumber = `MR-${timestamp}-${data.patientId.slice(-4)}`;"
        }
      ]
    },
    {
      "file": "packages/database/src/repositories/PatientRepository.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 15,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 20,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 25,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 30,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 395,
          "snippet": "(data as any).patientNumber = `P-${timestamp.toString().slice(-6)}`;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 399,
          "snippet": "(data as any).email = data.email.toLowerCase();"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 415,
          "snippet": "(data as any).email = data.email.toLowerCase();"
        }
      ]
    },
    {
      "file": "packages/database/src/repositories/index.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 29,
          "snippet": "// TODO: Add more repositories as they are implemented"
        }
      ]
    },
    {
      "file": "packages/database/src/security/index.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 6,
          "snippet": "// TODO: Implement security layer"
        }
      ]
    },
    {
      "file": "packages/database/src/services/PatientService.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 8,
          "snippet": "info: (message: string, data?: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 10,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 13,
          "snippet": "warn: (message: string, data?: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 15,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 18,
          "snippet": "error: (message: string, data?: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 20,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 23,
          "snippet": "debug: (message: string, data?: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 25,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/database/src/services/index.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 48,
          "snippet": "// TODO: Implement additional service layer"
        }
      ]
    },
    {
      "file": "packages/database/src/services/transaction.service.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 48,
          "snippet": "console.log(`Transaction completed successfully in ${Date.now() - startTime}ms`);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 57,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 63,
          "snippet": "console.log(`Transaction failed, retrying (${retryCount}/${maxRetries})...`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 73,
          "snippet": "console.error('Transaction failed:', error);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 101,
          "snippet": "const results: any[] = [];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 102,
          "snippet": "const errors: any[] = [];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 139,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 142,
          "snippet": "results: [] as any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 169,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 193,
          "snippet": "const errors: any[] = [];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 243,
          "snippet": "private static isRetryableError(error: any): boolean {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 266,
          "snippet": "private static formatError(error: any): string {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 293,
          "snippet": "details?: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 310,
          "snippet": "static withTransaction<T extends (...args: any[]) => Promise<any>>("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 329,
          "snippet": "const proxy = new Proxy(repository as any, {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 334,
          "snippet": "return async (...args: any[]) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 382,
          "snippet": "errors: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 398,
          "snippet": "errors: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 413,
          "snippet": "details?: any;"
        }
      ]
    },
    {
      "file": "packages/database/src/test/audit-test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 136,
          "snippet": "const result = await auditRepo.create(auditLog as any);"
        }
      ]
    },
    {
      "file": "packages/firebase/src/admin-server.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 8,
          "snippet": "let adminApp: any = null;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 9,
          "snippet": "let adminAuth: any = null;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 10,
          "snippet": "let adminDb: any = null;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 11,
          "snippet": "let adminStorage: any = null;"
        }
      ]
    },
    {
      "file": "packages/firebase/src/config-production.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 22,
          "snippet": "let app: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 23,
          "snippet": "let auth: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 24,
          "snippet": "let db: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 25,
          "snippet": "let storage: any;"
        }
      ]
    },
    {
      "file": "packages/firebase/src/config.js",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 22,
          "snippet": "console.warn('Failed to initialize Firebase Performance:', error);"
        }
      ]
    },
    {
      "file": "packages/firebase/src/config.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 17,
          "snippet": "let performance: any = null;"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 28,
          "snippet": "console.warn('Failed to initialize Firebase Performance:', error);"
        }
      ]
    },
    {
      "file": "packages/firebase/src/security/medical-audit.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 32,
          "snippet": "timestamp: any; // Firestore ServerTimestamp"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 101,
          "snippet": "userRole: user.role as any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 216,
          "snippet": "private detectSecurityFlags(access: any, user: any, context: any): string[] {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 266,
          "snippet": "private isHIPAACompliant(access: any, user: any): boolean {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 294,
          "snippet": "private async reportAuditFailure(error: any, context: any): Promise<void> {"
        }
      ]
    },
    {
      "file": "packages/firebase/src/utils/logger.js",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 6,
          "snippet": "info: (...args) => console.log(...args),"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 7,
          "snippet": "warn: (...args) => console.warn(...args),"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 8,
          "snippet": "error: (...args) => console.error(...args),"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 9,
          "snippet": "debug: (...args) => console.debug(...args),"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 10,
          "snippet": "fatal: (...args) => console.error('[FATAL]', ...args),"
        }
      ]
    },
    {
      "file": "packages/firebase/src/utils/logger.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 6,
          "snippet": "info: (...args: any[]) => console.log(...args),"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 6,
          "snippet": "info: (...args: any[]) => console.log(...args),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 7,
          "snippet": "warn: (...args: any[]) => console.warn(...args),"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 7,
          "snippet": "warn: (...args: any[]) => console.warn(...args),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 8,
          "snippet": "error: (...args: any[]) => console.error(...args),"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 8,
          "snippet": "error: (...args: any[]) => console.error(...args),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 9,
          "snippet": "debug: (...args: any[]) => console.debug(...args),"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 9,
          "snippet": "debug: (...args: any[]) => console.debug(...args),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 10,
          "snippet": "fatal: (...args: any[]) => console.error('[FATAL]', ...args),"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 10,
          "snippet": "fatal: (...args: any[]) => console.error('[FATAL]', ...args),"
        }
      ]
    },
    {
      "file": "packages/hooks/HOOKS_ARCHITECTURE_MAP.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 27,
          "snippet": "‚îÇ   ‚îú‚îÄ‚îÄ üìÑ index.ts        # Interruptor principal - exporta TODO"
        }
      ]
    },
    {
      "file": "packages/hooks/README.md",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 139,
          "snippet": "console.log('Patient updated:', update);"
        }
      ]
    },
    {
      "file": "packages/hooks/src/api/types.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 24,
          "snippet": "details?: any;"
        }
      ]
    },
    {
      "file": "packages/hooks/src/api/useAltamedicaAPI.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 13,
          "snippet": "info: (...args: any[]) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 15,
          "snippet": "console.log(...args);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 18,
          "snippet": "warn: (...args: any[]) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 20,
          "snippet": "console.warn(...args);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 23,
          "snippet": "error: (...args: any[]) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 25,
          "snippet": "console.error(...args);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 28,
          "snippet": "debug: (...args: any[]) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 30,
          "snippet": "console.debug(...args);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 174,
          "snippet": "const signInWithEmailAndPassword = (auth: any, email: string, password: string) =>"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 202,
          "snippet": "const signOut = (auth: any) => Promise.resolve();"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 247,
          "snippet": "async createPatient(data: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 254,
          "snippet": "async updatePatient(id: string, data: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 293,
          "snippet": "async createAppointment(data: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 300,
          "snippet": "async updateAppointment(id: string, data: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 336,
          "snippet": "async createMedicalRecord(data: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 343,
          "snippet": "async updateMedicalRecord(id: string, data: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 368,
          "snippet": "async createPrescription(data: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 393,
          "snippet": "async createTelemedicineSession(data: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 400,
          "snippet": "async joinTelemedicineSession(sessionId: string, participantData: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 414,
          "snippet": "async analyzeSymptoms(symptoms: string[], patientInfo?: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 436,
          "snippet": "async createPayment(data: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 479,
          "snippet": "async search(query: string, type?: string, filters?: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 506,
          "snippet": "async createVitalSigns(patientId: string, data: any) {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 513,
          "snippet": "// üîç M√âTODO DE TESTING"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 584,
          "snippet": "dependencies: any[] = []"
        }
      ]
    },
    {
      "file": "packages/hooks/src/api/useB2CCommunication.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 8,
          "snippet": "// TODO: Import from @altamedica/types once these types are defined there"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 85,
          "snippet": "subscribeToUpdates: (callback: (event: any) => void) => () => void;"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 87,
          "snippet": "// TODO: Import from @altamedica/database once services are available"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 125,
          "snippet": "subscribeToUpdates: (key: string, callback: (data: any) => void) => ({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 128,
          "snippet": "subscribeToApplicationUpdates: (callback: (data: any) => void) => ({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 131,
          "snippet": "subscribeToNotifications: (callback: (data: any) => void) => ({"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 236,
          "snippet": "// TODO: Implement updateInterview in service"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 313,
          "snippet": "// TODO: Implement doctor search in service"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 318,
          "snippet": "// TODO: Implement company search in service"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 326,
          "snippet": "const subscribeToUpdates = useCallback((callback: (event: any) => void) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 329,
          "snippet": "(updatedApplications: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 340,
          "snippet": "(updatedNotifications: any) => {"
        }
      ]
    },
    {
      "file": "packages/hooks/src/api/useCompanies.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 12,
          "snippet": "// TODO: These types need to be defined in @altamedica/types"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 98,
          "snippet": "// TODO: Update to use @altamedica/database services"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 112,
          "snippet": "// TODO: Update to use @altamedica/database services"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 127,
          "snippet": "// TODO: Update to use @altamedica/database services"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 154,
          "snippet": "// TODO: Update to use @altamedica/database services"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 169,
          "snippet": "// TODO: Update to use @altamedica/database services"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 205,
          "snippet": "// TODO: Update to use @altamedica/database services"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 222,
          "snippet": "// TODO: Update to use @altamedica/database services"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 253,
          "snippet": "// TODO: Update to use @altamedica/database services"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 354,
          "snippet": "// TODO: Update to use @altamedica/database services"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 366,
          "snippet": "// TODO: Update to use @altamedica/database services"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 397,
          "snippet": "// TODO: Update to use @altamedica/database services"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 415,
          "snippet": "// TODO: Update to use @altamedica/database services"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 426,
          "snippet": "queryClient.setQueryData(['company', id], (old: any) => ({"
        }
      ]
    },
    {
      "file": "packages/hooks/src/auth/AuthProvider.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 13,
          "snippet": "info: (message: any, data?: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 15,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 18,
          "snippet": "warn: (message: any, data?: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 20,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 23,
          "snippet": "error: (message: any, data?: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 25,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 28,
          "snippet": "debug: (message: any, data?: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 30,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 48,
          "snippet": "login: (credentials: any) => Promise<User>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 50,
          "snippet": "register: (data: any) => Promise<User>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 95,
          "snippet": "authState: (auth as any).authState || 'idle',"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 97,
          "snippet": "tokens: (auth as any).tokens || null,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 103,
          "snippet": "login: async (credentials: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 108,
          "snippet": "register: async (data: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 112,
          "snippet": "refreshToken: (auth as any).refreshTokens || (() => Promise.resolve()),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 115,
          "snippet": "hasPermission: (permission: string) => (auth as any).hasPermission?.(permission as any) || false,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 116,
          "snippet": "hasRole: (role: string) => (auth as any).hasRole?.(role as any) || false,"
        }
      ]
    },
    {
      "file": "packages/hooks/src/auth/types.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 509,
          "snippet": "public details?: any"
        }
      ]
    },
    {
      "file": "packages/hooks/src/composed/useMedicalDashboard.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 288,
          "snippet": "userType: dashboardType as any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 314,
          "snippet": "? patients.filter((p: any) => (p as PatientLite).id === user?.id)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 316,
          "snippet": "? (getPatientsByDoctor as any)(user?.id || '')"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 317,
          "snippet": ": (patients as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 335,
          "snippet": "return (getRecentPatients as any)(10).filter((patient: PatientLite) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 442,
          "snippet": "const updateMetricWidget = useCallback((metricData: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 450,
          "snippet": "const addAlert = useCallback((alertData: any) => {"
        }
      ]
    },
    {
      "file": "packages/hooks/src/composed/useTelemedicineSession.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 19,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 24,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 29,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 34,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 208,
          "snippet": "if (typeof (patientsApi as any).getPatient === 'function') {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 209,
          "snippet": "return (patientsApi as any).getPatient(patientId);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 211,
          "snippet": "const list = (patientsApi as any).patients as Array<{ id: string; name?: string }>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 250,
          "snippet": "userType: currentUser?.userType as any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 290,
          "snippet": "const handleParticipantJoined = useCallback((participantData: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 312,
          "snippet": "const handleParticipantLeft = useCallback((participantData: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 332,
          "snippet": "const handleNoteAdded = useCallback((noteData: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 345,
          "snippet": "const handleEmergencyAlert = useCallback((alertData: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 359,
          "snippet": "const handleSessionEnded = useCallback((endData: any) => {"
        }
      ]
    },
    {
      "file": "packages/hooks/src/forms/types.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 16,
          "snippet": "validationSchema?: any;"
        }
      ]
    },
    {
      "file": "packages/hooks/src/forms/useFormWithAPI.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 7,
          "snippet": "// TODO: Implement form with API integration"
        }
      ]
    },
    {
      "file": "packages/hooks/src/forms/useFormWithAuth.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 7,
          "snippet": "// TODO: Implement form with auth integration"
        }
      ]
    },
    {
      "file": "packages/hooks/src/forms/useFormWithCache.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 7,
          "snippet": "// TODO: Implement form with cache integration"
        }
      ]
    },
    {
      "file": "packages/hooks/src/legacy.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 6,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 11,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 16,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 21,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 40,
          "snippet": "// eslint-disable-next-line @typescript-eslint/no-explicit-any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 41,
          "snippet": "type AnyFn = (...args: any[]) => any;"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 52,
          "snippet": "// eslint-disable-next-line @typescript-eslint/no-explicit-any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 53,
          "snippet": "const shim: AnyFn = (..._args: any[]) => {"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 55,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 66,
          "snippet": "// eslint-disable-next-line @typescript-eslint/no-var-requires"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 94,
          "snippet": "// eslint-disable-next-line @typescript-eslint/no-empty-interface"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 96,
          "snippet": "// eslint-disable-next-line @typescript-eslint/no-empty-interface"
        }
      ]
    },
    {
      "file": "packages/hooks/src/medical/DEPRECATED_useTelemedicine.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 117,
          "snippet": "// TODO: Implementar llamada a API real"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 128,
          "snippet": "// TODO: Implementar llamada a API real para obtener sesi√≥n activa"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 137,
          "snippet": "// TODO: Implementar creaci√≥n de sesi√≥n"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 147,
          "snippet": "// TODO: Implementar unirse a sesi√≥n"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 157,
          "snippet": "// TODO: Implementar finalizar sesi√≥n"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 174,
          "snippet": "// TODO: Implementar actualizaci√≥n de sesi√≥n"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 265,
          "snippet": "// TODO: Implementar conexi√≥n WebRTC real"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 383,
          "snippet": "// TODO: Agregar servidores TURN para producci√≥n"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 399,
          "snippet": "// TODO: Enviar candidate al peer remoto a trav√©s del servidor de se√±alizaci√≥n"
        }
      ]
    },
    {
      "file": "packages/hooks/src/medical/__tests__/useMedicalHistory.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 35,
          "snippet": "let wrapper: any"
        }
      ]
    },
    {
      "file": "packages/hooks/src/medical/__tests__/usePatientRisk.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 46,
          "snippet": "let wrapper: any"
        }
      ]
    },
    {
      "file": "packages/hooks/src/medical/__tests__/usePrescriptions.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 48,
          "snippet": "let wrapper: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 305,
          "snippet": "} catch (error: any) {"
        }
      ]
    },
    {
      "file": "packages/hooks/src/medical/__tests__/useVitalSigns.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 49,
          "snippet": "global.WebSocket = vi.fn(() => mockWebSocket) as any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 53,
          "snippet": "let wrapper: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 254,
          "snippet": "let messageHandler: (event: any) => void = () => {}"
        }
      ]
    },
    {
      "file": "packages/hooks/src/medical/config.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 312,
          "snippet": "return HIPAA_CONFIG.phiFields.includes(fieldName as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 338,
          "snippet": "retry: (failureCount: number, error: any) => {"
        }
      ]
    },
    {
      "file": "packages/hooks/src/medical/index.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 8,
          "snippet": "// TODO: Restaurar cuando api-client build est√© funcionando"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 56,
          "snippet": "// TODO: Restaurar cuando api-client build est√© funcionando"
        }
      ]
    },
    {
      "file": "packages/hooks/src/medical/queryKeys.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 180,
          "snippet": "...params: any[]"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 182,
          "snippet": "const baseKey = [type] as any[];"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 197,
          "snippet": "* √ötil para invalidar todo el cach√© de un paciente espec√≠fico"
        }
      ]
    },
    {
      "file": "packages/hooks/src/medical/types/diagnostic.types.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 14,
          "snippet": "value: any;"
        }
      ]
    },
    {
      "file": "packages/hooks/src/medical/types/medical-ai.types.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 155,
          "snippet": "value: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 179,
          "snippet": "data?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 263,
          "snippet": "getDiagnosticSuggestions: (symptoms: any, context: any) => Promise<PossibleCondition[]>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 266,
          "snippet": "assessRisk: (context: any) => Promise<string[]>;"
        }
      ]
    },
    {
      "file": "packages/hooks/src/medical/types.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 421,
          "snippet": "value?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 431,
          "snippet": "value?: any;"
        }
      ]
    },
    {
      "file": "packages/hooks/src/medical/useAppointmentsEnhanced.ts",
      "matches": [
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 12,
          "snippet": "// eslint-disable-next-line @typescript-eslint/no-explicit-any"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 23,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 28,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 33,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 38,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/hooks/src/medical/useDoctorWorkflow.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 49,
          "snippet": "vitals?: any;"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 113,
          "snippet": "// TODO: Implementar llamada a API real"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 135,
          "snippet": "// TODO: Implementar llamada a API real"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 153,
          "snippet": "// TODO: Implementar inicio de consulta"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 163,
          "snippet": "// TODO: Implementar finalizaci√≥n de consulta"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 173,
          "snippet": "// TODO: Implementar actualizaci√≥n de paso del workflow"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 183,
          "snippet": "// TODO: Implementar reprogramaci√≥n de cita"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 194,
          "snippet": "// TODO: Implementar agregar tiempo de descanso"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 259,
          "snippet": "// TODO: Implementar llamada a API real"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 283,
          "snippet": "// TODO: Implementar actualizaci√≥n de disponibilidad"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 301,
          "snippet": "// TODO: Implementar bloqueo de slot"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 317,
          "snippet": "// TODO: Implementar desbloqueo de slot"
        }
      ]
    },
    {
      "file": "packages/hooks/src/medical/useLabResults.ts",
      "matches": [
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 12,
          "snippet": "// eslint-disable-next-line @typescript-eslint/no-explicit-any"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 21,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 26,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 31,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 36,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/hooks/src/medical/useMedicalAI.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 13,
          "snippet": "info: (...args: any[]) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 15,
          "snippet": "console.log(...args);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 18,
          "snippet": "warn: (...args: any[]) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 20,
          "snippet": "console.warn(...args);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 23,
          "snippet": "error: (...args: any[]) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 25,
          "snippet": "console.error(...args);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 28,
          "snippet": "debug: (...args: any[]) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 30,
          "snippet": "console.debug(...args);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 785,
          "snippet": "severity: ['minor', 'moderate', 'major'][Math.floor(Math.random() * 3)] as any,"
        }
      ]
    },
    {
      "file": "packages/hooks/src/medical/useMedicalRecords.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 9,
          "snippet": "// TODO: Import MedicalRecord from @altamedica/types once it's defined there"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 89,
          "snippet": "// TODO: Implementar llamada a API real"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 100,
          "snippet": "// TODO: Implementar creaci√≥n de registro m√©dico"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 110,
          "snippet": "// TODO: Implementar actualizaci√≥n de registro m√©dico"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 121,
          "snippet": "// TODO: Implementar eliminaci√≥n de registro m√©dico"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 169,
          "snippet": "// TODO: Implementar llamada a API real"
        }
      ]
    },
    {
      "file": "packages/hooks/src/medical/usePatientData.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 76,
          "snippet": "queryFn: () => getApiClient().get(`/api/v1/patients/${patientId}`).then((res: any) => res.data),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 84,
          "snippet": "queryFn: () => getApiClient().get(`/api/v1/patients/${patientId}/vitals`).then((res: any) => res.data),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 92,
          "snippet": "queryFn: () => getApiClient().get(`/api/v1/patients/${patientId}/medications`).then((res: any) => res.data),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 100,
          "snippet": "queryFn: () => getApiClient().get(`/api/v1/patients/${patientId}/appointments`).then((res: any) => res.data),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 108,
          "snippet": "queryFn: () => getApiClient().get(`/api/v1/patients/${patientId}/lab-results`).then((res: any) => res.data),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 116,
          "snippet": "queryFn: () => getApiClient().get(`/api/v1/patients/${patientId}/medical-history`).then((res: any) => res.data),"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 165,
          "snippet": "// TODO: Implementar mutaciones con optimistic updates"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 173,
          "snippet": "// TODO: Conectar con WebSocket para actualizaciones en tiempo real"
        }
      ]
    },
    {
      "file": "packages/hooks/src/medical/usePatientPortal.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 147,
          "snippet": "// TODO: Implementar llamada a API real"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 166,
          "snippet": "// TODO: Implementar llamada a API real"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 194,
          "snippet": "// TODO: Implementar reserva de cita"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 204,
          "snippet": "// TODO: Implementar cancelaci√≥n de cita"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 214,
          "snippet": "// TODO: Implementar solicitud de recarga"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 224,
          "snippet": "// TODO: Implementar marcar notificaci√≥n como le√≠da"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 234,
          "snippet": "// TODO: Implementar actualizaci√≥n de meta de salud"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 244,
          "snippet": "// TODO: Implementar actualizaci√≥n de preferencias"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 315,
          "snippet": "// TODO: Implementar llamada a API real"
        }
      ]
    },
    {
      "file": "packages/hooks/src/medical/usePatientPredictor.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 7,
          "snippet": "* TODO: Re-implementar cuando los tipos est√©n disponibles en @altamedica/types"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 12,
          "snippet": "// TODO: Definir estos tipos en @altamedica/types"
        }
      ]
    },
    {
      "file": "packages/hooks/src/medical/usePatients.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 21,
          "snippet": "// TODO: Re-enable exports once @altamedica/api-client/hooks is available"
        }
      ]
    },
    {
      "file": "packages/hooks/src/medical/usePrescriptions.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 75,
          "snippet": "// TODO: Implementar llamada a API real"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 86,
          "snippet": "// TODO: Implementar creaci√≥n de prescripci√≥n"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 96,
          "snippet": "// TODO: Implementar actualizaci√≥n de prescripci√≥n"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 107,
          "snippet": "// TODO: Implementar cancelaci√≥n de prescripci√≥n"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 155,
          "snippet": "// TODO: Implementar llamada a API real"
        }
      ]
    },
    {
      "file": "packages/hooks/src/medical/useTelemedicineAdvanced.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 3,
          "snippet": "// TODO: Migrar a implementaci√≥n completa cuando est√© disponible"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 25,
          "snippet": "session: any | null;"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 71,
          "snippet": "// TODO: Implementar cuando est√© disponible"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 122,
          "snippet": "// TODO: Implementar cuando est√© disponible"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 123,
          "snippet": "console.log('Medical note:', note);"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 131,
          "snippet": "const canRecord = state.isConnected && true; // TODO: Implementar verificaci√≥n HIPAA"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 132,
          "snippet": "const connectionQuality = 'good'; // TODO: Implementar m√©tricas reales"
        }
      ]
    },
    {
      "file": "packages/hooks/src/medical/useVitalSigns.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 134,
          "snippet": "// TODO: Implementar llamada a API real"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 146,
          "snippet": "// TODO: Implementar llamada a API real para obtener √∫ltimos signos vitales"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 155,
          "snippet": "// TODO: Implementar grabaci√≥n de signos vitales"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 168,
          "snippet": "// TODO: Implementar actualizaci√≥n de signos vitales"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 179,
          "snippet": "// TODO: Implementar eliminaci√≥n de signos vitales"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 247,
          "snippet": "// TODO: Implementar llamada a API real"
        }
      ]
    },
    {
      "file": "packages/hooks/src/medical-hooks-alias.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 6,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 11,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 16,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 21,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 32,
          "snippet": "/* eslint-disable no-console */"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 39,
          "snippet": "// TODO: Restore when available"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 54,
          "snippet": "// TODO: Restore when available"
        }
      ]
    },
    {
      "file": "packages/hooks/src/performance/useOffline.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 13,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 18,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 23,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 28,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 188,
          "snippet": "details: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 432,
          "snippet": "static async encrypt(data: any): Promise<string> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 544,
          "snippet": "const connection = (navigator as any).connection || (navigator as any).mozConnection || (navigator as any).webkitConnection;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 576,
          "snippet": "const connection = (navigator as any).connection;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 619,
          "snippet": "const createHash = useCallback((data: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 624,
          "snippet": "const addAuditEntry = useCallback(async (action: AuditEntry['action'], itemId: string, details: any, medicalContext?: MedicalContext) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 1045,
          "snippet": "dataType: dataType as any"
        }
      ]
    },
    {
      "file": "packages/hooks/src/performance/usePerformance.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 13,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 18,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 23,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 28,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 220,
          "snippet": "const lastEntry = entries[entries.length - 1] as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 255,
          "snippet": "entries.forEach((entry: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 292,
          "snippet": "entries.forEach((entry: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 335,
          "snippet": "const memory = (performance as any).memory;"
        }
      ]
    },
    {
      "file": "packages/hooks/src/providers/QueryProvider.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 11,
          "snippet": "// TODO: Re-enable when dependency is properly installed"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 18,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 23,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 28,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 33,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 58,
          "snippet": "onError?: (error: unknown, query?: any) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 101,
          "snippet": "const err: any = error as any;"
        }
      ]
    },
    {
      "file": "packages/hooks/src/providers/query-utils.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 19,
          "snippet": "list: (filters?: any) => ['patients', 'list', filters] as const,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 32,
          "snippet": "list: (filters?: any) => ['doctors', 'list', filters] as const,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 44,
          "snippet": "list: (filters?: any) => ['appointments', 'list', filters] as const,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 54,
          "snippet": "list: (filters?: any) => ['prescriptions', 'list', filters] as const,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 62,
          "snippet": "list: (filters?: any) => ['companies', 'list', filters] as const,"
        }
      ]
    },
    {
      "file": "packages/hooks/src/realtime/DEPRECATED_useWebRTC.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 4,
          "snippet": "* TODO: Replace with a real implementation using @altamedica/telemedicine-core."
        }
      ]
    },
    {
      "file": "packages/hooks/src/realtime/constants.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 361,
          "snippet": "export function validateWebRTCConfig(config: any): boolean {"
        }
      ]
    },
    {
      "file": "packages/hooks/src/realtime/types.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 512,
          "snippet": "send: (data: any) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 513,
          "snippet": "subscribe: (channel: string, callback: (data: any) => void) => () => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 530,
          "snippet": "publish: (channel: string, data: any) => void;"
        }
      ]
    },
    {
      "file": "packages/hooks/src/realtime/useNotifications.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 13,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 18,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 23,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 28,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 247,
          "snippet": "const handleNewNotification = useCallback((notificationData: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 278,
          "snippet": "const handleNotificationUpdate = useCallback((update: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 294,
          "snippet": "const handleNotificationsList = useCallback((data: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 297,
          "snippet": "const relevantNotifications = data.notifications.filter((n: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 314,
          "snippet": "const handleMarketplaceNotification = useCallback((data: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 321,
          "snippet": "const handleMedicalAlert = useCallback((data: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 618,
          "snippet": "return notifications.filter(n => (n.medicalContext as any)?.eventType === channel);"
        }
      ]
    },
    {
      "file": "packages/hooks/src/realtime/useRealTimeUpdates.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 20,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 25,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 30,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 35,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 79,
          "snippet": "publish: (channel: string, data: any, metadata?: any) => Promise<void>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 80,
          "snippet": "broadcast: (data: any, channels?: string[]) => Promise<void>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 156,
          "snippet": "return (config.transportConfig as any).url;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 457,
          "snippet": "data: any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 458,
          "snippet": "metadata?: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 475,
          "snippet": "data: any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 604,
          "snippet": "publish: (data: any, metadata?: any) => realtime.publish(channel, data, metadata),"
        }
      ]
    },
    {
      "file": "packages/hooks/src/realtime/useWebRTC.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 10,
          "snippet": "mediaConstraints?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 19,
          "snippet": "state: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 20,
          "snippet": "startCall: (peerId?: string, opts?: any) => Promise<void>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 27,
          "snippet": "qosMetrics?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 32,
          "snippet": "[k: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 39,
          "snippet": "userType: (opts && (opts.userType as any)) || ('doctor' as any),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 43,
          "snippet": "const tele = useTelemedicineUnified(cfg as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 46,
          "snippet": "const startCall = async (peerId?: string, _opts?: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 72,
          "snippet": "const t = tele as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 90,
          "snippet": "error: (tele as any).error || null,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 109,
          "snippet": "qosMetrics: (tele as any).qosMetrics || (tele as any).qos || undefined,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 110,
          "snippet": "peerConnectionRef: (tele as any).peerConnectionRef,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 117,
          "snippet": "Object.assign(legacy, tele as any);"
        }
      ]
    },
    {
      "file": "packages/hooks/src/realtime/useWebSocket.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 12,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 17,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 22,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 27,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 87,
          "snippet": "send: (data: any, options?: SendOptions) => Promise<boolean>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 88,
          "snippet": "subscribe: (channel: string, callback: (data: any) => void) => () => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 114,
          "snippet": "serverInfo?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 120,
          "snippet": "data: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 180,
          "snippet": "const pendingMessagesRef = useRef<Array<{ data: any; options?: SendOptions; resolve: Function; reject: Function }>>([]);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 200,
          "snippet": "const addLog = useCallback((type: WebSocketLog['type'], data: any, size?: number) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 552,
          "snippet": "data: any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 601,
          "snippet": "callback: (data: any) => void"
        }
      ]
    },
    {
      "file": "packages/hooks/src/types/altamedica__api-client.d.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 3,
          "snippet": "get: (url: string, config?: any) => Promise<{ data: any }>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 4,
          "snippet": "post: (url: string, data?: any, config?: any) => Promise<{ data: any }>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 5,
          "snippet": "put: (url: string, data?: any, config?: any) => Promise<{ data: any }>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 6,
          "snippet": "delete?: (url: string, config?: any) => Promise<{ data: any }>;"
        }
      ]
    },
    {
      "file": "packages/hooks/src/ui/useAccessibility.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 14,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 19,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 24,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 29,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/hooks/src/ui/useClipboard.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 11,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 16,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 21,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 26,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/hooks/src/ui/useDragDrop.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 7,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 12,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 17,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 22,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 29,
          "snippet": "draggedData: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 33,
          "snippet": "onDrop?: (data: any, event: DragEvent) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 34,
          "snippet": "onDragStart?: (data: any, event: DragEvent) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 51,
          "snippet": "setDraggedData: (data: any) => void;"
        }
      ]
    },
    {
      "file": "packages/hooks/src/ui/useMergeRefs.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 105,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 110,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 115,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 120,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/hooks/src/ui/useTelemedicineUI.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 7,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 12,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 17,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 22,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/hooks/src/ui/useToast.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 12,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 17,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 22,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 27,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/hooks/src/useAIAgents.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 9,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 14,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 19,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 24,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 28,
          "snippet": "// TODO: Import from @altamedica/ai-agents once types are available"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 34,
          "snippet": "result?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 40,
          "snippet": "data: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 41,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 57,
          "snippet": "analyzeMedicalRecord: (patientId: string, data: any) => Promise<AIJob>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 67,
          "snippet": "const handleError = useCallback((err: any) => {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 92,
          "snippet": "// TODO: Replace with real aiAgents service"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 111,
          "snippet": "// TODO: Replace with real aiAgents service"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 129,
          "snippet": "// TODO: Replace with real aiAgents service"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 147,
          "snippet": "const analyzeMedicalRecord = useCallback(async (patientId: string, data: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 213,
          "snippet": "patientInfo: any"
        }
      ]
    },
    {
      "file": "packages/hooks/src/useAltamedicaAPI.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 36,
          "snippet": "insuranceInfo?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 37,
          "snippet": "emergencyContact?: any;"
        }
      ]
    },
    {
      "file": "packages/hooks/src/useAuditLogs.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 147,
          "snippet": "console.log('Fetching audit logs...');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 153,
          "snippet": "console.error('Error fetching audit logs:', error);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 172,
          "snippet": "const applyFilters = (newFilters: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 212,
          "snippet": "console.error('Export failed:', error);"
        }
      ]
    },
    {
      "file": "packages/hooks/src/useTelemedicine.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 5,
          "snippet": "const useWebRTCQoS = (config: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 74,
          "snippet": "console.log('Connecting to room:', roomId);"
        }
      ]
    },
    {
      "file": "packages/hooks/src/utils/types.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 25,
          "snippet": "stringify: (value: any) => string;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 61,
          "snippet": "deps?: any[];"
        }
      ]
    },
    {
      "file": "packages/hooks/src/utils/useAsync.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 13,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 18,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 23,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 28,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 59,
          "snippet": "deps?: any[];"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 267,
          "snippet": "// eslint-disable-next-line react-hooks/exhaustive-deps"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 502,
          "snippet": "const cacheRef = useRef<Map<string, { data: any; timestamp: number }>>(new Map());"
        }
      ]
    },
    {
      "file": "packages/hooks/src/utils/useDebounce.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 36,
          "snippet": "export interface DebouncedFunction<T extends (...args: any[]) => any> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 102,
          "snippet": "export function useDebounceCallback<T extends (...args: any[]) => any>("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 243,
          "snippet": "apiCall: (params: any) => Promise<T>,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 246,
          "snippet": "(params: any) => void,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 259,
          "snippet": "async (params: any) => {"
        }
      ]
    },
    {
      "file": "packages/hooks/src/utils/useHydrationSafe.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 15,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 20,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 25,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 30,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/hooks/src/utils/useInterval.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 15,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 20,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 25,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 30,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/hooks/src/utils/useLocalStorage.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 13,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 18,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 23,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 28,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 43,
          "snippet": "stringify: (value: any) => string;"
        }
      ]
    },
    {
      "file": "packages/hooks/src/utils/useMediaQuery.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 13,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 18,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 23,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 28,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/hooks/src/utils/useOptimizedPerformance.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 10,
          "snippet": "info: (...args: any[]) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 12,
          "snippet": "console.log(...args);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 15,
          "snippet": "warn: (...args: any[]) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 17,
          "snippet": "console.warn(...args);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 20,
          "snippet": "error: (...args: any[]) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 22,
          "snippet": "console.error(...args);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 25,
          "snippet": "debug: (...args: any[]) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 27,
          "snippet": "console.debug(...args);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 112,
          "snippet": "dependencies: any[] = []"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 188,
          "snippet": "export function useThrottle<T extends (...args: any[]) => any>("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 213,
          "snippet": "const changes: Record<string, { from: any; to: any }> = {};"
        }
      ]
    },
    {
      "file": "packages/hooks/stories/auth/useAuth.stories.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 10,
          "snippet": "const mockUseAuth = (config: any = {}) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 124,
          "snippet": "register: async (userData: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 174,
          "snippet": "updateProfile: async (updates: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 215,
          "snippet": "const AuthDemo: React.FC<{ config?: any }> = ({ config = {} }) => {"
        }
      ]
    },
    {
      "file": "packages/hooks/stories/medical/usePatients.stories.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 10,
          "snippet": "const mockUsePatients = (config: any = {}) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 92,
          "snippet": "createPatient: async (patientData: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 106,
          "snippet": "updatePatient: async (id: string, updates: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 122,
          "snippet": "setFilters: (newFilters: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 154,
          "snippet": "const PatientsDemo: React.FC<{ config?: any }> = ({ config = {} }) => {"
        }
      ]
    },
    {
      "file": "packages/hooks/types/altamedica__api-client.d.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 3,
          "snippet": "get: (url: string, config?: any) => Promise<{ data: any }>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 4,
          "snippet": "post: (url: string, data?: any, config?: any) => Promise<{ data: any }>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 5,
          "snippet": "put: (url: string, data?: any, config?: any) => Promise<{ data: any }>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 6,
          "snippet": "delete?: (url: string, config?: any) => Promise<{ data: any }>;"
        }
      ]
    },
    {
      "file": "packages/interfaces/src/api.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 18,
          "snippet": "details?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 48,
          "snippet": "value: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 67,
          "snippet": "body?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 116,
          "snippet": "data?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 177,
          "snippet": "results?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 183,
          "snippet": "data?: any;"
        }
      ]
    },
    {
      "file": "packages/interfaces/src/auth.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 59,
          "snippet": "conditions?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 85,
          "snippet": "details?: any;"
        }
      ]
    },
    {
      "file": "packages/interfaces/src/database.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 33,
          "snippet": "executeQuery<T>(query: string, params?: any[]): Promise<T>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 82,
          "snippet": "executeQuery<T>(query: string, params?: any[]): Promise<T>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 87,
          "snippet": "validate(data: any, schema: any): ValidationResult;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 88,
          "snippet": "validatePartial(data: any, schema: any): ValidationResult;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 101,
          "snippet": "value?: any;"
        }
      ]
    },
    {
      "file": "packages/maps/src/components/SSRSafeMap.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 61,
          "snippet": "ref={handleMapReady as any}"
        }
      ]
    },
    {
      "file": "packages/maps/src/utils/leaflet-icons.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 11,
          "snippet": "delete (L.Icon.Default.prototype as any)._getIconUrl;"
        }
      ]
    },
    {
      "file": "packages/marketplace-hooks/src/index.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 16,
          "snippet": "export const useMarketplaceJobs = (params?: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 22,
          "snippet": "filterJobs: (filters: any) => {},"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 32,
          "snippet": "updateApplication: (id: string, data: any) => Promise.resolve(),"
        }
      ]
    },
    {
      "file": "packages/medical/README.md",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 47,
          "snippet": "<PatientCard patient={patient} onClick={() => console.log('clicked')} />"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 72,
          "snippet": "console.log(analysis.bmi); // { value: 23.1, category: 'Normal weight', color: 'text-green-600' }"
        }
      ]
    },
    {
      "file": "packages/medical/src/components/MedicalPerformanceMonitor.tsx",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 12,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 17,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 22,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 27,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 155,
          "snippet": "const lastEntry = entries[entries.length - 1] as any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 187,
          "snippet": "const entries = list.getEntries() as any[]"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 229,
          "snippet": "const memInfo = (performance as any).memory"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 283,
          "snippet": "private sendToMonitoringSystem(report: any): void {"
        }
      ]
    },
    {
      "file": "packages/medical/src/hooks/useHealthMetrics.d.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 26,
          "snippet": "updateMetric: (key: keyof HealthMetrics, value: any) => void;"
        }
      ]
    },
    {
      "file": "packages/medical/src/hooks/useHealthMetrics.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 35,
          "snippet": "const updateMetric = useCallback((key: keyof HealthMetrics, value: any) => {"
        }
      ]
    },
    {
      "file": "packages/medical/src/hooks/useMedicalData.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 9,
          "snippet": "// TODO: Re-enable when shared package is built"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 14,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 19,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 24,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 29,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 66,
          "snippet": "const handleError = (err: any) => {"
        }
      ]
    },
    {
      "file": "packages/medical/src/prescription/PrescriptionService.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 296,
          "snippet": "private async auditLog(action: string, data: any): Promise<void> {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 312,
          "snippet": "console.error('Failed to create audit log:', error);"
        }
      ]
    },
    {
      "file": "packages/medical/src/types/index.d.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 13,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 26,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 36,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 46,
          "snippet": "data: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 48,
          "snippet": "[key: string]: any;"
        }
      ]
    },
    {
      "file": "packages/medical/src/utils/__tests__/drug-interactions.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 580,
          "snippet": "function generateInteractionComplianceReport(params: any): any {"
        }
      ]
    },
    {
      "file": "packages/medical/src/utils/__tests__/hipaa-compliance-validation.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 36,
          "snippet": "let sampleNonPHI: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 37,
          "snippet": "let sampleUserAccess: any"
        }
      ]
    },
    {
      "file": "packages/medical/src/utils/cache.d.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 12,
          "snippet": "* TODO: Implement real caching with encryption for PHI data"
        }
      ]
    },
    {
      "file": "packages/medical/src/utils/cache.js",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 8,
          "snippet": "* TODO: Implement real caching with encryption for PHI data"
        }
      ]
    },
    {
      "file": "packages/medical/src/utils/cache.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 15,
          "snippet": "* TODO: Implement real caching with encryption for PHI data"
        }
      ]
    },
    {
      "file": "packages/medical/src/utils/dosage-calculator.js",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 16,
          "snippet": "// TODO: Implement proper dosage calculation with medical validation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 20,
          "snippet": "// TODO: Implement pediatric dosage calculation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 24,
          "snippet": "// TODO: Implement geriatric dosage calculation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 28,
          "snippet": "// TODO: Implement dosage range validation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 32,
          "snippet": "// TODO: Implement weight-based dosage adjustment"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 36,
          "snippet": "// TODO: Implement renal function dosage adjustment"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 40,
          "snippet": "// TODO: Implement hepatic function dosage adjustment"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 44,
          "snippet": "// TODO: Implement insulin dosage calculation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 48,
          "snippet": "// TODO: Implement chemotherapy dosage calculation (BSA-based)"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 52,
          "snippet": "// TODO: Implement unit conversion"
        }
      ]
    },
    {
      "file": "packages/medical/src/utils/dosage-calculator.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 47,
          "snippet": "// TODO: Implement proper dosage calculation with medical validation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 54,
          "snippet": "// TODO: Implement pediatric dosage calculation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 59,
          "snippet": "// TODO: Implement geriatric dosage calculation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 64,
          "snippet": "// TODO: Implement dosage range validation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 69,
          "snippet": "// TODO: Implement weight-based dosage adjustment"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 77,
          "snippet": "// TODO: Implement renal function dosage adjustment"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 82,
          "snippet": "// TODO: Implement hepatic function dosage adjustment"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 87,
          "snippet": "// TODO: Implement insulin dosage calculation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 95,
          "snippet": "// TODO: Implement chemotherapy dosage calculation (BSA-based)"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 100,
          "snippet": "// TODO: Implement unit conversion"
        }
      ]
    },
    {
      "file": "packages/medical/src/utils/drug-interactions.js",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 16,
          "snippet": "// TODO: Implement comprehensive drug interaction checking"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 20,
          "snippet": "// TODO: Implement pairwise drug interaction analysis"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 24,
          "snippet": "// TODO: Implement interaction severity assessment"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 28,
          "snippet": "// TODO: Implement clinical outcome prediction"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 32,
          "snippet": "// TODO: Implement clinical warning generation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 36,
          "snippet": "// TODO: Implement contraindication checking"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 40,
          "snippet": "// TODO: Implement comprehensive drug combination validation"
        }
      ]
    },
    {
      "file": "packages/medical/src/utils/drug-interactions.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 50,
          "snippet": "// TODO: Implement comprehensive drug interaction checking"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 60,
          "snippet": "// TODO: Implement pairwise drug interaction analysis"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 65,
          "snippet": "// TODO: Implement interaction severity assessment"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 70,
          "snippet": "// TODO: Implement clinical outcome prediction"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 75,
          "snippet": "// TODO: Implement clinical warning generation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 83,
          "snippet": "// TODO: Implement contraindication checking"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 88,
          "snippet": "// TODO: Implement comprehensive drug combination validation"
        }
      ]
    },
    {
      "file": "packages/medical/src/utils/hipaa-compliance-validation.d.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 14,
          "snippet": "medicalData: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 52,
          "snippet": "export declare function scanForPHI(data: any): string[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 53,
          "snippet": "export declare function validateDataEncryption(data: any): EncryptionStatus;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 58,
          "snippet": "export declare function validateBreachNotification(incident: any): boolean;"
        }
      ]
    },
    {
      "file": "packages/medical/src/utils/hipaa-compliance-validation.js",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 16,
          "snippet": "// TODO: Implement comprehensive HIPAA compliance validation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 20,
          "snippet": "// TODO: Implement PHI scanning"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 24,
          "snippet": "// TODO: Implement encryption validation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 28,
          "snippet": "// TODO: Implement access control validation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 32,
          "snippet": "// TODO: Implement audit trail validation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 36,
          "snippet": "// TODO: Implement consent management validation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 40,
          "snippet": "// TODO: Implement data minimization validation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 44,
          "snippet": "// TODO: Implement breach notification validation"
        }
      ]
    },
    {
      "file": "packages/medical/src/utils/hipaa-compliance-validation.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 15,
          "snippet": "medicalData: any;"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 64,
          "snippet": "// TODO: Implement comprehensive HIPAA compliance validation"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 70,
          "snippet": "export function scanForPHI(data: any): string[] {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 71,
          "snippet": "// TODO: Implement PHI scanning"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 75,
          "snippet": "export function validateDataEncryption(data: any): EncryptionStatus {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 76,
          "snippet": "// TODO: Implement encryption validation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 81,
          "snippet": "// TODO: Implement access control validation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 86,
          "snippet": "// TODO: Implement audit trail validation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 91,
          "snippet": "// TODO: Implement consent management validation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 96,
          "snippet": "// TODO: Implement data minimization validation"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 100,
          "snippet": "export function validateBreachNotification(incident: any): boolean {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 101,
          "snippet": "// TODO: Implement breach notification validation"
        }
      ]
    },
    {
      "file": "packages/medical/src/utils/medical-utils.js",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 3,
          "snippet": "// TODO: Add crypto-js dependency to package.json"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 11,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 16,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 21,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 26,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 35,
          "snippet": "// TODO: Implement with crypto-js when dependency is added"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 49,
          "snippet": "// TODO: Implement with crypto-js when dependency is added"
        }
      ]
    },
    {
      "file": "packages/medical/src/utils/medical-utils.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 4,
          "snippet": "// TODO: Add crypto-js dependency to package.json"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 13,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 18,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 23,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 28,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 39,
          "snippet": "// TODO: Implement with crypto-js when dependency is added"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 54,
          "snippet": "// TODO: Implement with crypto-js when dependency is added"
        }
      ]
    },
    {
      "file": "packages/medical/src/utils/vital-signs-validation.js",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 16,
          "snippet": "// TODO: Implement comprehensive vital signs validation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 20,
          "snippet": "// TODO: Implement vital signs categorization"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 24,
          "snippet": "// TODO: Implement emergency condition detection"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 28,
          "snippet": "// TODO: Implement vital signs scoring (e.g., Early Warning Score)"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 32,
          "snippet": "// TODO: Implement alert generation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 36,
          "snippet": "// TODO: Implement deterioration risk prediction"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 40,
          "snippet": "// TODO: Implement range validation"
        }
      ]
    },
    {
      "file": "packages/medical/src/utils/vital-signs-validation.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 63,
          "snippet": "// TODO: Implement comprehensive vital signs validation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 70,
          "snippet": "// TODO: Implement vital signs categorization"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 78,
          "snippet": "// TODO: Implement emergency condition detection"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 86,
          "snippet": "// TODO: Implement vital signs scoring (e.g., Early Warning Score)"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 94,
          "snippet": "// TODO: Implement alert generation"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 102,
          "snippet": "// TODO: Implement deterioration risk prediction"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 110,
          "snippet": "// TODO: Implement range validation"
        }
      ]
    },
    {
      "file": "packages/patient-services/README.md",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 161,
          "snippet": "post<T>(endpoint: string, data?: any): Promise<ApiResponse<T>>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 162,
          "snippet": "put<T>(endpoint: string, data?: any): Promise<ApiResponse<T>>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 163,
          "snippet": "patch<T>(endpoint: string, data?: any): Promise<ApiResponse<T>>;"
        }
      ]
    },
    {
      "file": "packages/patient-services/__tests__/patients.service.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 13,
          "snippet": "} as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 158,
          "snippet": "} as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 174,
          "snippet": "} as any);"
        }
      ]
    },
    {
      "file": "packages/patient-services/src/patients.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 143,
          "snippet": "post<T>(endpoint: string, data?: any): Promise<ApiResponse<T>>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 144,
          "snippet": "put<T>(endpoint: string, data?: any): Promise<ApiResponse<T>>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 145,
          "snippet": "patch<T>(endpoint: string, data?: any): Promise<ApiResponse<T>>;"
        }
      ]
    },
    {
      "file": "packages/services/src/patient.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 283,
          "snippet": "private static findDrugInteractions(medications: any[], contraindications: string[]): string[] {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 328,
          "snippet": "private static summarizeLabResults(results: LabResult[]): any[] {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 371,
          "snippet": "value: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 400,
          "snippet": "currentMedications: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 403,
          "snippet": "upcomingAppointments: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 404,
          "snippet": "recentLabResults: any[];"
        }
      ]
    },
    {
      "file": "packages/shared/src/api-client.js",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 3,
          "snippet": "* Cliente de API reutilizable para todo el ecosistema"
        }
      ]
    },
    {
      "file": "packages/shared/src/api-client.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 3,
          "snippet": "* Cliente de API reutilizable para todo el ecosistema"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 77,
          "snippet": "protected async post<T>(data: any, endpoint: string = ''): Promise<APIResponse<T>> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 84,
          "snippet": "protected async put<T>(data: any, endpoint: string = ''): Promise<APIResponse<T>> {"
        }
      ]
    },
    {
      "file": "packages/shared/src/payments.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 11,
          "snippet": "MercadoPago?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 22,
          "snippet": "export const createPaymentPreference = async (paymentData: any) => {"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/audit.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 39,
          "snippet": "oldValue?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 40,
          "snippet": "newValue?: any;"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 264,
          "snippet": "// TODO: Implementar persistencia en base de datos"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 282,
          "snippet": "// TODO: Implementar persistencia real"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 300,
          "snippet": "// TODO: Implementar verificaci√≥n desde base de datos"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 332,
          "snippet": "// TODO: Implementar query desde base de datos"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 365,
          "snippet": "metadata?: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 429,
          "snippet": "export const auditAuth = (userId: string, success: boolean, metadata?: any) =>"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/baa.service.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 1,
          "snippet": "// TODO: Definir estos tipos en @altamedica/types"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 8,
          "snippet": "history: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 9,
          "snippet": "version: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 10,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 14,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 19,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 23,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 27,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 31,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 38,
          "snippet": "const getBAAComplianceStatus = (): any => ({ compliant: true });"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 195,
          "snippet": "await this.updateBAAStatus(baa.id, 'expired' as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 222,
          "snippet": "const updateData: any = {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 334,
          "snippet": "companyInfo: any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 457,
          "snippet": "stepData: any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 476,
          "snippet": "const currentIndex = steps.findIndex((s: any) => s.name === currentStep);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 524,
          "snippet": "await this.updateBAAStatus(onboarding.baaId, 'pending_signature' as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 701,
          "snippet": "private generateSignatureHash(signData: SignBAA, signerInfo: any): string {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 715,
          "snippet": "private formatBAAFromFirestore(data: any): BAA {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 740,
          "snippet": "data.history?.map((h: any) => ({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 754,
          "snippet": "metadata?: any,"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/backup.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 234,
          "snippet": "const backupData: any = {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 305,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 325,
          "snippet": "private async backupFirestore(collections: string[]): Promise<{ data: any; count: number }> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 603,
          "snippet": "private async executeRestore(backupData: any, options: RestoreOptions): Promise<void> {"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/encryption.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 96,
          "snippet": "encryptPHI(data: any, options: EncryptionOptions = {}): EncryptedData {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 147,
          "snippet": "decryptPHI(encryptedData: EncryptedData, options: EncryptionOptions = {}): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 199,
          "snippet": "encryptField(obj: any, fieldPath: string, options?: EncryptionOptions): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 222,
          "snippet": "decryptField(obj: any, fieldPath: string, options?: EncryptionOptions): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 245,
          "snippet": "encryptPHIFields(obj: any, phiFields: string[], options?: EncryptionOptions): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 258,
          "snippet": "decryptPHIFields(obj: any, phiFields: string[], options?: EncryptionOptions): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 377,
          "snippet": "export const encrypt = (data: any, options?: EncryptionOptions) =>"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/invoice-generation.service.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 1,
          "snippet": "// TODO: Definir estos tipos en @altamedica/types"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 5,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 9,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 14,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 18,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 22,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 26,
          "snippet": "const calculateInvoiceTotals = (): any => ({ total: 0, subtotal: 0, tax: 0 });"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 30,
          "snippet": "// import { auditEvent } from '@altamedica/database'; // TODO: Implement audit logging"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 546,
          "snippet": "private async auditBatchGeneration(results: any): Promise<void> {"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/jwt-service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 307,
          "snippet": "return (payload as any)[claim] || null;"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/medication-catalog.service.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 1,
          "snippet": "// TODO: Definir estos tipos en @altamedica/types"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 17,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 21,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 25,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 29,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 316,
          "snippet": "dosageForm: (extMed.dosageForm || 'tablet') as any, // Cast temporal con default"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 480,
          "snippet": "const interactions: any[] = [];"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/mercadopago.service.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 1,
          "snippet": "// TODO: Update this file to use MercadoPago v2 API"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 117,
          "snippet": "// TODO: Implement with new API"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 125,
          "snippet": "// TODO: Implement with new API"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 147,
          "snippet": "// TODO: Implement with new API"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 155,
          "snippet": "// TODO: Implement with new API"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 169,
          "snippet": "// TODO: Implement with new API"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 193,
          "snippet": "// TODO: Implement with new API"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 201,
          "snippet": "// TODO: Implement with new API"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 208,
          "snippet": "validateWebhook(headers: Record<string, string>, body: any): boolean {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 258,
          "snippet": "// TODO: Implement with new API"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 275,
          "snippet": "// TODO: Implement with new API"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 291,
          "snippet": "// TODO: Implement with new API"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/notification-service.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 9,
          "snippet": "* ‚ö†Ô∏è IMPORTANTE: Todo nuevo c√≥digo debe usar UnifiedNotificationSystem directamente"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 122,
          "snippet": "// TODO: Hacer llamada HTTP al api-server UnifiedNotificationSystem"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-data-aggregator.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 576,
          "snippet": "throw new Error(`Failed to aggregate patient data: ${(error as any).message}`);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 1399,
          "snippet": "const archiver: any = (archiverModule as any).default || (archiverModule as any);"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-data-export.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 112,
          "snippet": "emergencyContacts?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 113,
          "snippet": "insurance?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 117,
          "snippet": "medicalHistory?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 118,
          "snippet": "labResults?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 119,
          "snippet": "prescriptions?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 120,
          "snippet": "appointments?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 121,
          "snippet": "vitalSigns?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 122,
          "snippet": "immunizations?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 123,
          "snippet": "allergies?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 124,
          "snippet": "procedures?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 125,
          "snippet": "diagnoses?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 126,
          "snippet": "clinicalNotes?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 127,
          "snippet": "images?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 128,
          "snippet": "documents?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 129,
          "snippet": "billing?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 130,
          "snippet": "consents?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 131,
          "snippet": "auditLogs?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 262,
          "snippet": "} catch (error: any) {"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 1206,
          "snippet": "* Obtiene datos del paciente (m√©todo helper para aggregator)"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 1299,
          "snippet": "const records: any[] = [];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 1329,
          "snippet": "const studies: any[] = [];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 1358,
          "snippet": "const sessions: any[] = [];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 1389,
          "snippet": "const insurance: any[] = [];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 1426,
          "snippet": "const invoices: any[] = [];"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-data-pdf.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 87,
          "snippet": "private doc: any; // PDFDocument instance"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 118,
          "snippet": "const PDFDocument: any = (pdfkitModule as any).default || (pdfkitModule as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 980,
          "snippet": "const options: any = {};"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-export/REFACTORING_COMPLETE.md",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 221,
          "snippet": "console.log(`Export ready: ${result.url}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 231,
          "snippet": "console.log(`Can accept new requests: ${capacity.canAcceptNewRequests}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 235,
          "snippet": "console.log(`Progress: ${progress?.progress}% - ${progress?.message}`);"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-export/__tests__/collector.factory.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 178,
          "snippet": "CollectorFactory['instances'].set('medical_records', mockCollector as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 256,
          "snippet": "CollectorFactory['instances'].set('medical_records', mockCollector as any);"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-export/__tests__/medical-records.collector.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 79,
          "snippet": "] as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 86,
          "snippet": "const isValid = collector.validate({} as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 125,
          "snippet": "date: '2023-01-01' as any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 131,
          "snippet": "createdAt: '2023-01-01' as any,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 132,
          "snippet": "updatedAt: '2023-01-01' as any,"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-export/__tests__/setup.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 49,
          "snippet": "export const createMockFirestoreDoc = (data: any) => ({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 55,
          "snippet": "export const createMockFirestoreSnapshot = (docs: any[]) => ({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 57,
          "snippet": "forEach: (callback: (doc: any) => void) => docs.forEach(callback),"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-export/collectors/appointments.collector.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 119,
          "snippet": "protected override transformDocument(id: string, data: any): Appointment {"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-export/collectors/base.collector.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 103,
          "snippet": "protected addDateRangeFilter(baseQuery: any, dateRange: DateRange) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 115,
          "snippet": "protected addDefaultOrdering(baseQuery: any) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 123,
          "snippet": "protected transformDocument(id: string, data: any): T {"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-export/collectors/lab-results.collector.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 94,
          "snippet": "protected override transformDocument(id: string, data: any): LabResult {"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-export/collectors/medical-records.collector.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 78,
          "snippet": "protected override transformDocument(id: string, data: any): MedicalRecord {"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-export/collectors/vital-signs.collector.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 150,
          "snippet": "protected override transformDocument(id: string, data: any): VitalSign {"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-export/factories/collector.factory.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 52,
          "snippet": "// TODO: Add remaining collectors in future sprints"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-export/factories/generator.factory.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 37,
          "snippet": "metadata?: any;"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-export/generators/base.generator.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 168,
          "snippet": "protected generateExportMetadata(dataPackage: PatientDataPackage): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 317,
          "snippet": "protected handleGenerationError(error: any, context: string): never {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 336,
          "snippet": "protected logProgress(message: string, data?: any): void {"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-export/generators/csv.generator.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 100,
          "snippet": "private async generateCategoryCsv(category: string, data: any[], filePath: string): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 168,
          "snippet": "private formatCellValue(value: any): string {"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-export/generators/json.generator.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 51,
          "snippet": "private createEnhancedJsonStructure(dataPackage: PatientDataPackage): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 123,
          "snippet": "private organizeMedicalData(medicalData: any): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 124,
          "snippet": "const organized: any = {};"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 143,
          "snippet": "private processCategoryData(category: string, data: any[]): any[] {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 158,
          "snippet": "private extractDateFromRecord(record: any): Date {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 181,
          "snippet": "private formatRecordDates(record: any): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 199,
          "snippet": "private findLatestDate(data: any[]): string {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 242,
          "snippet": "private validateJsonStructure(data: any): void {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 263,
          "snippet": "getJsonSchema(): any {"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-export/legacy/compatibility-layer.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 74,
          "snippet": "status: 'pending' as any,"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-export/legacy/index.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 40,
          "snippet": "options: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 51,
          "snippet": "options: any"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-export/orchestrator/export-orchestrator.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 483,
          "snippet": "progress: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 532,
          "snippet": "capacity: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 533,
          "snippet": "securityStatus: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 534,
          "snippet": "availableFormats: any;"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-export/request/index.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 107,
          "snippet": "errorDetails?: any,"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-export/request/types.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 71,
          "snippet": "errorDetails?: any;"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-export/security/access-control.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 38,
          "snippet": "value?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 390,
          "snippet": "exportOptions?: any"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-export/security/audit-logger.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 81,
          "snippet": "[key: string]: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 260,
          "snippet": "errorCode: (error as any).code || 'UNKNOWN',"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 387,
          "snippet": "metadata?: any"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-export/security/encryption.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 302,
          "snippet": "): { key: Buffer; salt: Buffer; metadata: any } {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 309,
          "snippet": "let metadata: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 420,
          "snippet": "encryptExportMetadata(metadata: any): EncryptedData | null {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 437,
          "snippet": "decryptExportMetadata(encryptedMetadata: EncryptedData): any | null {"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-export/security/index.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 53,
          "snippet": "exportOptions?: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 152,
          "snippet": "getSecurityMetadata(): any {"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/patient-export/types/index.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 26,
          "snippet": "exportOptions?: any; // Added for compatibility with orchestrator"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 102,
          "snippet": "emergencyContacts?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 103,
          "snippet": "insurance?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 107,
          "snippet": "medicalHistory?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 108,
          "snippet": "labResults?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 109,
          "snippet": "prescriptions?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 110,
          "snippet": "appointments?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 111,
          "snippet": "vitalSigns?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 112,
          "snippet": "immunizations?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 113,
          "snippet": "allergies?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 114,
          "snippet": "procedures?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 115,
          "snippet": "diagnoses?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 116,
          "snippet": "clinicalNotes?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 117,
          "snippet": "images?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 118,
          "snippet": "documents?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 119,
          "snippet": "billing?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 120,
          "snippet": "consents?: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 121,
          "snippet": "auditLogs?: any[];"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/payment-gateway.service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 51,
          "snippet": "data: any;"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 77,
          "snippet": "// TODO: Add MercadoPago initialization"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 192,
          "snippet": "receiptUrl: (paymentIntent as any).charges?.data[0]?.receipt_url || undefined"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 227,
          "snippet": "currentPeriodEnd: new Date((subscription as any).current_period_end * 1000),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 299,
          "snippet": "data?: any;"
        }
      ]
    },
    {
      "file": "packages/shared/src/services/payment-service.ts",
      "matches": [
        {
          "pattern": "TS_IGNORE",
          "severity": "warn",
          "line": 127,
          "snippet": "// @ts-ignore"
        },
        {
          "pattern": "TS_IGNORE",
          "severity": "warn",
          "line": 132,
          "snippet": "// @ts-ignore"
        },
        {
          "pattern": "TS_IGNORE",
          "severity": "warn",
          "line": 134,
          "snippet": "// @ts-ignore"
        },
        {
          "pattern": "TS_IGNORE",
          "severity": "warn",
          "line": 136,
          "snippet": "// @ts-ignore"
        },
        {
          "pattern": "TS_IGNORE",
          "severity": "warn",
          "line": 145,
          "snippet": "// @ts-ignore"
        }
      ]
    },
    {
      "file": "packages/shared/src/types/globals.d.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 3,
          "snippet": "info: (...args: any[]) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 4,
          "snippet": "warn: (...args: any[]) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 5,
          "snippet": "error: (...args: any[]) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 6,
          "snippet": "debug: (...args: any[]) => void;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 7,
          "snippet": "fatal: (...args: any[]) => void;"
        }
      ]
    },
    {
      "file": "packages/shared/src/types/roles.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 1,
          "snippet": "// TODO: Definir UserRole en @altamedica/types"
        }
      ]
    },
    {
      "file": "packages/shared/src/types/user-roles.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 1,
          "snippet": "// TODO: Definir UserRole en @altamedica/types"
        }
      ]
    },
    {
      "file": "packages/shared/src/types/user.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 1,
          "snippet": "// TODO: Definir UserRole en @altamedica/types"
        }
      ]
    },
    {
      "file": "packages/supabase/index.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 26,
          "snippet": "console.log('‚úÖ Conexi√≥n a Supabase exitosa (base de datos vac√≠a)');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 32,
          "snippet": "console.log('‚úÖ Conexi√≥n a Supabase exitosa');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 35,
          "snippet": "console.error('‚ùå Error conectando a Supabase:', error);"
        }
      ]
    },
    {
      "file": "packages/telemedicine-core/CLAUDE.md",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 63,
          "snippet": "console.log('WebRTC Quality:', quality);"
        }
      ]
    },
    {
      "file": "packages/telemedicine-core/src/hooks/useWebRTCQoS.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 11,
          "snippet": "// TODO: Re-enable when shared package is built"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 16,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 21,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 26,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 31,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/telemedicine-core/src/qos/webrtc-qos.service.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 17,
          "snippet": "// TODO: Re-enable when shared package is built"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 22,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 27,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 32,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 37,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 206,
          "snippet": "stats.forEach((report: any) => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 310,
          "snippet": "bytesReceived: typeof (stats as any).videoBytesReceived === 'number' ? (stats as any).videoBytesReceived : undefined"
        }
      ]
    },
    {
      "file": "packages/telemedicine-core/src/services/TelemedicineService.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 489,
          "snippet": "private handleDataChannelMessage(message: any): void {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 520,
          "snippet": "console.error('Heartbeat error:', error);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 525,
          "snippet": "private async sendSignalingMessage(type: string, data: any): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 593,
          "snippet": "private async updateSessionStatus(updates: any): Promise<void> {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 622,
          "snippet": "private async auditLog(action: string, data: any): Promise<void> {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 638,
          "snippet": "console.error('Audit log failed:', error);"
        }
      ]
    },
    {
      "file": "packages/telemedicine-core/src/services/UnifiedTelemedicineService.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 145,
          "snippet": "webrtcConfig: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 265,
          "snippet": "webrtcConfig: any;"
        }
      ]
    },
    {
      "file": "packages/telemedicine-core/src/useTelemedicineUnified.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 81,
          "snippet": "* TODO: Este hook necesita ser completado cuando las dependencias est√©n disponibles"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 136,
          "snippet": "// TODO: Implement actual connection logic"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 216,
          "snippet": "// TODO: Send message through signaling server"
        }
      ]
    },
    {
      "file": "packages/telemedicine-core/src/videoCallClient.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 123,
          "snippet": "return Array.isArray(data) ? data : (data as any).active_calls || [];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 222,
          "snippet": "const createCall = async (doctorEmail: string, patientEmail: string, options?: any) => {"
        }
      ]
    },
    {
      "file": "packages/telemedicine-core/src/webrtc-service.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 63,
          "snippet": "direct_doctor_url: `${VIDEO_SERVER_BASE_URL}/video-call/${(result as any).room_id}?user_id=${params.doctor_email}&user_type=doctor`,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 64,
          "snippet": "direct_patient_url: `${VIDEO_SERVER_BASE_URL}/video-call/${(result as any).room_id}?user_id=${params.patient_email}&user_type=patient`,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 89,
          "snippet": "return (health as any).status === 'healthy';"
        }
      ]
    },
    {
      "file": "packages/types/README.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 7,
          "snippet": "Sistema de tipos TypeScript centralizado para la plataforma AltaMedica. Proporciona validaciones Zod, interfaces TypeScript y tipos m√©dicos especializados que garantizan consistencia y seguridad de tipos en todo el monorepo."
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 59,
          "snippet": "console.log('‚úÖ Usuario v√°lido:', validUser);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 61,
          "snippet": "console.error('‚ùå Datos inv√°lidos:', error.message);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 290,
          "snippet": "console.error('Error de validaci√≥n:', error.message);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 322,
          "snippet": "console.log('Datos:', result.data.data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 325,
          "snippet": "console.error('Error API:', result.error.issues);"
        }
      ]
    },
    {
      "file": "packages/types/TYPES_ARCHITECTURE_MAP.md",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 27,
          "snippet": "‚îÇ   ‚îú‚îÄ‚îÄ üìÑ index.ts        # Interruptor principal - exporta TODO"
        }
      ]
    },
    {
      "file": "packages/types/src/ai/medical-events.types.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 202,
          "snippet": "insuranceInfo: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 205,
          "snippet": "changes?: Record<string, { oldValue: any; newValue: any }>;"
        }
      ]
    },
    {
      "file": "packages/types/src/ai/ml-types.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 235,
          "snippet": "/** M√©todo de validaci√≥n cruzada */"
        }
      ]
    },
    {
      "file": "packages/types/src/api/request.types.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 58,
          "snippet": "onError?: (error: any) => any;"
        }
      ]
    },
    {
      "file": "packages/types/src/api/response.types.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 40,
          "snippet": "details?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 44,
          "snippet": "value?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 80,
          "snippet": "received?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 82,
          "snippet": "expected?: any;"
        }
      ]
    },
    {
      "file": "packages/types/src/api.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 27,
          "snippet": "post<T>(url: string, data?: any, config?: RequestConfig): Promise<T>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 28,
          "snippet": "put<T>(url: string, data?: any, config?: RequestConfig): Promise<T>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 29,
          "snippet": "patch<T>(url: string, data?: any, config?: RequestConfig): Promise<T>;"
        }
      ]
    },
    {
      "file": "packages/types/src/auth/auth-token.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 39,
          "snippet": "response?: any; // NextResponse en el contexto de Next.js"
        }
      ]
    },
    {
      "file": "packages/types/src/b2c/company-doctor-communication.types.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 308,
          "snippet": "previousValue?: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 309,
          "snippet": "currentValue?: any"
        }
      ]
    },
    {
      "file": "packages/types/src/common.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 80,
          "snippet": "details?: any;"
        }
      ]
    },
    {
      "file": "packages/types/src/core/base.types.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 178,
          "snippet": "details?: any;"
        }
      ]
    },
    {
      "file": "packages/types/src/core/utility.types.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 93,
          "snippet": "export type Constructor<T = {}> = new (...args: any[]) => T;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 141,
          "snippet": "export type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (...args: any) => Promise<infer R> ? R : never;"
        }
      ]
    },
    {
      "file": "packages/types/src/guards/medical-guards.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 108,
          "snippet": "medications: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 128,
          "snippet": "licenses: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 184,
          "snippet": "typeof (apt.telemedicineInfo as any).platform === 'string'"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 321,
          "snippet": ".map(m => typeof m === 'object' && m && 'name' in m ? (m as any).name : '')"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 341,
          "snippet": "medications: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 346,
          "snippet": "const p = patient as any;"
        }
      ]
    },
    {
      "file": "packages/types/src/medical/anamnesis.types.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 71,
          "snippet": "validacion?: (valor: any) => boolean | string;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 78,
          "snippet": "respuesta: any;"
        }
      ]
    },
    {
      "file": "packages/types/src/medical/clinical/medical-record.types.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 140,
          "snippet": "originalContent: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 142,
          "snippet": "amendedContent: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 398,
          "snippet": "defaultValue?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 413,
          "snippet": "value: any;"
        }
      ]
    },
    {
      "file": "packages/types/src/medical/patient/patient.types.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 323,
          "snippet": "/** M√©todo de contacto preferido */"
        }
      ]
    },
    {
      "file": "packages/types/src/types/api.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 51,
          "snippet": "details?: any;"
        }
      ]
    },
    {
      "file": "packages/types/src/types/base.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 59,
          "snippet": "export function normalizeUser(user: any): User {"
        }
      ]
    },
    {
      "file": "packages/types/src/types/common.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 177,
          "snippet": "details?: any;"
        }
      ]
    },
    {
      "file": "packages/types/src/types/medical.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 289,
          "snippet": "valor?: any"
        }
      ]
    },
    {
      "file": "packages/types/src/utils/type-utils.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 37,
          "snippet": "export type AsyncReturnType<T extends (...args: any) => Promise<any>> ="
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 38,
          "snippet": "T extends (...args: any) => Promise<infer R> ? R : never;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 73,
          "snippet": "if (obj1 === null || obj2 === null) return (obj1 as any) === (obj2 as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 74,
          "snippet": "if (typeof obj1 !== 'object') return (obj1 as any) === (obj2 as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 76,
          "snippet": "const keys1 = Object.keys(obj1 as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 77,
          "snippet": "const keys2 = Object.keys(obj2 as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 83,
          "snippet": "this.haveSameStructure((obj1 as any)[key], (obj2 as any)[key])"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 94,
          "snippet": "if (obj instanceof Date) return new Date(obj.getTime()) as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 95,
          "snippet": "if (Array.isArray(obj)) return obj.map(item => this.deepClone(item)) as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 113,
          "snippet": "const result = { ...target } as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 118,
          "snippet": "const targetValue = (target as any)[key];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 145,
          "snippet": "const differences: any = {};"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 176,
          "snippet": "if (key in (obj as any)) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 190,
          "snippet": "const result = { ...obj } as any;"
        }
      ]
    },
    {
      "file": "packages/types/src/utils/validation-utils.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 34,
          "snippet": "value?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 36,
          "snippet": "expected?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 50,
          "snippet": "value?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 74,
          "snippet": "value: (err as any).received,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 75,
          "snippet": "expected: (err as any).expected"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 167,
          "snippet": "): { value: any; isValid: boolean; errors: string[] } {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 272,
          "snippet": "customValidator?: (value: any) => string | null;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 352,
          "snippet": "value: (err as any).received"
        }
      ]
    },
    {
      "file": "packages/types/src/validators/lazy-schemas.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 9,
          "snippet": "// TODO: Re-enable when shared package is built"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 14,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 19,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 24,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 29,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 267,
          "snippet": "validateField(fieldName: string, value: any): {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 270,
          "snippet": "data?: any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 275,
          "snippet": "const fieldSchema = (this.schema.shape as any)[fieldName];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 337,
          "snippet": "condition: (data: any) => string,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 386,
          "snippet": "data: any[],"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 390,
          "snippet": "invalid: Array<{ index: number; data: any; errors: z.ZodError }>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 394,
          "snippet": "const invalid: Array<{ index: number; data: any; errors: z.ZodError }> = [];"
        }
      ]
    },
    {
      "file": "packages/types/src/validators/medical-validators.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 331,
          "snippet": "export const validateDrugInteractions = (medications: any[]): {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 426,
          "snippet": "static async validatePatients(patients: any[]): Promise<{"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 427,
          "snippet": "valid: any[];"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 428,
          "snippet": "invalid: Array<{ index: number; errors: string[]; data: any }>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 429,
          "snippet": "warnings: Array<{ index: number; warnings: string[]; data: any }>;"
        }
      ]
    },
    {
      "file": "packages/ui/MIGRATION_TEST.md",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 245,
          "snippet": "onJoinCall={(id) => console.log('Joining call:', id)}"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 246,
          "snippet": "onReschedule={(id) => console.log('Rescheduling:', id)}"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 247,
          "snippet": "onCancel={(id) => console.log('Cancelling:', id)}"
        }
      ]
    },
    {
      "file": "packages/ui/src/components/3d/HospitalBackdrop.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 4,
          "snippet": "// TODO: Re-enable when dependencies are properly installed"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 15,
          "snippet": "// TODO: Re-enable when dependencies are properly installed"
        }
      ]
    },
    {
      "file": "packages/ui/src/components/HydrationSafeIcon.tsx",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 10,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 15,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 20,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 25,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 38,
          "snippet": "[key: string]: any;"
        }
      ]
    },
    {
      "file": "packages/ui/src/components/analytics/VitalSignsChart.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 139,
          "snippet": "const [activeAlerts, setActiveAlerts] = useState<Record<VitalSignMetric, boolean>>({} as any);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 196,
          "snippet": "const newAlerts: Record<VitalSignMetric, boolean> = {} as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 556,
          "snippet": "> = {} as any;"
        }
      ]
    },
    {
      "file": "packages/ui/src/components/audit/AuditLogTable.tsx",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 19,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 24,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 29,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 34,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/ui/src/components/auth/MFAVerification.tsx",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 15,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 20,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 25,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 30,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 43,
          "snippet": "onSuccess?: (data: any) => void;"
        }
      ]
    },
    {
      "file": "packages/ui/src/components/billing/PaymentMethodForm.tsx",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 16,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 21,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 26,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 31,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 246,
          "snippet": "<h3 className=\"text-lg font-semibold\">M√©todo de pago agregado</h3>"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 248,
          "snippet": "Tu m√©todo de pago ha sido configurado exitosamente y est√° listo para usar."
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 261,
          "snippet": "{mode === 'add' ? 'Agregar m√©todo de pago' : 'Actualizar m√©todo de pago'}"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 405,
          "snippet": "<>{mode === 'add' ? 'Agregar m√©todo de pago' : 'Actualizar m√©todo'}</>"
        }
      ]
    },
    {
      "file": "packages/ui/src/components/billing/PaymentMethodsList.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 100,
          "snippet": "setSuccessMessage('M√©todo de pago eliminado exitosamente');"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 103,
          "snippet": "setError(err instanceof Error ? err.message : 'Error al eliminar m√©todo de pago');"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 121,
          "snippet": "setSuccessMessage('M√©todo de pago predeterminado actualizado');"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 124,
          "snippet": "setError(err instanceof Error ? err.message : 'Error al actualizar m√©todo predeterminado');"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 142,
          "snippet": "Agregar m√©todo"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 179,
          "snippet": "Agrega un m√©todo de pago para comenzar a usar los servicios premium"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 184,
          "snippet": "Agregar primer m√©todo"
        },
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 277,
          "snippet": "Has alcanzado el l√≠mite m√°ximo de {maxMethods} m√©todos de pago. Elimina un m√©todo"
        }
      ]
    },
    {
      "file": "packages/ui/src/components/corporate/ButtonCorporate.tsx",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 15,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 20,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 25,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 30,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ESLINT_DISABLE",
          "severity": "warn",
          "line": 186,
          "snippet": "// eslint-disable-next-line no-console"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 187,
          "snippet": "console.warn("
        }
      ]
    },
    {
      "file": "packages/ui/src/components/dashboard/CustomizableMedicalDashboard.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 291,
          "snippet": "status={vital.status as any}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 292,
          "snippet": "trend={vital.trend as any}"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 306,
          "snippet": "<StatusBadge status={appointment.status as any} size=\"sm\" />"
        }
      ]
    },
    {
      "file": "packages/ui/src/components/emergency/EmergencyButton.tsx",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 25,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 30,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 35,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 40,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/ui/src/components/forms/MedicalIntakeForm.tsx",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 22,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 27,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 32,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 37,
          "snippet": "console.debug(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 197,
          "snippet": "value: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 220,
          "snippet": "item: any"
        }
      ]
    },
    {
      "file": "packages/ui/src/components/medical/AppointmentCard.stories.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 325,
          "snippet": "<button className=\"px-4 py-2 bg-blue-500 text-white rounded\">Seleccionar todo</button>"
        }
      ]
    },
    {
      "file": "packages/ui/src/components/medical/AppointmentCard.tsx",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 32,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 37,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 42,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 47,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/ui/src/components/medical/DiagnosticAssistant.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 35,
          "snippet": "value: any;"
        }
      ]
    },
    {
      "file": "packages/ui/src/components/medical/HealthMetricCard.tsx",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 16,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 21,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 26,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 31,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/ui/src/components/medical/StatusBadge.tsx",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 15,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 20,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 25,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 30,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/ui/src/hooks/use-toast.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 14,
          "snippet": "console.log('Toast:', options);"
        }
      ]
    },
    {
      "file": "packages/ui/src/hooks/usePatientData.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 11,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 16,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 21,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 26,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/ui/src/index.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 139,
          "snippet": "export const Checkbox = ({ children, ...props }: any) => <input type=\"checkbox\" {...props} />;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 140,
          "snippet": "export const RadioGroup = ({ children, ...props }: any) => <div {...props}>{children}</div>;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 141,
          "snippet": "export const RadioGroupItem = ({ children, ...props }: any) => <input type=\"radio\" {...props} />;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 142,
          "snippet": "export const Label = ({ children, ...props }: any) => <label {...props}>{children}</label>;"
        }
      ]
    },
    {
      "file": "packages/ui/src/select.tsx",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 7,
          "snippet": "// TODO: Reemplazar con implementaci√≥n completa de Radix UI Select"
        }
      ]
    },
    {
      "file": "packages/ui/src/theme/colors.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 187,
          "snippet": "// üé® EXPORTAR TODO"
        }
      ]
    },
    {
      "file": "packages/utils/src/ApiOptimizationMiddleware.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 7,
          "snippet": "const cacheStore = new Map<string, { data: any; expiry: number }>();"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 19,
          "snippet": "set(key: string, data: any, ttl: number) {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 29,
          "snippet": "info: (message: string, data?: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 31,
          "snippet": "console.log(`[INFO] ${message}`, data || '');"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 34,
          "snippet": "error: (message: string, error?: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 35,
          "snippet": "console.error(`[ERROR] ${message}`, error || '');"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 124,
          "snippet": "function shouldCompress(data: any, threshold: number): boolean {"
        }
      ]
    },
    {
      "file": "packages/utils/src/RedirectManager.tsx",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 20,
          "snippet": "warn: (message: string, data?: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 22,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 25,
          "snippet": "error: (message: string, data?: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 27,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 30,
          "snippet": "info: (message: string, data?: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 32,
          "snippet": "console.log(message, data);"
        }
      ]
    },
    {
      "file": "packages/utils/src/TechnicalKnowledgeService.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 5,
          "snippet": "info: (message: string, data?: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 7,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 10,
          "snippet": "warn: (message: string, data?: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 12,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 15,
          "snippet": "error: (message: string, data?: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 17,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 95,
          "snippet": "const data = await response.json() as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 97,
          "snippet": "return (data.items || []).map((item: any) => ({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 124,
          "snippet": "const data = await response.json() as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 126,
          "snippet": "return (data.items || []).map((item: any) => ({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 147,
          "snippet": "const npmData = await npmResponse.json() as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 151,
          "snippet": "const downloadsData = await downloadsResponse.json() as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 162,
          "snippet": "const githubData = await githubResponse.json() as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 211,
          "snippet": "const data = await response.json() as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 213,
          "snippet": "return (data.issues?.vulnerabilities || []).map((vuln: any) => ({"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 232,
          "snippet": "const data = await response.json() as any;"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 257,
          "snippet": "private calculateMaintainability(npmData: any, githubMetrics: any): string {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 292,
          "snippet": "documentation: any[];"
        }
      ]
    },
    {
      "file": "packages/utils/src/dev/chunk-error-handler.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 8,
          "snippet": "error: (message: string, data?: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 10,
          "snippet": "console.error(message, data);"
        }
      ]
    },
    {
      "file": "packages/utils/src/hooks/useDebounce.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 23,
          "snippet": "export function useDebounceCallback<T extends (...args: any[]) => any>("
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 97,
          "snippet": "apiCall: (params: any) => Promise<T>,"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 99,
          "snippet": "): [(params: any) => void, T | null, boolean, string | null] {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 108,
          "snippet": "(params: any) => {"
        }
      ]
    },
    {
      "file": "packages/utils/src/hooks/useLocalStorage.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 17,
          "snippet": "console.error(`Error loading localStorage key \"${key}\":`, error);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 32,
          "snippet": "console.error(`Error setting localStorage key \"${key}\":`, error);"
        }
      ]
    },
    {
      "file": "packages/utils/src/hooks/useSessionStorage.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 17,
          "snippet": "console.error(`Error loading sessionStorage key \"${key}\":`, error);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 32,
          "snippet": "console.error(`Error setting sessionStorage key \"${key}\":`, error);"
        }
      ]
    },
    {
      "file": "packages/utils/src/index.ts",
      "matches": [
        {
          "pattern": "TODO",
          "severity": "info",
          "line": 9,
          "snippet": "// TODO: Re-enable when shared package is built"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 14,
          "snippet": "console.log(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 19,
          "snippet": "console.warn(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 24,
          "snippet": "console.error(message, data);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 29,
          "snippet": "console.debug(message, data);"
        }
      ]
    },
    {
      "file": "packages/utils/src/rate-limiter.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 12,
          "snippet": "console.warn('REDIS_URL environment variable not found. Falling back to localhost:6379.');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 17,
          "snippet": "console.error('Could not connect to Redis:', err);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 21,
          "snippet": "console.log('Successfully connected to Redis.');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 60,
          "snippet": "console.error('Redis transaction for rate limiting failed.');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 70,
          "snippet": "console.error('Error during rate limiting check:', error);"
        }
      ]
    },
    {
      "file": "packages/utils/src/secure-storage.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 108,
          "snippet": "// console.error('Decryption failed:', error);"
        }
      ]
    },
    {
      "file": "packages/utils/src/storage.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 7,
          "snippet": "error: (message: string, error?: any) => {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 9,
          "snippet": "console.error(message, error);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 16,
          "snippet": "get: (key: string): any => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 25,
          "snippet": "set: (key: string, value: any): void => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 52,
          "snippet": "get: (key: string): any => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 61,
          "snippet": "set: (key: string, value: any): void => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 103,
          "snippet": "setPatientData: (patientId: string, data: any): void => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 112,
          "snippet": "setMedicalRecords: (patientId: string, records: any[]): void => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 116,
          "snippet": "getMedicalRecords: (patientId: string): any[] => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 121,
          "snippet": "setPrescriptions: (patientId: string, prescriptions: any[]): void => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 125,
          "snippet": "getPrescriptions: (patientId: string): any[] => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 130,
          "snippet": "setAppointments: (patientId: string, appointments: any[]): void => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 134,
          "snippet": "getAppointments: (patientId: string): any[] => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 139,
          "snippet": "setLabResults: (patientId: string, results: any[]): void => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 143,
          "snippet": "getLabResults: (patientId: string): any[] => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 148,
          "snippet": "setUserPreferences: (userId: string, preferences: any): void => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 169,
          "snippet": "private: new Map<string, { data: any; timestamp: number; ttl: number }>(),"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 171,
          "snippet": "set: (key: string, data: any, ttl: number = 300000): void => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 247,
          "snippet": "setSecure: (key: string, value: any): void => {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 273,
          "snippet": "value: any,"
        }
      ]
    },
    {
      "file": "packages/utils/src/validation.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 105,
          "snippet": "value: any,"
        }
      ]
    },
    {
      "file": "quick-health-check.cjs",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 10,
          "snippet": "console.log('üè• QUICK HEALTH CHECK ALTAMEDICA\\n');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 11,
          "snippet": "console.log('='.repeat(42));"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 14,
          "snippet": "console.log('\\nüì¶ UI Package Status:');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 18,
          "snippet": "console.log(`  ‚úÖ Build exists: ${(uiSize / 1024).toFixed(1)} KB`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 23,
          "snippet": "console.log(`  ‚úÖ Exports count: ${exportCount}+`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 25,
          "snippet": "console.log(`  ‚ùå UI Package error: ${e.message}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 29,
          "snippet": "console.log('\\nüîß Critical Packages:');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 32,
          "snippet": "console.log(`  ${exists ? '‚úÖ' : '‚ùå'} @altamedica/${pkg}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 36,
          "snippet": "console.log('\\nüöÄ Apps Status (Quick):');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 47,
          "snippet": "console.log(`  ${status} ${app}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 49,
          "snippet": "console.log(`  ‚ö†Ô∏è  ${app} (check skipped)`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 55,
          "snippet": "console.log('\\nüîó Integration Quick Check:');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 65,
          "snippet": "console.log(`  üìä Build Artifacts: ${score.toFixed(0)}%`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 67,
          "snippet": "console.log(`  ‚ùå Integration check failed`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 71,
          "snippet": "console.log('\\nüìù Git Status:');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 75,
          "snippet": "console.log(`  Branch: ${branch}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 76,
          "snippet": "console.log(`  Modified files: ${modified}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 80,
          "snippet": "console.log('\\nüí° Quick Recommendations:');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 96,
          "snippet": "console.log(`  ${i + 1}. ${rec}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 99,
          "snippet": "console.log('\\n‚úÖ Quick health check completed!\\n');"
        }
      ]
    },
    {
      "file": "simple-fix-for-gemini.cjs",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 11,
          "snippet": "console.log('üîß SIMPLE FIX FOR GEMINI\\n');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 18,
          "snippet": "console.log(`${exists ? '‚úÖ' : '‚ùå'} ${pkg} CJS: ${exists}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 42,
          "snippet": "console.log(`‚úÖ Fixed ${pkg} package.json exports`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 49,
          "snippet": "console.log('üîç Debug imports for Gemini:');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 55,
          "snippet": "console.log(\\`Testing: @altamedica/\\${pkg}\\`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 58,
          "snippet": "console.log(\\`  CJS file exists: \\${require('fs').existsSync(cjsPath)}\\`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 61,
          "snippet": "console.log(\\`  ‚úÖ @altamedica/\\${pkg} should work\\`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 63,
          "snippet": "console.log(\\`  ‚ùå @altamedica/\\${pkg} error: \\${e.message}\\`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 67,
          "snippet": "console.log('\\\\nüìã RECOMMENDATION FOR GEMINI:');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 68,
          "snippet": "console.log('Try importing from apps like:');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 69,
          "snippet": "console.log('import { Button } from \"@altamedica/ui\";');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 70,
          "snippet": "console.log('If still failing, run: pnpm install && pnpm build');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 76,
          "snippet": "console.log('\\n‚úÖ GEMINI HELP READY!');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 77,
          "snippet": "console.log('\\nNEXT STEPS FOR GEMINI:');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 78,
          "snippet": "console.log('1. Try building an app: cd apps/patients && npm run dev');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 79,
          "snippet": "console.log('2. If imports still fail, run: node debug-imports-for-gemini.cjs');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 80,
          "snippet": "console.log('3. The auto-sync will continue monitoring your progress');"
        }
      ]
    },
    {
      "file": "tests/hooks-usage.spec.js",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 25,
          "snippet": "console.log(`üìä Cobertura actual: ${usagePercentage.toFixed(1)}%`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 33,
          "snippet": "console.log(`‚ùå Hooks no utilizados: ${unusedCount}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 37,
          "snippet": "console.log('Ejemplos de hooks no utilizados:', unusedList.map(h => h.name));"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 57,
          "snippet": "console.log(`üîÑ Hooks duplicados: ${duplicatedCount}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 61,
          "snippet": "console.log('Ejemplos de duplicaciones:', examples.map(([name]) => name));"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 82,
          "snippet": "console.log('üö® Hooks que requieren migraci√≥n inmediata:', highlyDuplicated);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 94,
          "snippet": "console.log(`‚ö†Ô∏è Problemas de dependencias: ${issueCount}`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 97,
          "snippet": "console.log('Problemas encontrados:', analysisResults.dependencyIssues);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 128,
          "snippet": "console.log('Apps sin dependencia pero usando hooks:', appsWithoutDependency);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 159,
          "snippet": "console.error(`‚ùå Error verificando ${hookName}:`, error.message);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 194,
          "snippet": "console.log('üìã Plan de migraci√≥n generado:', {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 215,
          "snippet": "console.log('üí∞ ROI Estimado de migraci√≥n:', estimatedSavings);"
        }
      ]
    },
    {
      "file": "tests/integration/helpers/test-data-generators.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 224,
          "snippet": "export function generateVitalSigns(age: number, conditions: string[] = []): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 283,
          "snippet": "export function generatePrescriptionData(): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 303,
          "snippet": "async function simulateDbInsert(table: string, data: any): Promise<void> {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 310,
          "snippet": "console.log(`Inserted into ${table}:`, JSON.stringify(data, null, 2))"
        }
      ]
    },
    {
      "file": "tests/integration/helpers/webrtc-test-utils.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 32,
          "snippet": "private mockPeerConnection: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 128,
          "snippet": "getVideoTrack(): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 132,
          "snippet": "getAudioTrack(): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 224,
          "snippet": "private generateMockStats(): any {"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 296,
          "snippet": "public settings: any = {}"
        }
      ]
    },
    {
      "file": "tests/integration/medical-flows/patient-appointment-consultation.integration.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 19,
          "snippet": "let testPatient: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 20,
          "snippet": "let testDoctor: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 21,
          "snippet": "let testAppointment: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 22,
          "snippet": "let testConsultation: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 397,
          "snippet": "(n: any) => n.type === 'consultation_summary'"
        }
      ]
    },
    {
      "file": "tests/integration/medical-flows/prescription-workflow.integration.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 19,
          "snippet": "let testPatient: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 20,
          "snippet": "let testDoctor: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 21,
          "snippet": "let testConsultation: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 22,
          "snippet": "let testPrescription: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 360,
          "snippet": "const smsInstruction = instructionsLog.data.communications.find((c: any) =>"
        }
      ]
    },
    {
      "file": "tests/integration/webrtc-telemedicine/webrtc-consultation.integration.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 21,
          "snippet": "let testPatient: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 22,
          "snippet": "let testDoctor: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 23,
          "snippet": "let testConsultation: any"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 24,
          "snippet": "let webrtcRoom: any"
        }
      ]
    },
    {
      "file": "tests/unit/medical-ai-integration.test.ts",
      "matches": [
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 7,
          "snippet": "let medicalScenarios: any[]"
        }
      ]
    },
    {
      "file": "tools/metrics/recalculate-valuation.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 24,
          "snippet": "console.log('[valuation] metrics-report.json missing ‚Üí generating');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 72,
          "snippet": "console.log('[valuation] Calculation summary:', calcBlock);"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 79,
          "snippet": "async function rewrite(filePath: string, generatedAt: string, calc: any, metrics: MetricsReport) {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 103,
          "snippet": "console.log('[valuation] Updated', path.basename(filePath));"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 106,
          "snippet": "recalc().catch(e => { console.error('[valuation] ERROR', e); process.exit(1); });"
        }
      ]
    },
    {
      "file": "tools/metrics/repo-metrics.ts",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 120,
          "snippet": "console.log(JSON.stringify(report, null, 2));"
        },
        {
          "pattern": "ANY_TYPE",
          "severity": "warn",
          "line": 121,
          "snippet": "} catch (e:any) {"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 122,
          "snippet": "console.error('ERROR_METRICS', e.message);"
        }
      ]
    },
    {
      "file": "validate-e2e.js",
      "matches": [
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 6,
          "snippet": "console.log('üîç E2E Validation Starting...\\n');"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 12,
          "snippet": "console.log(`‚úÖ Package ${pkg}: BUILD SUCCESS`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 14,
          "snippet": "console.log(`‚ùå Package ${pkg}: BUILD FAILED`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 22,
          "snippet": "console.log(`‚úÖ App ${app}: TYPE-CHECK SUCCESS`);"
        },
        {
          "pattern": "CONSOLE_LOG",
          "severity": "info",
          "line": 24,
          "snippet": "console.log(`‚ùå App ${app}: TYPE-CHECK FAILED`);"
        }
      ]
    }
  ]
}