# PROMPT 1: AUDITORÍA DE DEUDA TÉCNICA HISTÓRICA - DEVALTAMEDICA
# =================================================================
# CONTEXTO: Resolución de problemas acumulados y deuda técnica existente
# FECHA: 2025-08-25
# OBJETIVO: Identificar y documentar código abandonado por Claude AI
# =================================================================

## CONTEXTO CRÍTICO

Estás analizando el proyecto DevAltaMedica que ha acumulado deuda técnica significativa debido a falsas completaciones de Claude AI durante los últimos meses. Claude frecuentemente abandonó tareas por timeout pero reportó haberlas completado. Necesito que identifiques EVIDENCIA CONCRETA de trabajo incompleto que ya existe en el código.

## ANTECEDENTES DEL PROBLEMA

Según el informe en /home/edu/Devaltamedica-Independent/INFORME_FALSAS_COMPLETACIONES_CLAUDE.md:
- Claude abandona tareas después de ~30 minutos pero reporta éxito
- 87% de errores de timeout afectaron completación real
- 10x incremento en código duplicado desde 2024
- Múltiples funciones quedaron como stubs vacíos

## TAREA 1: DETECTAR CÓDIGO ABANDONADO (DEUDA TÉCNICA EXISTENTE)

Necesito que busques en TODO el proyecto DevAltaMedica los siguientes patrones que indican trabajo abandonado por Claude en el PASADO:

### 1.1 BUSCAR FUNCIONES STUB Y PLACEHOLDERS
Ejecuta estos comandos y reporta CADA ocurrencia:

```bash
# Buscar funciones claramente incompletas
grep -r "TODO\|FIXME\|HACK\|XXX\|PENDING\|REFACTOR" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" /home/edu/Devaltamedica-Independent/

# Buscar implementaciones vacías
grep -r "throw new Error(['\"]Not implemented\|TODO\|Pending" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" /home/edu/Devaltamedica-Independent/

# Buscar returns sospechosos
grep -r "return null.*TODO\|return undefined.*TODO\|return \[\].*TODO\|return {}.*TODO" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" /home/edu/Devaltamedica-Independent/

# Buscar funciones con solo console.log
grep -A 3 -B 1 "^[[:space:]]*function\|^[[:space:]]*const.*=.*=>" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" /home/edu/Devaltamedica-Independent/ | grep -B 2 -A 2 "console.log\|console.warn\|console.error"
```

### 1.2 IDENTIFICAR TESTS ABANDONADOS
Busca tests que fueron creados pero nunca implementados:

```bash
# Tests skippeados (trabajo inconcluso del pasado)
grep -r "\.skip\|xit(\|xdescribe(\|test\.todo\|it\.todo\|describe\.todo" --include="*.test.js" --include="*.test.ts" --include="*.spec.js" --include="*.spec.ts" /home/edu/Devaltamedica-Independent/

# Tests con expects comentados
grep -r "//.*expect\|/\*.*expect" --include="*.test.js" --include="*.test.ts" --include="*.spec.js" --include="*.spec.ts" /home/edu/Devaltamedica-Independent/

# Tests que no tienen assertions
grep -l "it(\|test(\|describe(" --include="*.test.js" --include="*.test.ts" --include="*.spec.js" --include="*.spec.ts" /home/edu/Devaltamedica-Independent/ | xargs -I {} sh -c 'grep -L "expect\|assert\|should" {}'
```

### 1.3 DETECTAR IMPORTS ROTOS Y DEPENDENCIAS HUÉRFANAS
Código que Claude dejó con referencias rotas:

```bash
# Buscar imports de archivos que no existen
grep -r "import.*from\|require(" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" /home/edu/Devaltamedica-Independent/ | while read line; do
    # Verificar si el archivo importado existe
    echo "$line"
done

# Buscar archivos parcialmente migrados (mezcla de require e import)
find /home/edu/Devaltamedica-Independent/ -name "*.js" -o -name "*.ts" | xargs -I {} sh -c 'grep -l "require(" {} | xargs grep -l "^import"'
```

### 1.4 ENCONTRAR CÓDIGO DUPLICADO MASIVO
Evidencia de copy-paste excesivo (deuda técnica acumulada):

```bash
# Instalar y ejecutar detector de duplicación
cd /home/edu/Devaltamedica-Independent/
npx jscpd . --min-lines 10 --min-tokens 50 --reporters json --output jscpd-report.json

# Analizar el reporte y listar:
# - Archivos con más duplicaciones
# - Bloques de código repetidos más de 3 veces
# - Porcentaje total de duplicación
```

### 1.5 IDENTIFICAR ARCHIVOS PARCIALMENTE PROCESADOS
Archivos que muestran signos de abandono a mitad del trabajo:

```bash
# Archivos con muchos console.logs (debugging abandonado)
find /home/edu/Devaltamedica-Independent/ -name "*.js" -o -name "*.ts" | xargs -I {} sh -c 'count=$(grep -c "console\." {} 2>/dev/null || echo 0); if [ $count -gt 5 ]; then echo "$count console.logs in: {}"; fi'

# Archivos con más del 40% de líneas comentadas (código viejo no limpiado)
find /home/edu/Devaltamedica-Independent/ -name "*.js" -o -name "*.ts" | while read file; do
    total=$(wc -l < "$file")
    commented=$(grep -c "^[[:space:]]*//" "$file" 2>/dev/null || echo 0)
    if [ $total -gt 0 ]; then
        percent=$((commented * 100 / total))
        if [ $percent -gt 40 ]; then
            echo "$file: $percent% comentado ($commented/$total líneas)"
        fi
    fi
done
```

## FORMATO DE ENTREGA

Genera un reporte MARKDOWN con esta estructura exacta:

```markdown
# REPORTE DE DEUDA TÉCNICA DETECTADA - DEVALTAMEDICA
Fecha de análisis: [FECHA]
Total de archivos analizados: [NÚMERO]

## 1. FUNCIONES INCOMPLETAS Y STUBS
### Críticas (Bloqueantes)
- Archivo: [ruta/archivo.js:línea]
  Código: [código encontrado]
  Tipo: TODO|FIXME|NOT_IMPLEMENTED
  Impacto: [Alto|Medio|Bajo]

### No Críticas
[Lista similar]

## 2. TESTS ABANDONADOS
Total de tests skippeados: [NÚMERO]
Total de tests sin assertions: [NÚMERO]

[Lista de archivos y líneas]

## 3. CÓDIGO DUPLICADO
Porcentaje total de duplicación: [X%]
Bloques duplicados encontrados: [NÚMERO]

### Top 10 Duplicaciones Más Graves
[Lista con archivos y líneas]

## 4. ARCHIVOS CON DEBUGGING ABANDONADO
[Lista de archivos con >5 console.logs]

## 5. MÉTRICAS FINALES
- TODOs encontrados: [NÚMERO]
- FIXMEs encontrados: [NÚMERO]
- Funciones stub: [NÚMERO]
- Tests incompletos: [NÚMERO]
- Porcentaje de duplicación: [X%]
- Archivos afectados: [NÚMERO]

## 6. PRIORIZACIÓN PARA CORRECCIÓN
### Prioridad 1 - Crítico (Corregir inmediatamente)
[Lista de 5-10 items más graves]

### Prioridad 2 - Alto (Corregir esta semana)
[Lista de items]

### Prioridad 3 - Medio (Planificar para siguiente sprint)
[Lista de items]
```

## IMPORTANTE

1. **NO INTERPRETES** - Solo reporta lo que encuentras literalmente
2. **SÉ EXHAUSTIVO** - Revisa TODOS los archivos del proyecto
3. **DATOS CONCRETOS** - Archivo, línea, código exacto
4. **TIEMPO ESTIMADO**: Este análisis debe tomar 30-45 minutos
5. **GUARDA TU PROGRESO** - Crea checkpoints cada 10 minutos

Comienza el análisis AHORA y reporta TODO lo que encuentres relacionado con deuda técnica acumulada del pasado.